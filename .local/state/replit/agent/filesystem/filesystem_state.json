{"file_contents":{"README.md":{"content":"# CostFlowAI\n\nProfessional cost calculation and analysis platform built as a secure, SEO-optimized static site.\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js (v16 or higher)\n- npm\n- Netlify CLI (optional, for deployment)\n\n### Local Development\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd costflowai01\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Build the project**\n   ```bash\n   npm run build\n   ```\n\n4. **Run tests**\n   ```bash\n   npm test\n   ```\n\n## 📦 Build Process\n\nThe build process includes blog generation, search indexing, and security hardening:\n\n- `npm run build:blog` - Generates static blog from markdown content\n- `npm run build:search` - Creates search index for blog posts and calculators\n- `npm run build:nonce` - Injects security nonces into all script tags\n- `npm run build` - Full build pipeline (blog + search + nonce injection)\n\n### Security Features\n\n- **CSP Headers**: Strict Content Security Policy with nonce-based script execution\n- **No Inline JS**: Build fails if inline JavaScript without nonces is detected\n- **Security Headers**: X-Frame-Options, X-Content-Type-Options, Referrer-Policy\n\n## 🌐 Deployment to Netlify\n\n### Option 1: Netlify CLI\n```bash\nnpm install -g netlify-cli\nnetlify login\nnetlify init\nnpm run build\nnetlify deploy --prod\n```\n\n### Option 2: Git Integration\n1. Push your code to GitHub/GitLab\n2. Connect repository to Netlify\n3. Set build command: `npm ci && npm run build`\n4. Set publish directory: `.` (root)\n5. Deploy automatically on git push\n\n### Environment Configuration\n**IMPORTANT**: Use these exact settings in Netlify:\n- **Build command**: `npm ci && npm run build`\n- **Publish directory**: `.` (root directory)\n- **Node version**: 18.x (recommended)\n\nThe build will generate:\n- `blog/index.html` - Static blog pages\n- `assets/data/search.json` - Search index\n- Updated templates with security nonces\n\n## 📁 Project Structure\n\n```\n/\n├── index.html                 # Main landing page\n├── calculators/              # Calculator pages (future)\n│   └── index.html\n├── assets/                   # Static assets\n│   ├── css/                 # Stylesheets\n│   ├── js/                  # JavaScript modules\n│   └── data/                # JSON data files\n├── vendor/                   # Third-party libraries\n├── content/                  # Content and blog posts\n├── templates/               # HTML templates\n├── tools/                   # Build tools\n│   └── inject_nonce.mjs     # Security nonce injection\n├── tests/                   # Test files\n├── netlify.toml             # Netlify configuration\n├── lighthouserc.json        # Lighthouse CI config\n└── package.json             # Project configuration\n```\n\n## 🔧 Development Scripts\n\n- `npm run build` - Build for production (blog + search + nonces)\n- `npm run build:blog` - Generate static blog from markdown\n- `npm run build:search` - Build search index\n- `npm run build:nonce` - Inject security nonces\n- `npm test` - Run test suite\n- `npm run deploy` - Deploy to Netlify\n\n## 🛡️ Security\n\nThis project implements strict security measures:\n\n- Content Security Policy (CSP) with nonces\n- No inline JavaScript execution\n- Secure headers configuration\n- Build-time security validation\n\n## 📝 License\n\nMIT License - see LICENSE file for details.","size_bytes":3439},"netlify.toml":{"content":"[build]\n  publish = \".\"\n  command = \"npm run build\"\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    Content-Security-Policy = \"default-src 'self'; script-src 'self' 'nonce-ZXmBngRGKvFl+S0+m0eMxQ=='; style-src 'self' 'unsafe-inline'; img-src 'self' data:; frame-ancestors 'none'\"\n    X-Frame-Options = \"DENY\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n\n[[redirects]]\n  from = \"/assets/*\"\n  to = \"/assets/:splat\"\n  status = 200\n\n[[redirects]]\n  from = \"/vendor/*\"\n  to = \"/vendor/:splat\"\n  status = 200\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200","size_bytes":618},"playwright.config.ts":{"content":"import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests/e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n\n  use: {\n    baseURL: 'http://localhost:8080',\n    trace: 'on-first-retry',\n  },\n\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n  ],\n\n  webServer: {\n    command: 'python -m http.server 8080',\n    port: 8080,\n    reuseExistingServer: !process.env.CI,\n  },\n});","size_bytes":737},"replit.md":{"content":"# CostFlowAI - Replit Project Documentation\n\n## Overview\nCostFlowAI is a professional cost calculation and analysis platform built as a secure, SEO-optimized static website. The project provides construction cost estimation tools and analysis features through a comprehensive set of calculators and educational blog content.\n\n**Current State**: Successfully imported from GitHub and configured for Replit environment\n**Last Updated**: September 19, 2025\n\n## Project Architecture\n\n### Technology Stack\n- **Frontend**: Static HTML/CSS/JavaScript\n- **Build System**: Node.js (ESM modules)\n- **Server**: Custom Node.js static file server\n- **Dependencies**: marked, gray-matter (for blog generation)\n- **Security**: CSP headers with nonce-based script execution\n\n### Project Structure\n```\n/\n├── index.html              # Main landing page\n├── server.js              # Development server (Replit-specific)\n├── calculators/           # Calculator pages and logic\n├── blog/                  # Generated blog pages\n├── assets/               # Static assets (CSS, JS, data)\n├── content/              # Markdown blog content\n├── templates/            # HTML templates for generation\n├── tools/                # Build tools and scripts\n├── tests/                # Jest and Playwright tests\n└── vendor/               # Third-party libraries\n```\n\n## Recent Changes (Replit Setup)\n- **September 19, 2025**: Imported from GitHub and configured for Replit\n  - Added custom Node.js server (`server.js`) for development\n  - Updated `package.json` dev script to use new server\n  - Configured workflow to serve on port 5000 with webview output\n  - Set up deployment configuration for Replit autoscale\n  - All static files build successfully with security nonces\n\n## User Preferences\n- Static site architecture maintained from original setup\n- Security-focused with CSP headers and nonce injection\n- SEO-optimized blog generation from markdown content\n- Professional construction industry focus\n\n## Development Workflow\n\n### Build Process\n1. `npm run build:blog` - Generates blog from markdown\n2. `npm run build:search` - Creates search index\n3. `npm run build:calculators` - Generates calculator pages\n4. `npm run build:nonce` - Injects security nonces\n5. `npm run build` - Full build pipeline\n\n### Development Server\n- Runs on `0.0.0.0:5000` (Replit-configured)\n- Serves static files with proper MIME types\n- Handles SPA routing and directory index files\n- Security headers for cache control\n\n### Testing\n- Jest for unit tests (`npm test`)\n- Playwright for E2E testing (`npm run test:e2e`)\n- Calculator-specific test suite available\n\n## Key Features\n- **21 Construction Calculators**: Concrete, framing, drywall, electrical, etc.\n- **Blog System**: Static blog generated from markdown content\n- **Search Functionality**: Full-text search across calculators and blog\n- **Security**: Strict CSP with nonce-based script execution\n- **SEO**: Optimized meta tags, sitemap, RSS feed\n- **Regional Pricing**: US-based regional cost data\n\n## Deployment Configuration\n- **Target**: Replit Autoscale\n- **Build**: `npm run build`\n- **Run**: `node server.js`\n- **Port**: 5000 (frontend only)\n\n## Important Notes\n- Project uses ESM modules (`\"type\": \"module\"` in package.json)\n- All JavaScript execution requires security nonces\n- Build process is required before serving (generates dynamic content)\n- Static files are served from project root directory\n- No backend API - pure static site with client-side functionality","size_bytes":3547},"server.js":{"content":"import { createServer } from 'http';\nimport { readFileSync, existsSync, statSync } from 'fs';\nimport { join, extname, dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport { createGzip } from 'zlib';\nimport { randomBytes } from 'crypto';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst PORT = 5000;\nconst HOST = '0.0.0.0';\n\n// MIME types for common file extensions\nconst MIME_TYPES = {\n  '.html': 'text/html',\n  '.css': 'text/css',\n  '.js': 'application/javascript',\n  '.json': 'application/json',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.jpeg': 'image/jpeg',\n  '.gif': 'image/gif',\n  '.svg': 'image/svg+xml',\n  '.ico': 'image/x-icon',\n  '.xml': 'application/xml',\n  '.txt': 'text/plain'\n};\n\n// Generate a cryptographically secure nonce for CSP\nfunction generateNonce() {\n  return randomBytes(16).toString('base64');\n}\n\n// Check if content should be compressed\nfunction shouldCompress(contentType) {\n  return /^(text\\/|application\\/(javascript|json))/.test(contentType);\n}\n\nconst server = createServer((req, res) => {\n  // Generate nonce for this request\n  const nonce = generateNonce();\n  \n  // Remove query strings for file path resolution\n  const url = req.url.split('?')[0];\n  let filePath = join(__dirname, url === '/' ? 'index.html' : url.substring(1));\n  \n  // Handle directory requests and file resolution\n  if (existsSync(filePath)) {\n    // If it's a directory, try to serve index.html from that directory\n    if (statSync(filePath).isDirectory()) {\n      const indexPath = join(filePath, 'index.html');\n      if (existsSync(indexPath)) {\n        filePath = indexPath;\n      } else {\n        // Directory exists but no index.html, show 404\n        filePath = null;\n      }\n    }\n    // If it's a file, use it as-is\n  } else {\n    // File doesn't exist, try adding .html extension\n    const htmlPath = filePath + '.html';\n    if (existsSync(htmlPath)) {\n      filePath = htmlPath;\n    } else {\n      // Still not found, show 404\n      filePath = null;\n    }\n  }\n\n  // If filePath is null, serve 404\n  if (!filePath) {\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'text/html');\n    res.end(`\n      <!DOCTYPE html>\n      <html>\n        <head><title>404 Not Found</title></head>\n        <body>\n          <h1>404 Not Found</h1>\n          <p>The requested resource was not found.</p>\n        </body>\n      </html>\n    `);\n    return;\n  }\n\n  try {\n    let content = readFileSync(filePath);\n    const ext = extname(filePath);\n    const contentType = MIME_TYPES[ext] || 'application/octet-stream';\n    \n    // Replace nonce placeholders in HTML files\n    if (ext === '.html') {\n      let htmlContent = content.toString();\n      htmlContent = htmlContent.replace(/nonce=\"[^\"]*\"/g, `nonce=\"${nonce}\"`);\n      content = Buffer.from(htmlContent);\n    }\n    \n    // Set headers for performance and security\n    res.setHeader('Content-Type', contentType);\n    \n    // Performance caching headers\n    if (ext === '.css' || ext === '.js') {\n      res.setHeader('Cache-Control', 'public, max-age=31536000'); // 1 year for assets\n    } else if (ext === '.html') {\n      res.setHeader('Cache-Control', 'public, max-age=300'); // 5 minutes for HTML\n    } else if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext === '.gif' || ext === '.svg') {\n      res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 day for images\n    } else {\n      res.setHeader('Cache-Control', 'public, max-age=3600'); // 1 hour for other files\n    }\n    \n    // Security headers\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('X-Frame-Options', 'DENY');\n    res.setHeader('X-XSS-Protection', '1; mode=block');\n    \n    // Content Security Policy with nonce (production-secure)\n    res.setHeader('Content-Security-Policy', \n      `default-src 'self'; ` +\n      `script-src 'self' 'nonce-${nonce}' https://www.googletagmanager.com; ` +\n      `style-src 'self' 'nonce-${nonce}'; ` +\n      `img-src 'self' data: https:; ` +\n      `font-src 'self'; ` +\n      `connect-src 'self' https://www.google-analytics.com;`\n    );\n    \n    // Enable compression for text content\n    const acceptEncoding = req.headers['accept-encoding'] || '';\n    if (shouldCompress(contentType) && acceptEncoding.includes('gzip')) {\n      res.setHeader('Content-Encoding', 'gzip');\n      res.setHeader('Vary', 'Accept-Encoding');\n      \n      // Compress content\n      const gzip = createGzip();\n      res.statusCode = 200;\n      gzip.pipe(res);\n      gzip.end(content);\n    } else {\n      res.setHeader('Vary', 'Accept-Encoding');\n      res.statusCode = 200;\n      res.end(content);\n    }\n    \n  } catch (error) {\n    console.error('Error serving file:', filePath, error.message);\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'text/html');\n    res.end(`\n      <!DOCTYPE html>\n      <html>\n        <head><title>404 Not Found</title></head>\n        <body>\n          <h1>404 Not Found</h1>\n          <p>The requested resource was not found.</p>\n        </body>\n      </html>\n    `);\n  }\n});\n\nserver.listen(PORT, HOST, () => {\n  console.log(`🚀 CostFlowAI server running at http://${HOST}:${PORT}`);\n  console.log(`📁 Serving files from: ${__dirname}`);\n  console.log(`🗜️  Compression enabled for text content`);\n  console.log(`🔒 Security headers active with CSP`);\n});","size_bytes":5362},"tests/registry.spec.ts":{"content":"// Registry Smoke Test - Validates all calculator modules\n// Ensures every registry entry exists and exposes required exports\n\nimport { describe, it, expect } from '@jest/globals';\nimport { calculatorRegistry } from '../assets/js/calculators/registry.js';\n\ndescribe('Calculator Registry', () => {\n  it('should have 21 calculators registered', () => {\n    expect(calculatorRegistry).toHaveLength(21);\n  });\n\n  it('should have unique calculator IDs', () => {\n    const ids = calculatorRegistry.map(calc => calc.id);\n    const uniqueIds = new Set(ids);\n    expect(uniqueIds.size).toBe(ids.length);\n  });\n\n  it('should have all required registry properties', () => {\n    calculatorRegistry.forEach(calc => {\n      expect(calc).toHaveProperty('id');\n      expect(calc).toHaveProperty('module');\n      expect(calc).toHaveProperty('description');\n\n      expect(typeof calc.id).toBe('string');\n      expect(typeof calc.module).toBe('function');\n      expect(typeof calc.description).toBe('string');\n\n      expect(calc.id.length).toBeGreaterThan(0);\n      expect(calc.description.length).toBeGreaterThan(10);\n    });\n  });\n\n  describe('Calculator Module Exports', () => {\n    // Test each calculator module individually\n    const expectedCalculators = [\n      'concrete', 'framing', 'drywall', 'paint', 'roofing', 'flooring',\n      'plumbing', 'electrical', 'hvac', 'earthwork', 'masonry', 'steel',\n      'asphalt', 'siteconcrete', 'doorswindows', 'insulation', 'firestop',\n      'waterproof', 'demolition', 'genconds', 'fees'\n    ];\n\n    expectedCalculators.forEach(calcId => {\n      it(`should load ${calcId} module and expose required exports`, async () => {\n        const registryEntry = calculatorRegistry.find(calc => calc.id === calcId);\n        expect(registryEntry).toBeDefined();\n\n        // Dynamically import the module\n        const module = await registryEntry!.module();\n\n        // Verify required exports exist\n        expect(module).toHaveProperty('init');\n        expect(module).toHaveProperty('compute');\n        expect(module).toHaveProperty('explain');\n        expect(module).toHaveProperty('meta');\n\n        // Verify export types\n        expect(typeof module.init).toBe('function');\n        expect(typeof module.compute).toBe('function');\n        expect(typeof module.explain).toBe('function');\n        expect(typeof module.meta).toBe('function');\n\n        // Test meta() function returns required properties\n        const meta = module.meta();\n        expect(meta).toHaveProperty('id');\n        expect(meta).toHaveProperty('title');\n        expect(meta).toHaveProperty('category');\n\n        expect(typeof meta.id).toBe('string');\n        expect(typeof meta.title).toBe('string');\n        expect(typeof meta.category).toBe('string');\n\n        expect(meta.id).toBe(calcId);\n      });\n\n      it(`should have compute function return proper error for ${calcId}`, async () => {\n        const registryEntry = calculatorRegistry.find(calc => calc.id === calcId);\n        const module = await registryEntry!.module();\n\n        const result = module.compute({});\n\n        expect(result).toHaveProperty('ok');\n        expect(result).toHaveProperty('msg');\n        expect(result.ok).toBe(false);\n        expect(result.msg).toBe('Not implemented');\n      });\n\n      it(`should have explain function return placeholder for ${calcId}`, async () => {\n        const registryEntry = calculatorRegistry.find(calc => calc.id === calcId);\n        const module = await registryEntry!.module();\n\n        const explanation = module.explain({});\n\n        expect(typeof explanation).toBe('string');\n        expect(explanation).toBe('TBD');\n      });\n    });\n  });\n\n  describe('Calculator Categories', () => {\n    const expectedCategories = [\n      'structural', 'finishing', 'exterior', 'mep', 'sitework',\n      'thermal', 'safety', 'protection', 'project'\n    ];\n\n    it('should only use valid categories', async () => {\n      const allMeta = await Promise.all(\n        calculatorRegistry.map(async entry => {\n          const module = await entry.module();\n          return module.meta();\n        })\n      );\n\n      const usedCategories = new Set(allMeta.map(meta => meta.category));\n\n      usedCategories.forEach(category => {\n        expect(expectedCategories).toContain(category);\n      });\n    });\n\n    it('should have at least one calculator per major category', async () => {\n      const allMeta = await Promise.all(\n        calculatorRegistry.map(async entry => {\n          const module = await entry.module();\n          return module.meta();\n        })\n      );\n\n      const usedCategories = new Set(allMeta.map(meta => meta.category));\n\n      // Core categories that should be present\n      const coreCategories = ['structural', 'finishing', 'mep', 'sitework'];\n\n      coreCategories.forEach(category => {\n        expect(usedCategories).toContain(category);\n      });\n    });\n  });\n});","size_bytes":4885},"assets/css/base.css":{"content":"/* Base styles and CSS reset */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n    line-height: 1.6;\n    color: #1f2937;\n    background: #ffffff;\n    font-size: 16px;\n}\n\na {\n    color: #2563eb;\n    text-decoration: none;\n    transition: color 0.2s ease;\n}\n\na:hover {\n    color: #1d4ed8;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    font-weight: 700;\n    line-height: 1.2;\n    color: #111827;\n}\n\nh1 {\n    font-size: 2.5rem;\n    font-weight: 800;\n}\n\nh2 {\n    font-size: 2rem;\n}\n\nh3 {\n    font-size: 1.5rem;\n}\n\np {\n    margin-bottom: 1rem;\n    color: #6b7280;\n}\n\n/* Button Base Styles */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: 8px;\n    font-size: 1rem;\n    font-weight: 600;\n    text-decoration: none;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    min-width: 140px;\n}\n\n.btn-primary {\n    background: #2563eb;\n    color: white;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.btn-primary:hover {\n    background: #1d4ed8;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);\n    color: white;\n}\n\n.btn-secondary {\n    background: #f3f4f6;\n    color: #374151;\n    border: 1px solid #d1d5db;\n}\n\n.btn-secondary:hover {\n    background: #e5e7eb;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    color: #374151;\n}\n\n/* Print Styles */\n@media print {\n    @page {\n        margin: 1in;\n        size: letter;\n    }\n    \n    * {\n        -webkit-print-color-adjust: exact !important;\n        color-adjust: exact !important;\n        print-color-adjust: exact !important;\n    }\n    \n    body {\n        font-size: 12pt;\n        line-height: 1.4;\n        background: white !important;\n        color: black !important;\n    }\n    \n    h1, h2, h3, h4, h5, h6 {\n        break-after: avoid;\n        color: black !important;\n    }\n    \n    .btn, .nav-links, .search-overlay, .no-print {\n        display: none !important;\n    }\n    \n    table {\n        border-collapse: collapse;\n        width: 100%;\n        break-inside: avoid;\n    }\n    \n    th, td {\n        border: 1px solid #333;\n        padding: 8pt;\n        text-align: left;\n    }\n    \n    th {\n        background-color: #f0f0f0 !important;\n        font-weight: bold;\n    }\n    \n    .print-header {\n        border-bottom: 3pt solid #1e40af;\n        margin-bottom: 20pt;\n        padding-bottom: 10pt;\n    }\n    \n    .print-footer {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-top: 1pt solid #ccc;\n        padding-top: 5pt;\n        font-size: 9pt;\n        text-align: center;\n        background: white;\n    }\n    \n    .print-disclaimer {\n        margin-top: 20pt;\n        padding: 10pt;\n        border: 1pt solid #ccc;\n        font-size: 9pt;\n        background-color: #f9f9f9 !important;\n    }\n    \n    /* Ensure proper page breaks */\n    .calculator-section {\n        break-inside: avoid;\n        margin-bottom: 20pt;\n    }\n    \n    .results-table {\n        break-inside: avoid;\n    }\n}\n\n/* Responsive Typography */\n@media (max-width: 768px) {\n    h1 {\n        font-size: 2rem;\n    }\n    \n    h2 {\n        font-size: 1.75rem;\n    }\n    \n    .btn {\n        padding: 0.625rem 1.25rem;\n        font-size: 0.9rem;\n        min-width: 120px;\n    }\n}","size_bytes":3444},"assets/css/calculators.css":{"content":"/* Calculator-specific styles */\n\n.intro {\n  text-align: center;\n  margin-bottom: 3rem;\n}\n\n.intro h2 {\n  color: #333;\n  margin-bottom: 1rem;\n}\n\n.intro p {\n  color: #666;\n  font-size: 1.1rem;\n}\n\n.calculator-grid h3 {\n  color: #007bff;\n  border-bottom: 2px solid #007bff;\n  padding-bottom: 0.5rem;\n  margin: 2rem 0 1rem 0;\n}\n\n.calculator-category {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n}\n\n.calculator-card {\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: box-shadow 0.3s ease;\n}\n\n.calculator-card:hover {\n  box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n}\n\n.calculator-card h4 {\n  color: #333;\n  margin-bottom: 0.75rem;\n  font-size: 1.2rem;\n}\n\n.calculator-card p {\n  color: #666;\n  margin-bottom: 1rem;\n  line-height: 1.4;\n  font-size: 0.9rem;\n}\n\n.btn-primary {\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background 0.3s ease;\n}\n\n.btn-primary:hover {\n  background: #0056b3;\n}\n\n.btn-disabled {\n  background: #f8f9fa;\n  color: #6c757d;\n  border: 1px solid #dee2e6;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: not-allowed;\n  font-weight: 500;\n}\n\n@media (max-width: 768px) {\n  .calculator-category {\n    grid-template-columns: 1fr;\n  }\n}","size_bytes":1430},"assets/css/components.css":{"content":"/* Component styles */\n\n/* Screen reader only */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Search Overlay */\n.search-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    z-index: 1000;\n    padding: 2rem;\n    overflow-y: auto;\n}\n\n.search-container {\n    max-width: 800px;\n    margin: 2rem auto;\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);\n    overflow: hidden;\n}\n\n.search-form {\n    position: relative;\n    padding: 1.5rem;\n    border-bottom: 1px solid #e5e7eb;\n    background: #f9fafb;\n}\n\n.search-form input {\n    width: 100%;\n    padding: 1rem 1.25rem;\n    border: 2px solid #d1d5db;\n    border-radius: 8px;\n    font-size: 1.1rem;\n    font-family: inherit;\n    outline: none;\n    transition: border-color 0.2s;\n}\n\n.search-form input:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.search-form button {\n    position: absolute;\n    top: 1.5rem;\n    right: 1.5rem;\n    background: #6b7280;\n    color: white;\n    border: none;\n    padding: 0.5rem 1rem;\n    border-radius: 6px;\n    cursor: pointer;\n    font-size: 0.9rem;\n    transition: background-color 0.2s;\n}\n\n.search-form button:hover {\n    background: #4b5563;\n}\n\n/* Search Results */\n.search-results {\n    display: none;\n    max-height: 60vh;\n    overflow-y: auto;\n}\n\n.search-results.visible {\n    display: block;\n}\n\n.search-results-header {\n    padding: 1rem 1.5rem;\n    background: #f3f4f6;\n    border-bottom: 1px solid #e5e7eb;\n    font-size: 0.9rem;\n    color: #6b7280;\n}\n\n.search-results-list {\n    padding: 0;\n}\n\n.search-result {\n    padding: 1.25rem 1.5rem;\n    border-bottom: 1px solid #f3f4f6;\n    cursor: pointer;\n    transition: background-color 0.15s;\n}\n\n.search-result:hover,\n.search-result.selected {\n    background: #f8fafc;\n}\n\n.search-result:last-child {\n    border-bottom: none;\n}\n\n.search-result-title {\n    margin: 0 0 0.5rem 0;\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\n.search-result-title a {\n    color: #1f2937;\n    text-decoration: none;\n    transition: color 0.2s;\n}\n\n.search-result-title a:hover {\n    color: #007bff;\n}\n\n.search-result-excerpt {\n    margin: 0 0 0.75rem 0;\n    color: #6b7280;\n    font-size: 0.95rem;\n    line-height: 1.5;\n}\n\n.search-result-meta {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    font-size: 0.85rem;\n}\n\n.search-result-category {\n    background: #e5e7eb;\n    color: #374151;\n    padding: 0.25rem 0.75rem;\n    border-radius: 12px;\n    font-weight: 500;\n}\n\n.search-result-tags {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.tag-mini {\n    background: #dbeafe;\n    color: #1e40af;\n    padding: 0.15rem 0.5rem;\n    border-radius: 8px;\n    font-size: 0.75rem;\n}\n\n/* Search term highlighting */\n.search-results mark {\n    background: #fef3c7;\n    color: #92400e;\n    padding: 0.1em 0.2em;\n    border-radius: 3px;\n    font-weight: 600;\n}\n\n/* No results state */\n.search-no-results {\n    padding: 3rem 1.5rem;\n    text-align: center;\n    color: #6b7280;\n}\n\n.search-no-results p:first-child {\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n}\n\n.search-suggestion {\n    margin-top: 1rem;\n}\n\n.search-suggestion a {\n    color: #007bff;\n    text-decoration: none;\n}\n\n.search-suggestion a:hover {\n    text-decoration: underline;\n}\n\n/* Error state */\n.search-error {\n    padding: 2rem 1.5rem;\n    text-align: center;\n    color: #ef4444;\n    background: #fef2f2;\n    border: 1px solid #fecaca;\n    border-radius: 8px;\n    margin: 1rem;\n}\n\n/* Loading state */\n.search-loading {\n    padding: 2rem 1.5rem;\n    text-align: center;\n    color: #6b7280;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n    .search-overlay {\n        padding: 1rem;\n    }\n    \n    .search-container {\n        margin: 1rem auto;\n        border-radius: 8px;\n    }\n    \n    .search-form {\n        padding: 1rem;\n    }\n    \n    .search-form input {\n        font-size: 1rem;\n        padding: 0.875rem 1rem;\n    }\n    \n    .search-form button {\n        top: 1rem;\n        right: 1rem;\n        padding: 0.4rem 0.8rem;\n        font-size: 0.8rem;\n    }\n    \n    .search-result {\n        padding: 1rem;\n    }\n    \n    .search-results {\n        max-height: 50vh;\n    }\n}","size_bytes":4401},"assets/css/layout.css":{"content":"/* Layout and grid styles */\n\n/* Header & Navigation */\nheader {\n    background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);\n    padding: 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.main-nav {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 1rem 2rem;\n}\n\n.logo {\n    font-size: 1.5rem;\n    font-weight: 800;\n    color: white !important;\n    text-decoration: none;\n}\n\n.nav-links {\n    display: flex;\n    list-style: none;\n    gap: 2rem;\n    align-items: center;\n}\n\n.nav-links a {\n    color: rgba(255, 255, 255, 0.9) !important;\n    font-weight: 500;\n    padding: 0.5rem 0;\n    border-bottom: 2px solid transparent;\n    transition: all 0.2s ease;\n}\n\n.nav-links a:hover {\n    color: white !important;\n    border-bottom-color: rgba(255, 255, 255, 0.3);\n}\n\n/* Hero Section */\n.hero {\n    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n    padding: 5rem 2rem;\n    text-align: center;\n    position: relative;\n}\n\n.hero::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" opacity=\"0.03\"><circle cx=\"50\" cy=\"50\" r=\"2\" fill=\"%23000\"/></svg>') repeat;\n}\n\n.hero-content {\n    position: relative;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.hero h1 {\n    margin-bottom: 1.5rem;\n    background: linear-gradient(135deg, #1e40af, #2563eb);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.hero p {\n    font-size: 1.25rem;\n    margin-bottom: 3rem;\n    color: #4b5563;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n.hero-actions {\n    display: flex;\n    gap: 1.5rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n/* Main Content */\nmain {\n    flex: 1;\n    min-height: calc(100vh - 200px);\n}\n\n/* Footer */\nfooter {\n    background: #f9fafb;\n    border-top: 1px solid #e5e7eb;\n    margin-top: 4rem;\n    padding: 2rem;\n}\n\n.footer-nav {\n    max-width: 1200px;\n    margin: 0 auto;\n    text-align: center;\n}\n\n.footer-nav ul {\n    display: flex;\n    justify-content: center;\n    list-style: none;\n    gap: 2rem;\n    margin-bottom: 1rem;\n}\n\n.footer-nav a {\n    color: #6b7280;\n    font-weight: 500;\n}\n\n.footer-nav a:hover {\n    color: #374151;\n}\n\nfooter p {\n    color: #9ca3af;\n    font-size: 0.875rem;\n    margin: 0;\n    text-align: center;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .main-nav {\n        flex-direction: column;\n        gap: 1rem;\n        padding: 1rem;\n    }\n    \n    .nav-links {\n        gap: 1rem;\n        flex-wrap: wrap;\n        justify-content: center;\n    }\n    \n    .hero {\n        padding: 3rem 1rem;\n    }\n    \n    .hero-actions {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .footer-nav ul {\n        flex-direction: column;\n        gap: 1rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .hero p {\n        font-size: 1.1rem;\n    }\n}","size_bytes":3070},"assets/css/print.css":{"content":"/* Print styles */\n\n@media print {\n    /* Placeholder for print styles */\n}","size_bytes":75},"assets/js/blog-search.js":{"content":"// Blog search functionality using Lunr.js\n// Provides real-time search for blog posts and calculators\n\nclass BlogSearch {\n  constructor() {\n    this.searchIndex = null;\n    this.searchData = null;\n    this.lunrIndex = null;\n    this.isLoaded = false;\n    this.searchInput = null;\n    this.searchResults = null;\n    this.searchForm = null;\n    this.debounceTimer = null;\n  }\n\n  /**\n   * Initialize search functionality\n   */\n  async init() {\n    try {\n      // Find search elements\n      this.searchInput = document.getElementById('blog-search');\n      this.searchResults = document.getElementById('search-results');\n      this.searchForm = document.querySelector('.search-form');\n\n      if (!this.searchInput || !this.searchResults) {\n        console.log('Search elements not found, skipping search initialization');\n        return;\n      }\n\n      // Check if Lunr.js is available\n      if (!window.lunr) {\n        throw new Error('Lunr.js not loaded. Make sure lunr.min.js is included before this script.');\n      }\n\n      // Load search data\n      await this.loadSearchData();\n\n      // Build search index\n      this.buildSearchIndex();\n\n      // Setup event listeners\n      this.setupEventListeners();\n\n      this.isLoaded = true;\n      console.log('Blog search initialized successfully');\n\n    } catch (error) {\n      console.error('Failed to initialize blog search:', error);\n    }\n  }\n\n\n  /**\n   * Load search data from JSON file\n   */\n  async loadSearchData() {\n    try {\n      const response = await fetch('/assets/data/search.json');\n      if (!response.ok) {\n        throw new Error(`Failed to load search data: ${response.status}`);\n      }\n\n      this.searchData = await response.json();\n      console.log(`Loaded ${this.searchData.count} search items`);\n\n    } catch (error) {\n      console.error('Failed to load search data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Build Lunr search index\n   */\n  buildSearchIndex() {\n    if (!window.lunr || !this.searchData) {\n      throw new Error('Cannot build search index: missing dependencies');\n    }\n\n    const items = this.searchData.items;\n    \n    this.lunrIndex = window.lunr(function () {\n      // Configure fields and their boost values\n      this.field('title', { boost: 10 });\n      this.field('headings', { boost: 5 });\n      this.field('excerpt', { boost: 3 });\n      this.field('content', { boost: 1 });\n      this.field('tags', { boost: 8 });\n      this.field('category', { boost: 6 });\n\n      // Use the ID as the document reference\n      this.ref('id');\n\n      // Add documents to the index\n      items.forEach(item => {\n        this.add({\n          id: item.id,\n          title: item.title || '',\n          headings: item.headings || '',\n          excerpt: item.excerpt || '',\n          content: item.content || '',\n          tags: (item.tags || []).join(' '),\n          category: item.category || ''\n        });\n      });\n    });\n\n    console.log('Search index built successfully');\n  }\n\n  /**\n   * Setup event listeners for search\n   */\n  setupEventListeners() {\n    // Search input with debouncing\n    this.searchInput.addEventListener('input', (e) => {\n      const query = e.target.value.trim();\n\n      // Clear previous timer\n      if (this.debounceTimer) {\n        clearTimeout(this.debounceTimer);\n      }\n\n      // Debounce search to avoid too many requests\n      this.debounceTimer = setTimeout(() => {\n        if (query.length >= 2) {\n          this.performSearch(query);\n        } else {\n          this.clearResults();\n        }\n      }, 300);\n    });\n\n    // Form submission\n    this.searchForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n      const query = this.searchInput.value.trim();\n      if (query.length >= 2) {\n        this.performSearch(query);\n      }\n    });\n\n    // Clear results when input is empty\n    this.searchInput.addEventListener('blur', () => {\n      // Delay clearing to allow for click events on results\n      setTimeout(() => {\n        if (!this.searchInput.value.trim()) {\n          this.clearResults();\n        }\n      }, 200);\n    });\n\n    // Handle keyboard navigation\n    this.searchInput.addEventListener('keydown', (e) => {\n      this.handleKeyboardNavigation(e);\n    });\n  }\n\n  /**\n   * Perform search using Lunr\n   */\n  performSearch(query) {\n    if (!this.isLoaded || !this.lunrIndex) {\n      console.warn('Search not ready');\n      return;\n    }\n\n    try {\n      // Perform fuzzy search with Lunr\n      const results = this.lunrIndex.search(query);\n\n      // Get full item data for results\n      const searchResults = results.map(result => {\n        const item = this.searchData.items.find(item => item.id === result.ref);\n        return {\n          ...item,\n          score: result.score,\n          matchData: result.matchData\n        };\n      });\n\n      this.displayResults(searchResults, query);\n\n      // Track search query for analytics\n      if (window.CostFlowAnalytics) {\n        window.CostFlowAnalytics.trackEvent('search_query', {\n          search_term: query,\n          results_count: searchResults.length\n        });\n      }\n\n      // Emit custom event for analytics system\n      document.dispatchEvent(new CustomEvent('search:query', {\n        detail: {\n          query: query,\n          resultsCount: searchResults.length\n        }\n      }));\n\n    } catch (error) {\n      console.error('Search error:', error);\n      this.displayError('Search failed. Please try again.');\n    }\n  }\n\n  /**\n   * Display search results\n   */\n  displayResults(results, query) {\n    if (results.length === 0) {\n      this.searchResults.innerHTML = `\n        <div class=\"search-no-results\">\n          <p>No results found for \"${this.escapeHtml(query)}\"</p>\n          <p class=\"search-suggestion\">Try different keywords or browse our <a href=\"/calculators\">calculators</a>.</p>\n        </div>\n      `;\n      this.searchResults.classList.add('visible');\n      return;\n    }\n\n    const resultsHtml = results.slice(0, 8).map((result, index) => {\n      const highlightedTitle = this.highlightSearchTerms(result.title, query);\n      const highlightedExcerpt = this.highlightSearchTerms(result.excerpt, query);\n\n      const tags = Array.isArray(result.tags) ? result.tags : [];\n      const category = result.category || 'Unknown';\n      \n      return `\n        <div class=\"search-result\" data-index=\"${index}\">\n          <h3 class=\"search-result-title\">\n            <a href=\"${result.url}\">${highlightedTitle}</a>\n          </h3>\n          <p class=\"search-result-excerpt\">${highlightedExcerpt}</p>\n          <div class=\"search-result-meta\">\n            <span class=\"search-result-category\">${category}</span>\n            ${tags.length > 0 ? `\n              <span class=\"search-result-tags\">\n                ${tags.slice(0, 3).map(tag => `<span class=\"tag-mini\">${tag}</span>`).join('')}\n              </span>\n            ` : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n\n    this.searchResults.innerHTML = `\n      <div class=\"search-results-header\">\n        <p>Found ${results.length} result${results.length !== 1 ? 's' : ''} for \"${this.escapeHtml(query)}\"</p>\n      </div>\n      <div class=\"search-results-list\">\n        ${resultsHtml}\n      </div>\n    `;\n\n    this.searchResults.classList.add('visible');\n\n    // Setup click handlers for results\n    this.setupResultClickHandlers();\n  }\n\n  /**\n   * Display error message\n   */\n  displayError(message) {\n    this.searchResults.innerHTML = `\n      <div class=\"search-error\">\n        <p>${this.escapeHtml(message)}</p>\n      </div>\n    `;\n    this.searchResults.classList.add('visible');\n  }\n\n  /**\n   * Clear search results\n   */\n  clearResults() {\n    this.searchResults.innerHTML = '';\n    this.searchResults.classList.remove('visible');\n  }\n\n  /**\n   * Highlight search terms in text\n   */\n  highlightSearchTerms(text, query) {\n    if (!query || !text) return this.escapeHtml(text);\n\n    const terms = query.toLowerCase().split(/\\s+/).filter(term => term.length > 1);\n    let highlightedText = this.escapeHtml(text);\n\n    terms.forEach(term => {\n      const regex = new RegExp(`(${this.escapeRegex(term)})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');\n    });\n\n    return highlightedText;\n  }\n\n  /**\n   * Handle keyboard navigation in search results\n   */\n  handleKeyboardNavigation(e) {\n    const results = this.searchResults.querySelectorAll('.search-result');\n    if (results.length === 0) return;\n\n    let selectedIndex = -1;\n    const selected = this.searchResults.querySelector('.search-result.selected');\n\n    if (selected) {\n      selectedIndex = parseInt(selected.dataset.index);\n    }\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        selectedIndex = (selectedIndex + 1) % results.length;\n        this.selectResult(selectedIndex);\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault();\n        selectedIndex = selectedIndex <= 0 ? results.length - 1 : selectedIndex - 1;\n        this.selectResult(selectedIndex);\n        break;\n\n      case 'Enter':\n        if (selectedIndex >= 0) {\n          e.preventDefault();\n          const link = results[selectedIndex].querySelector('a');\n          if (link) link.click();\n        }\n        break;\n\n      case 'Escape':\n        this.clearResults();\n        this.searchInput.blur();\n        break;\n    }\n  }\n\n  /**\n   * Select a search result for keyboard navigation\n   */\n  selectResult(index) {\n    const results = this.searchResults.querySelectorAll('.search-result');\n\n    // Remove previous selection\n    results.forEach(result => result.classList.remove('selected'));\n\n    // Add selection to new result\n    if (index >= 0 && index < results.length) {\n      results[index].classList.add('selected');\n      results[index].scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  /**\n   * Setup click handlers for search results\n   */\n  setupResultClickHandlers() {\n    const results = this.searchResults.querySelectorAll('.search-result a');\n\n    results.forEach(link => {\n      link.addEventListener('click', () => {\n        // Find the result data\n        const resultElement = link.closest('.search-result');\n        const resultType = resultElement.dataset.type || 'unknown';\n        \n        // Track search result clicks using analytics manager\n        if (window.CostFlowAnalytics) {\n          window.CostFlowAnalytics.trackEvent('search_result_click', {\n            search_term: this.searchInput.value,\n            result_url: link.href,\n            result_type: resultType\n          });\n        }\n\n        // Emit custom event for analytics system\n        document.dispatchEvent(new CustomEvent('search:result-click', {\n          detail: {\n            query: this.searchInput.value,\n            url: link.href,\n            type: resultType\n          }\n        }));\n      });\n    });\n  }\n\n  /**\n   * Escape HTML characters\n   */\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Escape regex special characters\n   */\n  escapeRegex(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n\n// Initialize search when both DOM and Lunr are ready\nfunction initializeSearch() {\n  if (document.readyState === 'loading' || !window.lunr) {\n    // Wait a bit more if DOM is still loading or Lunr isn't ready\n    setTimeout(initializeSearch, 50);\n    return;\n  }\n\n  const search = new BlogSearch();\n  search.init();\n\n  // Wire up search controls (CSP-safe)\n  const searchTrigger = document.getElementById('search-trigger');\n  const searchClose = document.getElementById('search-close');\n  \n  if (searchTrigger) {\n    searchTrigger.addEventListener('click', (e) => {\n      e.preventDefault();\n      toggleSearch();\n    });\n  }\n  \n  if (searchClose) {\n    searchClose.addEventListener('click', () => {\n      toggleSearch();\n    });\n  }\n\n  // Make search available globally for debugging\n  window.blogSearch = search;\n}\n\n// Global search toggle function\nfunction toggleSearch() {\n  const overlay = document.getElementById('search-overlay');\n  const searchInput = document.getElementById('blog-search');\n\n  if (overlay.style.display === 'none' || overlay.style.display === '') {\n    // Open search\n    document.body.style.overflow = 'hidden'; // Prevent body scroll\n    overlay.style.display = 'block';\n    searchInput.focus();\n    \n    // Add escape key listener\n    document.addEventListener('keydown', handleSearchEscape);\n  } else {\n    // Close search\n    document.body.style.overflow = ''; // Restore body scroll\n    overlay.style.display = 'none';\n    searchInput.value = '';\n    \n    // Clear search results when closing\n    const searchResults = document.getElementById('search-results');\n    if (searchResults) {\n      searchResults.innerHTML = '';\n      searchResults.classList.remove('visible');\n    }\n    \n    // Remove escape key listener\n    document.removeEventListener('keydown', handleSearchEscape);\n    \n    // Return focus to search trigger\n    const searchTrigger = document.getElementById('search-trigger');\n    if (searchTrigger) searchTrigger.focus();\n  }\n}\n\nfunction handleSearchEscape(e) {\n  if (e.key === 'Escape') {\n    toggleSearch();\n  }\n}\n\n// Start initialization\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeSearch);\n} else {\n  initializeSearch();\n}\n\nexport { BlogSearch };","size_bytes":13395},"content/posts/concrete-calculator-guide.md":{"content":"---\ntitle: Complete Guide to Concrete Slab Calculations - From Volume to Cost\nslug: concrete-calculator-guide\ndate: 2024-01-12\ntags: [concrete, tutorial, calculators]\ndescription: Master concrete slab calculations with our comprehensive guide covering volume, rebar requirements, labor costs, and regional pricing factors.\ncover: /assets/images/blog/concrete-guide-cover.jpg\n---\n\n# Complete Guide to Concrete Slab Calculations\n\nAccurate concrete calculations are the foundation of successful construction projects. Whether you're pouring a residential patio or a commercial foundation, understanding how to calculate materials, labor, and costs ensures your project stays on budget and schedule.\n\n## Understanding Concrete Volume Calculations\n\n### Basic Formula\nThe fundamental concrete volume calculation is straightforward:\n\n```\nVolume (cubic yards) = Length × Width × Thickness ÷ 27\n```\n\n**Important conversions:**\n- Convert thickness from inches to feet (divide by 12)\n- Final result is automatically converted to cubic yards\n- Always add waste factor (typically 5-10%)\n\n### Example Calculation\nFor a 20' × 30' slab at 4\" thick:\n1. Length: 20 feet\n2. Width: 30 feet\n3. Thickness: 4 inches = 0.33 feet\n4. Volume: 20 × 30 × 0.33 ÷ 27 = 7.33 cubic yards\n5. With 5% waste: 7.33 × 1.05 = 7.70 cubic yards\n\n## Rebar Requirements and Layout\n\n### Grid Spacing Standards\nRebar spacing depends on the slab's intended use:\n\n- **12\" on center**: Heavy commercial loads, warehouse floors\n- **18\" on center**: Standard residential slabs, driveways\n- **24\" on center**: Light residential applications, patios\n\n### Calculating Rebar Quantities\n\n**Length Direction Bars:**\n```\nNumber of bars = (Width ÷ Spacing) + 1\nTotal length = Number of bars × Slab length\n```\n\n**Width Direction Bars:**\n```\nNumber of bars = (Length ÷ Spacing) + 1\nTotal length = Number of bars × Slab width\n```\n\n### Rebar Size Selection\n- **#3 (3/8\")**: Light residential slabs up to 4\" thick\n- **#4 (1/2\")**: Standard residential and light commercial\n- **#5 (5/8\")**: Heavy-duty applications and thicker slabs\n\n## Labor Cost Considerations\n\n### Typical Labor Breakdown\n1. **Excavation**: $0.65/sq ft for standard depth\n2. **Form Setup**: $4.50/linear foot of perimeter\n3. **Rebar Placement**: $0.25/pound of rebar\n4. **Concrete Placement**: $25.00/cubic yard\n5. **Finishing**: $1.25/sq ft for standard float finish\n\n### Regional Labor Variations\nLabor costs vary significantly by region:\n- **High-cost areas** (NYC, SF, LA): 1.4-1.8× base rates\n- **Moderate areas** (Atlanta, Denver): 0.9-1.2× base rates\n- **Low-cost areas** (Rural markets): 0.7-0.9× base rates\n\n## Material Cost Factors\n\n### Concrete Pricing Variables\n- **Strength requirements**: 3000 PSI vs 4000 PSI vs 5000 PSI\n- **Additives**: Fiber mesh, accelerators, retardants\n- **Delivery distance**: Short load fees for under 10 yards\n- **Pump requirements**: Add $8.50/cubic yard for pumping\n\n### Base Material Requirements\n- **Gravel base**: 4\" standard (0.012 cubic yards per sq ft)\n- **Vapor barrier**: 6-mil polyethylene at 100% coverage\n- **Isolation joints**: 1/2\" material at building interfaces\n- **Control joints**: Sawcut every 10-12 feet maximum\n\n## Cost Estimation Best Practices\n\n### Overhead and Markup Structure\nProfessional estimates include:\n1. **Materials**: Raw material costs with delivery\n2. **Labor**: Direct labor with burden rates\n3. **Equipment**: Tools, rental, and equipment costs\n4. **Overhead**: General conditions (15% typical)\n5. **Profit**: Contractor margin (10% typical)\n6. **Contingency**: Risk mitigation (5-10%)\n\n### Seasonal Adjustments\nConsider seasonal factors:\n- **Winter**: Cold weather protection adds 10-15%\n- **Summer**: Normal conditions baseline\n- **Peak season**: Material availability may increase costs\n\n## Using CostFlowAI's Concrete Calculator\n\nOur **Concrete Slab Pro Calculator** automates these complex calculations:\n\n### Key Features\n- **Automatic volume calculations** with waste factors\n- **Intelligent rebar layout** based on grid spacing\n- **Regional pricing integration** for accurate costs\n- **Labor cost estimation** with local market rates\n- **Professional exports** in PDF, Excel, and CSV formats\n\n### Step-by-Step Process\n1. **Enter dimensions**: Length, width, thickness\n2. **Select concrete strength**: 3000-5000 PSI options\n3. **Choose rebar specifications**: Grid spacing and bar size\n4. **Set project options**: Labor inclusion, delivery, pumping\n5. **Review results**: Detailed breakdown of all costs\n6. **Export reports**: Professional documentation ready\n\n## Common Mistakes to Avoid\n\n### Calculation Errors\n- **Forgetting waste factors**: Always add 5-10% minimum\n- **Unit conversion mistakes**: Double-check feet vs inches\n- **Perimeter miscalculation**: Affects forming costs significantly\n\n### Cost Estimation Pitfalls\n- **Ignoring regional factors**: Labor costs vary dramatically\n- **Underestimating mobilization**: Equipment setup costs\n- **Missing permit fees**: Often $100-500 per project\n- **Overlooking accessibility**: Pump requirements add cost\n\n## Advanced Considerations\n\n### Special Conditions\n- **Sloped slabs**: Increase volume calculations appropriately\n- **Thickened edges**: Calculate additional concrete volume\n- **Embedded items**: Account for sleeves, anchors, conduits\n- **Surface treatments**: Broomed, stamped, or polished finishes\n\n### Quality Control\n- **Strength requirements**: Ensure PSI meets structural needs\n- **Slump specifications**: Workability vs strength balance\n- **Air entrainment**: Required for freeze-thaw climates\n- **Curing methods**: Compound, wet curing, or membrane\n\n## Conclusion\n\nAccurate concrete calculations require attention to detail and understanding of local market conditions. By using systematic approaches and professional tools like CostFlowAI's calculators, you can ensure your estimates are both competitive and profitable.\n\n**Ready to streamline your concrete calculations?** Try our [Concrete Slab Pro Calculator](/calculators) and experience the difference accurate, intelligent estimation makes.\n\n---\n\n*Next week: We'll explore masonry calculations and how to accurately estimate block, brick, and mortar requirements for your projects.*","size_bytes":6217},"content/posts/regional-pricing-explained.md":{"content":"---\ntitle: Understanding Regional Pricing in Construction Cost Estimation\nslug: regional-pricing-explained\ndate: 2024-01-10\ntags: [pricing, regional, estimation]\ndescription: Learn how regional pricing factors affect construction costs and why accurate local market data is crucial for competitive bidding.\ncover: /assets/images/blog/regional-pricing-cover.jpg\n---\n\n# Understanding Regional Pricing in Construction Cost Estimation\n\nOne of the biggest challenges in construction cost estimation is accounting for regional variations in material and labor costs. A concrete slab that costs $8,000 in rural Kansas might run $15,000 in San Francisco—and that's for the exact same specifications.\n\n## Why Regional Pricing Matters\n\n### Market Reality\nConstruction costs aren't uniform across regions due to several factors:\n\n- **Labor markets**: Union vs. non-union areas\n- **Material transportation**: Distance from suppliers\n- **Local regulations**: Permit costs and requirements\n- **Economic conditions**: Supply and demand dynamics\n- **Weather factors**: Seasonal limitations and protection costs\n\n### Competitive Advantage\nUnderstanding regional pricing gives you:\n- **More accurate bids**: Reduce surprise cost overruns\n- **Better profit margins**: Price competitively while maintaining profitability\n- **Client confidence**: Demonstrate local market knowledge\n- **Risk mitigation**: Account for regional cost drivers\n\n## Regional Pricing Factors\n\n### High-Cost Markets (Factor: 1.4-1.8×)\n**Major Metropolitan Areas:**\n- New York City, San Francisco, Los Angeles\n- Boston, Seattle, Washington DC\n\n**Cost Drivers:**\n- Union labor requirements with high wage scales\n- Strict permitting and inspection processes\n- Limited material staging and storage areas\n- High overhead costs (office rent, insurance)\n- Traffic and logistics challenges\n\n**Example Impact:**\n- Base concrete: $135/cubic yard\n- High-cost region: $189-243/cubic yard\n- Total project increase: 40-80%\n\n### Moderate-Cost Markets (Factor: 0.9-1.2×)\n**Mid-Size Cities:**\n- Atlanta, Phoenix, Denver, Austin\n- Charlotte, Nashville, Portland\n\n**Characteristics:**\n- Mix of union and non-union labor\n- Reasonable permit and regulatory environment\n- Good transportation infrastructure\n- Competitive material suppliers\n\n### Low-Cost Markets (Factor: 0.7-0.9×)\n**Rural and Small Metropolitan Areas:**\n- Most rural counties\n- Small cities under 100,000 population\n- Areas with limited construction activity\n\n**Advantages:**\n- Lower labor costs and less regulation\n- Direct material sourcing opportunities\n- Reduced overhead and logistics costs\n- Simplified permitting processes\n\n## Material vs. Labor Variations\n\n### Material Costs\n**Less Variable Factors:**\n- Concrete and steel pricing (commodity-based)\n- Standard manufactured items\n- Bulk materials with good distribution\n\n**More Variable Factors:**\n- Specialty materials requiring shipping\n- Local aggregates and quarry products\n- Items requiring local supplier networks\n\n### Labor Costs\n**Highest Variation Factors:**\n- Prevailing wage requirements\n- Union vs. open shop rates\n- Skilled trade availability\n- Seasonal demand fluctuations\n\n**Example: Concrete Finisher Rates**\n- Rural markets: $22-28/hour\n- Moderate markets: $28-38/hour\n- High-cost markets: $45-65/hour\n\n## Seasonal Considerations\n\n### Winter Adjustments\n**Cold Weather Factors (Add 10-15%):**\n- Heated enclosures for concrete work\n- Cold weather concrete mixes\n- Extended curing protection\n- Reduced productivity rates\n\n**Regional Impact:**\n- Northern climates: Significant winter premiums\n- Southern markets: Minimal seasonal variation\n- Mountain regions: Weather-dependent scheduling\n\n### Peak Season Pricing\n**Summer Construction Surge:**\n- Increased material demand\n- Higher equipment rental rates\n- Competition for skilled trades\n- Potential supply chain delays\n\n## How CostFlowAI Handles Regional Pricing\n\n### Intelligent Factor Application\nOur pricing engine automatically applies regional factors based on:\n\n1. **Base pricing database**: National average material and labor costs\n2. **Regional multipliers**: Continuously updated market factors\n3. **Local market conditions**: Supply/demand adjustments\n4. **Project-specific factors**: Size, complexity, timing\n\n### Factor Categories\n\n**Labor Factors:**\n- General labor: Varies by trade and region\n- Skilled trades: Higher variation than general labor\n- Supervision: Reflects local management costs\n\n**Material Factors:**\n- Delivered pricing: Includes transportation\n- Local sourcing: Aggregates, ready-mix concrete\n- Specialty items: Regional distributor markups\n\n**Equipment Factors:**\n- Rental rates: Local market competition\n- Fuel costs: Regional diesel/gas pricing\n- Availability: High-demand periods\n\n### Override Capabilities\nWhen you have better local pricing data:\n\n- **Manual overrides**: Input known local costs\n- **Override indicators**: System flags when prices are adjusted\n- **Comparison tools**: See difference from regional baseline\n- **Documentation**: Track override reasons for future reference\n\n## Best Practices for Regional Pricing\n\n### Market Research\n1. **Develop local contacts**: Suppliers, subcontractors, officials\n2. **Track historical data**: Build your own regional database\n3. **Monitor trends**: Material costs and labor availability\n4. **Network actively**: Join local construction associations\n\n### Bidding Strategies\n1. **Verify factors**: Confirm regional adjustments make sense\n2. **Account for logistics**: Transportation and staging costs\n3. **Consider timing**: Seasonal and market cycle impacts\n4. **Include contingencies**: Regional risk factors\n\n### Documentation\n1. **Track actual costs**: Compare estimates to final costs\n2. **Update factors**: Refine regional adjustments over time\n3. **Document assumptions**: Rationale for pricing decisions\n4. **Share knowledge**: Build team understanding of local markets\n\n## Regional Pricing Trends\n\n### Emerging Patterns\n**Cost Convergence:**\n- Remote work reducing some regional differences\n- Improved transportation reducing material variations\n- National suppliers standardizing some pricing\n\n**Divergence Factors:**\n- Increased regulation in urban areas\n- Labor shortage impacts varying by region\n- Climate change affecting seasonal patterns\n\n### Future Considerations\n- **Sustainability requirements**: Green building costs by region\n- **Technology adoption**: Regional differences in construction tech\n- **Demographic shifts**: Labor migration patterns\n- **Infrastructure investment**: Regional development impacts\n\n## Conclusion\n\nRegional pricing isn't just about applying a multiplier—it's about understanding the complex factors that drive local construction markets. By leveraging accurate regional data and staying connected to local market conditions, you can create more competitive and profitable estimates.\n\n**CostFlowAI's regional pricing engine** takes the guesswork out of local market adjustments while still allowing you to apply your local expertise where it matters most.\n\nReady to see how regional pricing affects your projects? Try our [calculators](/calculators) with regional pricing enabled and discover the difference accurate local market data makes.\n\n---\n\n*Coming up: We'll explore how to use CostFlowAI's pricing override features to incorporate your local supplier relationships and proprietary cost data.*","size_bytes":7365},"content/posts/welcome-to-costflowai.md":{"content":"---\ntitle: Welcome to CostFlowAI - The Future of Construction Cost Estimation\nslug: welcome-to-costflowai\ndate: 2024-01-15\ntags: [announcement, features, construction]\ndescription: Introducing CostFlowAI, the most comprehensive suite of construction cost calculators powered by AI-driven insights and real-time pricing data.\ncover: /assets/images/blog/welcome-cover.jpg\n---\n\n# Welcome to CostFlowAI\n\nWe're excited to introduce **CostFlowAI**, the most comprehensive and accurate construction cost estimation platform available today. Built by construction professionals for construction professionals, our platform combines decades of industry experience with cutting-edge technology to deliver precise, reliable cost calculations.\n\n## What Makes CostFlowAI Different?\n\n### Real-Time Regional Pricing\nUnlike static cost databases, CostFlowAI integrates real-time pricing data with regional multipliers to ensure your estimates reflect current market conditions. Whether you're bidding in high-cost metropolitan areas or rural markets, our pricing engine adjusts automatically.\n\n### Comprehensive Calculator Suite\nFrom concrete slabs to complex MEP systems, our calculator library covers every aspect of construction:\n\n- **Structural & Concrete**: Concrete slabs, framing, masonry, steel\n- **MEP Systems**: Plumbing, electrical, HVAC calculations\n- **Finishes**: Drywall, paint, flooring with waste factors\n- **Exterior & Envelope**: Roofing, doors, windows, insulation\n- **Sitework**: Earthwork, asphalt, demolition planning\n\n### Professional Export Features\nEvery calculator generates professional reports in multiple formats:\n- **CSV/Excel**: Import directly into your estimating software\n- **PDF Reports**: Professional proposals for clients\n- **Email Integration**: Share estimates instantly\n- **Print Optimization**: Clean, professional printouts\n\n## Advanced Features\n\n### Intelligent Validation\nOur smart validation system ensures accuracy:\n- Real-time input validation with helpful error messages\n- Range checking based on industry standards\n- Automatic unit conversions (feet/inches, cubic yards, etc.)\n- Waste factor calculations built into every estimate\n\n### State Persistence\nNever lose your work with automatic state saving:\n- Form inputs saved as you type\n- Resume calculations from any device\n- Project history and favorites\n- Bulk calculation templates\n\n### Mobile-First Design\nDesigned for the job site:\n- Responsive design works on any device\n- Offline calculation capabilities\n- Touch-friendly interface\n- Fast loading even on slow connections\n\n## Getting Started\n\n1. **Choose Your Calculator**: Browse our comprehensive calculator library\n2. **Enter Project Details**: Input dimensions, materials, and specifications\n3. **Review Results**: See detailed breakdowns of materials, labor, and costs\n4. **Export & Share**: Generate professional reports in your preferred format\n\n## What's Coming Next\n\nWe're constantly expanding CostFlowAI with new features:\n\n- **AI-Powered Insights**: Machine learning to suggest optimizations\n- **Integration APIs**: Connect with popular estimating software\n- **Team Collaboration**: Share projects and calculations with your team\n- **Historical Tracking**: Monitor cost trends over time\n- **Custom Formulas**: Build your own specialized calculators\n\n## Join the Community\n\nCostFlowAI is more than just a tool—it's a community of construction professionals sharing knowledge and advancing the industry. We'd love to hear your feedback and suggestions for new calculators or features.\n\nReady to transform your estimating process? **[Start calculating today](/calculators)** and experience the difference accurate, intelligent cost estimation makes.\n\n---\n\n*Have questions or feedback? We'd love to hear from you. Contact our team or follow us for updates on new features and calculators.*","size_bytes":3840},"test-results/calculator-pages-Calculato-008e9-h-form-and-calculate-button-Mobile-Chrome/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-008e9-h-form-and-calculate-button-chromium/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-008e9-h-form-and-calculate-button-webkit/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1149},"test-results/calculator-pages-Calculato-0c47f-h-form-and-calculate-button-Mobile-Chrome/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-0c47f-h-form-and-calculate-button-chromium/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-0c47f-h-form-and-calculate-button-webkit/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1149},"test-results/calculator-pages-Calculato-428d5-s-have-proper-accessibility-Mobile-Chrome/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-428d5-s-have-proper-accessibility-chromium/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-428d5-s-have-proper-accessibility-webkit/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1149},"test-results/calculator-pages-Calculato-f6cb4-h-form-and-calculate-button-Mobile-Chrome/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-f6cb4-h-form-and-calculate-button-chromium/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2] [cursor=pointer]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5] [cursor=pointer]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8] [cursor=pointer]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12] [cursor=pointer]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14] [cursor=pointer]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16] [cursor=pointer]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24] [cursor=pointer]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26] [cursor=pointer]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1302},"test-results/calculator-pages-Calculato-f6cb4-h-form-and-calculate-button-webkit/error-context.md":{"content":"# Page snapshot\n\n```yaml\n- generic [active] [ref=e1]:\n  - link \"Skip to main content\" [ref=e2]:\n    - /url: \"#main\"\n  - banner [ref=e3]:\n    - navigation [ref=e4]:\n      - link \"CostFlowAI\" [ref=e5]:\n        - /url: /\n      - list [ref=e6]:\n        - listitem [ref=e7]:\n          - link \"Home\" [ref=e8]:\n            - /url: /\n        - listitem [ref=e9]:\n          - link \"Calculators\" [ref=e10]:\n            - /url: /calculators/\n        - listitem [ref=e11]:\n          - link \"Blog\" [ref=e12]:\n            - /url: /blog/\n        - listitem [ref=e13]:\n          - link \"Search\" [ref=e14]:\n            - /url: \"#\"\n        - listitem [ref=e15]:\n          - link \"Contact\" [ref=e16]:\n            - /url: mailto:contact@costflowai.com\n  - main [ref=e17]:\n    - paragraph [ref=e19]: Loading calculator...\n  - contentinfo [ref=e20]:\n    - navigation [ref=e21]:\n      - list [ref=e22]:\n        - listitem [ref=e23]:\n          - link \"Calculators\" [ref=e24]:\n            - /url: /calculators/\n        - listitem [ref=e25]:\n          - link \"Blog\" [ref=e26]:\n            - /url: /blog/\n    - paragraph [ref=e27]: © 2024 CostFlowAI. All rights reserved.\n```","size_bytes":1149},"tests/e2e/calculator-pages.spec.ts":{"content":"import { test, expect } from '@playwright/test';\n\ntest.describe('Calculator Pages', () => {\n  test('framing calculator loads with form and calculate button', async ({ page }) => {\n    // Navigate to framing calculator\n    await page.goto('/calculators/framing/');\n\n    // Check page title\n    await expect(page).toHaveTitle(/Framing Calculator.*CostFlowAI/);\n\n    // Check that we have the main app container\n    await expect(page.locator('#app')).toBeVisible();\n\n    // Wait for page to load and check for either loading indicator or calculator content\n    await page.waitForTimeout(2000);\n\n    // Check for either loading indicator or calculator content\n    const hasLoading = await page.locator('#calculator-loading').isVisible();\n    const hasForm = await page.locator('#calculator-form').isVisible();\n\n    // We should have either loading or the actual form\n    expect(hasLoading || hasForm).toBe(true);\n\n    // If we have the form, check for calculator elements\n    if (hasForm) {\n      // Check for calculator header (should have h1)\n      await expect(page.locator('h1')).toBeVisible();\n\n      // Check for Calculate button\n      const calculateButton = page.locator('#calculate-btn');\n      await expect(calculateButton).toBeVisible();\n      await expect(calculateButton).toContainText('Calculate');\n    }\n\n    // Check for Reset button (only if form is loaded)\n    if (hasForm) {\n      const resetButton = page.locator('button[data-action=\"reset\"]');\n      await expect(resetButton).toBeVisible();\n      await expect(resetButton).toContainText('Reset');\n\n      // Check for results container (should be present but may be empty)\n      await expect(page.locator('#results')).toBeVisible();\n    }\n\n    // Check navigation is present\n    await expect(page.locator('nav.main-nav')).toBeVisible();\n    await expect(page.locator('nav.main-nav a[href=\"/calculators/\"]')).toContainText('Calculators');\n\n    // Check footer is present\n    await expect(page.locator('footer')).toBeVisible();\n  });\n\n  test('concrete calculator loads with form and calculate button', async ({ page }) => {\n    // Navigate to concrete calculator\n    await page.goto('/calculators/concrete/');\n\n    // Check page title\n    await expect(page).toHaveTitle(/Concrete.*Calculator.*CostFlowAI/);\n\n    // Check that main app container exists\n    await expect(page.locator('#app')).toBeVisible();\n\n    // Wait for page to load\n    await page.waitForTimeout(2000);\n\n    // Check for either loading or form content\n    const hasLoading = await page.locator('#calculator-loading').isVisible();\n    const hasForm = await page.locator('#calculator-form').isVisible();\n    expect(hasLoading || hasForm).toBe(true);\n\n    // Check navigation is present\n    await expect(page.locator('nav.main-nav')).toBeVisible();\n  });\n\n  test('earthwork calculator loads with form and calculate button', async ({ page }) => {\n    // Navigate to earthwork calculator\n    await page.goto('/calculators/earthwork/');\n\n    // Check page title\n    await expect(page).toHaveTitle(/Earthwork Calculator.*CostFlowAI/);\n\n    // Check that main app container exists\n    await expect(page.locator('#app')).toBeVisible();\n\n    // Wait for page to load\n    await page.waitForTimeout(2000);\n\n    // Check for either loading or form content\n    const hasLoading = await page.locator('#calculator-loading').isVisible();\n    const hasForm = await page.locator('#calculator-form').isVisible();\n    expect(hasLoading || hasForm).toBe(true);\n\n    // Check navigation is present\n    await expect(page.locator('nav.main-nav')).toBeVisible();\n  });\n\n  test('calculator navigation links work', async ({ page }) => {\n    // Start at calculators index\n    await page.goto('/calculators/');\n\n    // Click on framing calculator link\n    await page.click('a[href=\"/calculators/framing/\"]');\n\n    // Should navigate to framing calculator\n    await expect(page).toHaveURL(/.*\\/calculators\\/framing\\//);\n\n    // Go back to calculators index via nav\n    await page.click('nav a[href=\"/calculators/\"]');\n\n    // Should be back at calculators index\n    await expect(page).toHaveURL(/.*\\/calculators\\//);\n  });\n\n  test('calculator error handling', async ({ page }) => {\n    // Navigate to a non-existent calculator\n    await page.goto('/calculators/nonexistent/');\n\n    // Should show 404 or error (depending on server setup)\n    // For static sites, this might just be a blank page or server error\n    // We'll check that the page loads without throwing JavaScript errors\n\n    // Check that the page doesn't have uncaught JavaScript errors\n    const errors: string[] = [];\n    page.on('pageerror', error => {\n      errors.push(error.message);\n    });\n\n    // Wait a bit for any errors to surface\n    await page.waitForTimeout(2000);\n\n    // We expect either no errors, or specific error handling\n    // This test mainly ensures our JavaScript doesn't crash on missing calculators\n  });\n\n  test('calculator pages have proper accessibility', async ({ page }) => {\n    await page.goto('/calculators/framing/');\n\n    // Wait for page to load\n    await page.waitForTimeout(2000);\n\n    // Check for skip link\n    await expect(page.locator('.skip-link')).toBeVisible();\n\n    // Check for either loading or calculator content\n    const hasLoading = await page.locator('#calculator-loading').isVisible();\n    const hasForm = await page.locator('#calculator-form').isVisible();\n    expect(hasLoading || hasForm).toBe(true);\n\n    // If form is loaded, check accessibility features\n    if (hasForm) {\n      // Check for proper heading hierarchy\n      const h1Count = await page.locator('h1').count();\n      expect(h1Count).toBe(1);\n\n      // Check that calculate button has proper attributes\n      const calculateBtn = page.locator('#calculate-btn');\n      await expect(calculateBtn).toHaveAttribute('type', 'button');\n    }\n  });\n});","size_bytes":5838},"tests/e2e/calculators.spec.ts":{"content":"import { test, expect } from '@playwright/test';\n\ntest.describe('Calculator Tests', () => {\n  test.beforeEach(async ({ page }) => {\n    // Navigate to calculators page\n    await page.goto('/calculators/');\n    await expect(page).toHaveTitle(/Calculators - CostFlowAI/);\n  });\n\n  test('Framing Calculator: 12 ft wall, 8 ft height, 16\" oc → studs_total > 10; export CSV exists', async ({ page }) => {\n    // Click framing calculator button\n    await page.click('[data-calc=\"framing\"]');\n\n    // Wait for calculator window to open\n    const [newPage] = await Promise.all([\n      page.context().waitForEvent('page'),\n      // The button click is already done above\n    ]);\n\n    await newPage.waitForLoadState();\n    await expect(newPage).toHaveTitle(/Framing Calculator - CostFlowAI/);\n\n    // Fill in test inputs\n    await newPage.fill('#wall-length', '12');\n    await newPage.fill('#wall-height', '8');\n    await newPage.selectOption('#stud-spacing', '16');\n    await newPage.fill('#num-walls', '1');\n\n    // Wait for auto-calculation or click calculate\n    await newPage.waitForTimeout(500);\n\n    // Verify results are displayed\n    await expect(newPage.locator('#results-section')).toBeVisible();\n\n    // Check that total studs > 10\n    const totalStudsText = await newPage.locator('tr:has-text(\"Total Studs\") td:last-child').textContent();\n    const totalStuds = parseInt(totalStudsText?.trim() || '0');\n    expect(totalStuds).toBeGreaterThan(10);\n\n    // Test CSV export\n    const downloadPromise = newPage.waitForEvent('download');\n    await newPage.click('#export-csv');\n    const download = await downloadPromise;\n    expect(download.suggestedFilename()).toBe('framing-calculation.csv');\n\n    await newPage.close();\n  });\n\n  test('Drywall Calculator: 500 sf walls, 200 sf ceiling, 10% waste → sheets > 0; PDF generates', async ({ page }) => {\n    // Click drywall calculator button\n    await page.click('[data-calc=\"drywall\"]');\n\n    // Wait for calculator window to open\n    const [newPage] = await Promise.all([\n      page.context().waitForEvent('page'),\n    ]);\n\n    await newPage.waitForLoadState();\n    await expect(newPage).toHaveTitle(/Drywall Calculator - CostFlowAI/);\n\n    // Fill in test inputs\n    await newPage.fill('#wall-area', '500');\n    await newPage.fill('#ceiling-area', '200');\n    await newPage.selectOption('#sheet-size', '4x8');\n    await newPage.fill('#waste-percent', '10');\n\n    // Wait for auto-calculation\n    await newPage.waitForTimeout(500);\n\n    // Verify results are displayed\n    await expect(newPage.locator('#results-section')).toBeVisible();\n\n    // Check that sheets > 0\n    const sheetsText = await newPage.locator('tr:has-text(\"Drywall Sheets\") td:last-child').textContent();\n    const sheets = parseInt(sheetsText?.trim() || '0');\n    expect(sheets).toBeGreaterThan(0);\n\n    // Test PDF export (will open in new window)\n    const newPagePromise = newPage.context().waitForEvent('page');\n    await newPage.click('#export-pdf');\n    const pdfPage = await newPagePromise;\n    await pdfPage.waitForLoadState();\n\n    // Check that PDF page contains results\n    await expect(pdfPage).toHaveTitle(/Drywall Calculator Results/);\n\n    await pdfPage.close();\n    await newPage.close();\n  });\n\n  test('Paint Calculator: 600 sf, 2 coats @ 350 sf/gal → gallons ≥ 4; XLSX generates', async ({ page }) => {\n    // Click paint calculator button\n    await page.click('[data-calc=\"paint\"]');\n\n    // Wait for calculator window to open\n    const [newPage] = await Promise.all([\n      page.context().waitForEvent('page'),\n    ]);\n\n    await newPage.waitForLoadState();\n    await expect(newPage).toHaveTitle(/Paint Calculator - CostFlowAI/);\n\n    // Fill in test inputs\n    await newPage.fill('#surface-area', '600');\n    await newPage.fill('#num-coats', '2');\n    await newPage.selectOption('#substrate-type', 'custom');\n    await newPage.fill('#coverage-sqft', '350');\n\n    // Wait for auto-calculation\n    await newPage.waitForTimeout(500);\n\n    // Verify results are displayed\n    await expect(newPage.locator('#results-section')).toBeVisible();\n\n    // Check that gallons ≥ 4\n    const gallonsText = await newPage.locator('tr:has-text(\"Paint Required\") td:last-child').textContent();\n    const gallons = parseFloat(gallonsText?.replace(/[^\\d.]/g, '') || '0');\n    expect(gallons).toBeGreaterThanOrEqual(4);\n\n    // Test XLSX export\n    const downloadPromise = newPage.waitForEvent('download');\n    await newPage.click('#export-xlsx');\n    const download = await downloadPromise;\n    expect(download.suggestedFilename()).toBe('paint-calculation.xlsx');\n\n    await newPage.close();\n  });\n\n  test('Hub page has enabled buttons for implemented calculators', async ({ page }) => {\n    // Check that framing, drywall, and paint have enabled buttons\n    const framingButton = page.locator('[data-calc=\"framing\"]');\n    const drywallButton = page.locator('[data-calc=\"drywall\"]');\n    const paintButton = page.locator('[data-calc=\"paint\"]');\n\n    await expect(framingButton).toBeEnabled();\n    await expect(drywallButton).toBeEnabled();\n    await expect(paintButton).toBeEnabled();\n\n    // Check that other calculators still show \"Coming Soon\"\n    const disabledButtons = page.locator('.btn-disabled:has-text(\"Coming Soon\")');\n    const disabledCount = await disabledButtons.count();\n    expect(disabledCount).toBeGreaterThan(15); // Most calculators should still be disabled\n  });\n\n  test('Show Math functionality works', async ({ page }) => {\n    // Test with framing calculator\n    await page.click('[data-calc=\"framing\"]');\n\n    const [newPage] = await Promise.all([\n      page.context().waitForEvent('page'),\n    ]);\n\n    await newPage.waitForLoadState();\n\n    // Fill in inputs to generate results\n    await newPage.fill('#wall-length', '10');\n    await newPage.fill('#wall-height', '8');\n    await newPage.waitForTimeout(500);\n\n    // Click Show Math button\n    await newPage.click('#show-math-btn');\n\n    // Verify math details are visible\n    await expect(newPage.locator('#math-details')).toBeVisible();\n    await expect(newPage.locator('.math-explanation')).toBeVisible();\n\n    // Verify button text changed\n    await expect(newPage.locator('#show-math-btn')).toHaveText('Hide Math');\n\n    // Click again to hide\n    await newPage.click('#show-math-btn');\n    await expect(newPage.locator('#math-details')).not.toBeVisible();\n    await expect(newPage.locator('#show-math-btn')).toHaveText('Show Math');\n\n    await newPage.close();\n  });\n});","size_bytes":6484},"tests/e2e/navigation.spec.ts":{"content":"import { test, expect } from '@playwright/test';\n\ntest.describe('Site Navigation', () => {\n  test('homepage has proper navigation and hero section', async ({ page }) => {\n    await page.goto('/');\n\n    // Check page title\n    await expect(page).toHaveTitle(/CostFlowAI.*Professional Cost Calculation Platform/);\n\n    // Check main navigation exists\n    const nav = page.locator('nav.main-nav');\n    await expect(nav).toBeVisible();\n\n    // Check navigation links\n    await expect(nav.locator('a[href=\"/\"]')).toContainText('Home');\n    await expect(nav.locator('a[href=\"/calculators/\"]')).toContainText('Calculators');\n    await expect(nav.locator('a[href=\"/blog/\"]')).toContainText('Blog');\n    await expect(nav.locator('a:has-text(\"Search\")')).toBeVisible();\n    await expect(nav.locator('a[href*=\"mailto:\"]')).toContainText('Contact');\n\n    // Check hero section\n    const hero = page.locator('section.hero');\n    await expect(hero).toBeVisible();\n    await expect(hero.locator('h1')).toContainText('Professional Cost Calculation Platform');\n\n    // Check hero buttons\n    await expect(hero.locator('a[href=\"/calculators/\"]')).toContainText('Open Calculators');\n    await expect(hero.locator('a[href=\"/blog/\"]')).toContainText('Read the Blog');\n\n    // Check development banner\n    await expect(page.locator('.banner')).toContainText('under active development');\n\n    // Check footer navigation\n    const footer = page.locator('footer');\n    await expect(footer).toBeVisible();\n    await expect(footer.locator('a[href=\"/calculators/\"]')).toContainText('Calculators');\n    await expect(footer.locator('a[href=\"/blog/\"]')).toContainText('Blog');\n  });\n\n  test('search functionality works', async ({ page }) => {\n    await page.goto('/');\n\n    // Click search link\n    await page.click('a:has-text(\"Search\")');\n\n    // Check search overlay is visible\n    const searchOverlay = page.locator('#search-overlay');\n    await expect(searchOverlay).toBeVisible();\n\n    // Check search input is focused\n    const searchInput = page.locator('#global-search');\n    await expect(searchInput).toBeVisible();\n    await expect(searchInput).toBeFocused();\n\n    // Close search overlay\n    await page.click('button:has-text(\"Close\")');\n    await expect(searchOverlay).not.toBeVisible();\n  });\n\n  test('calculators page is accessible', async ({ page }) => {\n    await page.goto('/');\n\n    // Click calculators link from navigation\n    await page.click('nav a[href=\"/calculators/\"]');\n\n    // Should navigate to calculators page\n    await expect(page).toHaveURL(/.*\\/calculators\\//);\n\n    // Go back and try hero button\n    await page.goto('/');\n    await page.click('section.hero a[href=\"/calculators/\"]');\n    await expect(page).toHaveURL(/.*\\/calculators\\//);\n  });\n\n  test('blog page is accessible', async ({ page }) => {\n    await page.goto('/');\n\n    // Click blog link from navigation\n    await page.click('nav a[href=\"/blog/\"]');\n\n    // Should navigate to blog page\n    await expect(page).toHaveURL(/.*\\/blog\\//);\n\n    // Go back and try hero button\n    await page.goto('/');\n    await page.click('section.hero a[href=\"/blog/\"]');\n    await expect(page).toHaveURL(/.*\\/blog\\//);\n  });\n\n  test('contact link opens email client', async ({ page }) => {\n    await page.goto('/');\n\n    // Check contact link has mailto href\n    const contactLink = page.locator('nav a[href*=\"mailto:\"]');\n    await expect(contactLink).toHaveAttribute('href', /mailto:.*@costflowai\\.com/);\n  });\n\n  test('responsive navigation on mobile', async ({ page }) => {\n    // Set mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.goto('/');\n\n    // Navigation should still be visible and functional\n    const nav = page.locator('nav.main-nav');\n    await expect(nav).toBeVisible();\n\n    // Hero buttons should be stacked/responsive\n    const heroActions = page.locator('.hero-actions');\n    await expect(heroActions).toBeVisible();\n  });\n\n  test('accessibility basics', async ({ page }) => {\n    await page.goto('/');\n\n    // Check for proper heading hierarchy\n    await expect(page.locator('h1')).toHaveCount(1);\n\n    // Check for alt text on images (if any)\n    const images = page.locator('img');\n    const imageCount = await images.count();\n    for (let i = 0; i < imageCount; i++) {\n      await expect(images.nth(i)).toHaveAttribute('alt');\n    }\n\n    // Check for proper link text (no \"click here\" or empty links)\n    const links = page.locator('a');\n    const linkCount = await links.count();\n    for (let i = 0; i < linkCount; i++) {\n      const linkText = await links.nth(i).textContent();\n      const href = await links.nth(i).getAttribute('href');\n\n      // Skip if it's a mailto link or has meaningful content\n      if (href?.startsWith('mailto:') || href?.startsWith('#')) continue;\n\n      expect(linkText?.trim()).toBeTruthy();\n      expect(linkText?.toLowerCase()).not.toContain('click here');\n      expect(linkText?.toLowerCase()).not.toContain('read more');\n    }\n  });\n});","size_bytes":4991},"assets/js/calculators/asphalt.js":{"content":"// Asphalt Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"asphalt\",\n    title: \"Asphalt Calculator\",\n    category: \"sitework\"\n  };\n}","size_bytes":361},"assets/js/calculators/concrete.js":{"content":"// Concrete Slab Pro Calculator\n// Comprehensive concrete slab calculation with business logic\n\nimport { FormBinder, setupExportHandlers } from '../core/ui.js';\nimport { initPricing, getConcretePricing, getRebarPricing, getLaborPricing, calculateCost } from '../core/pricing.js';\nimport { saveState, loadState } from '../core/store.js';\nimport { calculateConcreteVolume, addWaste, calculateArea, calculatePerimeter, formatCurrency, formatNumber, feetToInches, inchesToFeet } from '../core/units.js';\nimport { COMMON_SCHEMAS } from '../core/validate.js';\nimport { bus, EVENTS } from '../core/bus.js';\n\nclass ConcreteSlabCalculator {\n  constructor() {\n    this.name = 'concrete-slab-pro';\n    this.version = '1.0';\n    this.form = null;\n    this.formBinder = null;\n    this.results = null;\n    this.state = this.getInitialState();\n  }\n\n  /**\n   * Initialize the calculator\n   */\n  async init() {\n    try {\n      // Initialize pricing\n      await initPricing('us');\n\n      // Get form element\n      this.form = document.getElementById('concrete-calculator-form');\n      if (!this.form) {\n        throw new Error('Concrete calculator form not found');\n      }\n\n      // Setup form binding\n      this.formBinder = new FormBinder(this.form, this);\n      this.formBinder.init({\n        schema: this.getValidationSchema(),\n        autoCalculate: false\n      });\n\n      // Setup export handlers\n      setupExportHandlers(this);\n\n      // Load saved state\n      this.loadSavedState();\n\n      // Setup event listeners\n      this.setupEventListeners();\n\n      bus.emit(EVENTS.CALCULATOR_LOADED, { calculator: this.name });\n\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize concrete calculator:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get validation schema for the form\n   */\n  getValidationSchema() {\n    return {\n      length: [\n        { type: 'required', message: 'Length is required' },\n        { type: 'measurement', min: 1, max: 1000, units: 'ft', message: 'Length must be between 1-1000 feet' }\n      ],\n      width: [\n        { type: 'required', message: 'Width is required' },\n        { type: 'measurement', min: 1, max: 1000, units: 'ft', message: 'Width must be between 1-1000 feet' }\n      ],\n      thickness: [\n        { type: 'required', message: 'Thickness is required' },\n        { type: 'number', min: 2, max: 24, message: 'Thickness must be between 2-24 inches' }\n      ],\n      concreteStrength: [\n        { type: 'required', message: 'Concrete strength is required' },\n        { type: 'select', choices: ['3000', '4000', '5000'], message: 'Please select a valid concrete strength' }\n      ],\n      waste: [\n        { type: 'number', min: 0, max: 50, message: 'Waste must be between 0-50%' }\n      ],\n      rebarGrid: [\n        { type: 'select', choices: ['none', '12', '18', '24'], message: 'Please select a rebar grid option' }\n      ],\n      rebarSize: [\n        { type: 'select', choices: ['3', '4', '5'], message: 'Please select a rebar size' }\n      ],\n      includeLabor: [\n        { type: 'select', choices: ['yes', 'no'], message: 'Please specify if labor should be included' }\n      ],\n      addFiberMesh: [\n        { type: 'select', choices: ['yes', 'no'], message: 'Please specify if fiber mesh should be added' }\n      ]\n    };\n  }\n\n  /**\n   * Main calculation function\n   */\n  async calculate(formData) {\n    try {\n      // Parse inputs\n      const inputs = this.parseInputs(formData);\n\n      // Validate inputs\n      this.validateInputs(inputs);\n\n      // Calculate dimensions and volumes\n      const calculations = this.calculateDimensions(inputs);\n\n      // Calculate materials\n      const materials = this.calculateMaterials(calculations, inputs);\n\n      // Calculate costs\n      const costs = this.calculateCosts(materials, calculations, inputs);\n\n      // Store results\n      this.results = {\n        inputs,\n        calculations,\n        materials,\n        costs,\n        timestamp: new Date().toISOString()\n      };\n\n      // Save state\n      this.saveCurrentState();\n\n      return {\n        calculations: this.formatCalculationsForDisplay(calculations),\n        materials: this.formatMaterialsForDisplay(materials),\n        costs: this.formatCostsForDisplay(costs)\n      };\n\n    } catch (error) {\n      console.error('Calculation error:', error);\n      throw new Error(`Calculation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Parse form inputs\n   */\n  parseInputs(formData) {\n    return {\n      length: parseFloat(formData.length) || 0,\n      width: parseFloat(formData.width) || 0,\n      thickness: parseFloat(formData.thickness) || 4,\n      concreteStrength: formData.concreteStrength || '4000',\n      waste: parseFloat(formData.waste) || 5,\n      rebarGrid: formData.rebarGrid || 'none',\n      rebarSize: formData.rebarSize || '4',\n      includeLabor: formData.includeLabor === 'yes',\n      addFiberMesh: formData.addFiberMesh === 'yes',\n      includeDelivery: formData.includeDelivery !== 'no',\n      pumpRequired: formData.pumpRequired === 'yes'\n    };\n  }\n\n  /**\n   * Validate parsed inputs\n   */\n  validateInputs(inputs) {\n    if (inputs.length <= 0 || inputs.width <= 0) {\n      throw new Error('Length and width must be greater than 0');\n    }\n    if (inputs.thickness < 2 || inputs.thickness > 24) {\n      throw new Error('Thickness must be between 2 and 24 inches');\n    }\n    if (inputs.waste < 0 || inputs.waste > 50) {\n      throw new Error('Waste percentage must be between 0 and 50');\n    }\n  }\n\n  /**\n   * Calculate dimensions and volumes\n   */\n  calculateDimensions(inputs) {\n    const area = calculateArea(inputs.length, inputs.width);\n    const perimeter = calculatePerimeter(inputs.length, inputs.width);\n    const volumeCubicYards = calculateConcreteVolume(inputs.length, inputs.width, inputs.thickness);\n    const volumeWithWaste = addWaste(volumeCubicYards, inputs.waste);\n\n    // Calculate loads needed (10 yard standard truck)\n    const trucksNeeded = Math.ceil(volumeWithWaste / 10);\n\n    return {\n      area,\n      perimeter,\n      volumeCubicYards,\n      volumeWithWaste,\n      trucksNeeded,\n      thicknessFeet: inchesToFeet(inputs.thickness)\n    };\n  }\n\n  /**\n   * Calculate materials needed\n   */\n  calculateMaterials(calculations, inputs) {\n    const materials = [];\n\n    // Concrete\n    const concreteType = `ready_mix_${inputs.concreteStrength}psi`;\n    const concreteCost = calculateCost('concrete', concreteType, calculations.volumeWithWaste, 'per_cubic_yard');\n\n    materials.push({\n      name: `${inputs.concreteStrength} PSI Ready-Mix Concrete`,\n      quantity: calculations.volumeWithWaste,\n      unit: 'cubic yards',\n      cost: concreteCost.totalCost,\n      unitPrice: concreteCost.unitPrice\n    });\n\n    // Fiber mesh (if selected)\n    if (inputs.addFiberMesh) {\n      const fiberCost = calculateCost('concrete', 'fiber_mesh', calculations.volumeWithWaste, 'per_cubic_yard');\n      materials.push({\n        name: 'Fiber Mesh Additive',\n        quantity: calculations.volumeWithWaste,\n        unit: 'cubic yards',\n        cost: fiberCost.totalCost,\n        unitPrice: fiberCost.unitPrice\n      });\n    }\n\n    // Rebar (if selected)\n    if (inputs.rebarGrid !== 'none') {\n      const rebarMaterials = this.calculateRebarMaterials(calculations, inputs);\n      materials.push(...rebarMaterials);\n    }\n\n    // Delivery\n    if (inputs.includeDelivery) {\n      const deliveryCost = calculateCost('concrete', 'delivery', calculations.trucksNeeded, 'per_load');\n      materials.push({\n        name: 'Concrete Delivery',\n        quantity: calculations.trucksNeeded,\n        unit: 'loads',\n        cost: deliveryCost.totalCost,\n        unitPrice: deliveryCost.unitPrice\n      });\n    }\n\n    // Pump (if required)\n    if (inputs.pumpRequired) {\n      const pumpCost = calculateCost('equipment', 'concrete_pump', calculations.volumeWithWaste, 'per_cubic_yard');\n      materials.push({\n        name: 'Concrete Pump',\n        quantity: calculations.volumeWithWaste,\n        unit: 'cubic yards',\n        cost: pumpCost.totalCost,\n        unitPrice: pumpCost.unitPrice\n      });\n    }\n\n    // Base materials\n    const baseMaterials = this.calculateBaseMaterials(calculations);\n    materials.push(...baseMaterials);\n\n    return materials;\n  }\n\n  /**\n   * Calculate rebar materials\n   */\n  calculateRebarMaterials(calculations, inputs) {\n    const materials = [];\n    const gridSpacing = parseInt(inputs.rebarGrid);\n    const rebarSize = inputs.rebarSize;\n\n    // Calculate grid layout\n    const lengthBars = Math.floor(calculations.area / (inputs.width * (gridSpacing / 12))) + 1;\n    const widthBars = Math.floor(calculations.area / (inputs.length * (gridSpacing / 12))) + 1;\n\n    // Length direction rebar\n    const lengthBarsFeet = lengthBars * inputs.length;\n    const lengthRebarCost = calculateCost('rebar', `grade60_${rebarSize}`, lengthBarsFeet, 'per_linear_foot');\n\n    materials.push({\n      name: `#${rebarSize} Rebar (Length Direction)`,\n      quantity: lengthBarsFeet,\n      unit: 'linear feet',\n      cost: lengthRebarCost.totalCost,\n      unitPrice: lengthRebarCost.unitPrice\n    });\n\n    // Width direction rebar\n    const widthBarsFeet = widthBars * inputs.width;\n    const widthRebarCost = calculateCost('rebar', `grade60_${rebarSize}`, widthBarsFeet, 'per_linear_foot');\n\n    materials.push({\n      name: `#${rebarSize} Rebar (Width Direction)`,\n      quantity: widthBarsFeet,\n      unit: 'linear feet',\n      cost: widthRebarCost.totalCost,\n      unitPrice: widthRebarCost.unitPrice\n    });\n\n    // Tie wire (estimate 0.1 lb per intersection)\n    const intersections = lengthBars * widthBars;\n    const tieWireLbs = intersections * 0.1;\n    const tieWireCost = calculateCost('rebar', 'tie_wire', tieWireLbs, 'per_pound');\n\n    materials.push({\n      name: 'Rebar Tie Wire',\n      quantity: tieWireLbs,\n      unit: 'pounds',\n      cost: tieWireCost.totalCost,\n      unitPrice: tieWireCost.unitPrice\n    });\n\n    // Rebar chairs (estimate 1 per 4 sq ft)\n    const chairs = Math.ceil(calculations.area / 4);\n    const chairsCost = calculateCost('rebar', 'chairs', chairs, 'per_piece');\n\n    materials.push({\n      name: 'Rebar Chairs',\n      quantity: chairs,\n      unit: 'pieces',\n      cost: chairsCost.totalCost,\n      unitPrice: chairsCost.unitPrice\n    });\n\n    return materials;\n  }\n\n  /**\n   * Calculate base materials\n   */\n  calculateBaseMaterials(calculations) {\n    const materials = [];\n\n    // Gravel base (4\" standard)\n    const gravelCubicYards = calculations.area * (4/12) / 27;\n    const gravelCost = calculateCost('materials', 'gravel_base', gravelCubicYards, 'per_cubic_yard');\n\n    materials.push({\n      name: '4\" Gravel Base',\n      quantity: gravelCubicYards,\n      unit: 'cubic yards',\n      cost: gravelCost.totalCost,\n      unitPrice: gravelCost.unitPrice\n    });\n\n    // Vapor barrier\n    const vaporBarrierCost = calculateCost('materials', 'vapor_barrier', calculations.area, 'per_square_foot');\n\n    materials.push({\n      name: '6-mil Vapor Barrier',\n      quantity: calculations.area,\n      unit: 'square feet',\n      cost: vaporBarrierCost.totalCost,\n      unitPrice: vaporBarrierCost.unitPrice\n    });\n\n    return materials;\n  }\n\n  /**\n   * Calculate total costs\n   */\n  calculateCosts(materials, calculations, inputs) {\n    const materialsCost = materials.reduce((sum, material) => sum + material.cost, 0);\n\n    let laborCost = 0;\n    const laborItems = [];\n\n    if (inputs.includeLabor) {\n      // Excavation\n      const excavationCost = calculateCost('labor', 'excavation', calculations.area, 'per_square_foot');\n      laborItems.push({\n        label: 'Excavation & Grading',\n        amount: excavationCost.totalCost\n      });\n\n      // Forming\n      const formingCost = calculateCost('labor', 'forming', calculations.perimeter, 'per_linear_foot');\n      laborItems.push({\n        label: 'Form Setup & Stripping',\n        amount: formingCost.totalCost\n      });\n\n      // Concrete placement\n      const placementCost = calculateCost('labor', 'concrete_placement', calculations.volumeWithWaste, 'per_cubic_yard');\n      laborItems.push({\n        label: 'Concrete Placement',\n        amount: placementCost.totalCost\n      });\n\n      // Finishing\n      const finishingCost = calculateCost('labor', 'finishing', calculations.area, 'per_square_foot');\n      laborItems.push({\n        label: 'Concrete Finishing',\n        amount: finishingCost.totalCost\n      });\n\n      laborCost = laborItems.reduce((sum, item) => sum + item.amount, 0);\n    }\n\n    const subtotal = materialsCost + laborCost;\n\n    // Calculate overhead percentages\n    const gcMarkup = subtotal * 0.15; // 15% GC markup\n    const profit = subtotal * 0.10;   // 10% profit\n    const bondInsurance = subtotal * 0.025; // 2.5% bond/insurance\n\n    const permits = 125; // Flat permit fee\n\n    const total = subtotal + gcMarkup + profit + bondInsurance + permits;\n\n    const costItems = [\n      { label: 'Materials', amount: materialsCost }\n    ];\n\n    if (inputs.includeLabor) {\n      costItems.push({ label: 'Labor', amount: laborCost });\n    }\n\n    costItems.push(\n      { label: 'General Contractor (15%)', amount: gcMarkup },\n      { label: 'Profit (10%)', amount: profit },\n      { label: 'Bond & Insurance (2.5%)', amount: bondInsurance },\n      { label: 'Permits', amount: permits }\n    );\n\n    return {\n      materials: materialsCost,\n      labor: laborCost,\n      subtotal,\n      gcMarkup,\n      profit,\n      bondInsurance,\n      permits,\n      total,\n      items: costItems,\n      laborItems\n    };\n  }\n\n  /**\n   * Format calculations for display\n   */\n  formatCalculationsForDisplay(calculations) {\n    return {\n      'Slab Area': `${formatNumber(calculations.area)} sq ft`,\n      'Perimeter': `${formatNumber(calculations.perimeter)} ft`,\n      'Concrete Volume': `${formatNumber(calculations.volumeCubicYards, 2)} cubic yards`,\n      'With Waste': `${formatNumber(calculations.volumeWithWaste, 2)} cubic yards`,\n      'Delivery Trucks': `${calculations.trucksNeeded} loads`\n    };\n  }\n\n  /**\n   * Format materials for display\n   */\n  formatMaterialsForDisplay(materials) {\n    return materials.map(material => ({\n      name: material.name,\n      quantity: formatNumber(material.quantity, 2),\n      unit: material.unit,\n      cost: material.cost\n    }));\n  }\n\n  /**\n   * Format costs for display\n   */\n  formatCostsForDisplay(costs) {\n    return {\n      items: costs.items.map(item => ({\n        label: item.label,\n        amount: item.amount\n      })),\n      total: costs.total\n    };\n  }\n\n  /**\n   * Get export data\n   */\n  getExportData() {\n    if (!this.results) {\n      throw new Error('No calculation results available for export');\n    }\n\n    const { calculations, materials, costs } = this.results;\n\n    const table = [\n      ['Concrete Slab Pro Calculator Results'],\n      ['Generated:', new Date().toLocaleDateString()],\n      [''],\n      ['CALCULATIONS'],\n      ['Metric', 'Value'],\n      ...Object.entries(calculations).map(([key, value]) => [key, value]),\n      [''],\n      ['MATERIALS'],\n      ['Item', 'Quantity', 'Unit', 'Unit Price', 'Total Cost'],\n      ...materials.map(m => [\n        m.name,\n        formatNumber(m.quantity, 2),\n        m.unit,\n        formatCurrency(m.unitPrice),\n        formatCurrency(m.cost)\n      ]),\n      [''],\n      ['COST BREAKDOWN'],\n      ['Category', 'Amount'],\n      ...costs.items.map(item => [item.label, formatCurrency(item.amount)]),\n      [''],\n      ['TOTAL PROJECT COST', formatCurrency(costs.total)]\n    ];\n\n    return {\n      table,\n      title: 'Concrete Slab Pro Calculator Results'\n    };\n  }\n\n  /**\n   * Get email data\n   */\n  getEmailData() {\n    if (!this.results) {\n      throw new Error('No calculation results available for email');\n    }\n\n    const subject = 'Concrete Slab Calculator Results';\n    const body = `Concrete Slab Pro Calculator Results\n\nProject Summary:\n- Slab Area: ${formatNumber(this.results.calculations.area)} sq ft\n- Concrete Volume: ${formatNumber(this.results.calculations.volumeWithWaste, 2)} cubic yards\n- Total Cost: ${formatCurrency(this.results.costs.total)}\n\nGenerated by CostFlowAI Calculator\n${window.location.href}`;\n\n    return { subject, body };\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      inputs: this.state.inputs,\n      results: this.results,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Load saved state\n   */\n  loadSavedState() {\n    const saved = loadState(this.name);\n    if (saved && saved.inputs) {\n      this.state.inputs = saved.inputs;\n      // Populate form with saved values\n      this.populateForm(saved.inputs);\n    }\n  }\n\n  /**\n   * Save current state\n   */\n  saveCurrentState() {\n    this.state.results = this.results;\n    saveState(this.name, this.state);\n  }\n\n  /**\n   * Populate form with values\n   */\n  populateForm(inputs) {\n    if (!this.form) return;\n\n    Object.entries(inputs).forEach(([key, value]) => {\n      const input = this.form.querySelector(`[name=\"${key}\"], #${key}`);\n      if (input) {\n        input.value = value;\n      }\n    });\n  }\n\n  /**\n   * Get initial state\n   */\n  getInitialState() {\n    return {\n      inputs: {\n        length: '',\n        width: '',\n        thickness: '4',\n        concreteStrength: '4000',\n        waste: '5',\n        rebarGrid: 'none',\n        rebarSize: '4',\n        includeLabor: 'yes',\n        addFiberMesh: 'no'\n      },\n      results: null\n    };\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Listen for pricing updates\n    bus.on(EVENTS.PRICING_UPDATED, () => {\n      console.log('Pricing data updated');\n    });\n\n    // Listen for form changes to update state\n    bus.on(EVENTS.FORM_CHANGED, (data) => {\n      if (data.form === 'concrete-calculator-form') {\n        this.state.inputs[data.field] = data.value;\n      }\n    });\n  }\n}\n\n// Legacy API for compatibility with existing system\nexport function init(el) {\n  const calculator = new ConcreteSlabCalculator();\n  calculator.init().then(success => {\n    if (success) {\n      console.log('Concrete calculator initialized');\n    }\n  });\n}\n\nexport function compute(state) {\n  // For now, return placeholder - full implementation uses new class\n  return { ok: false, msg: \"Use new ConcreteSlabCalculator class\" };\n}\n\nexport function explain(state) {\n  return \"Professional concrete slab calculator with material quantities, rebar layout, and comprehensive cost breakdown including labor, overhead, and regional pricing.\";\n}\n\nexport function meta() {\n  return {\n    id: \"concrete\",\n    title: \"Concrete Slab Pro\",\n    category: \"structural\",\n    description: \"Calculate concrete volume, rebar requirements, and total project costs for concrete slabs\",\n    features: [\n      \"Accurate concrete volume calculations\",\n      \"Rebar grid layout and quantities\",\n      \"Regional pricing integration\",\n      \"Labor cost estimation\",\n      \"Export to CSV/Excel/PDF\",\n      \"Material waste calculations\"\n    ]\n  };\n}\n\n// Initialize calculator when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const calculator = new ConcreteSlabCalculator();\n  const initialized = await calculator.init();\n\n  if (initialized) {\n    console.log('Concrete Slab Pro Calculator initialized successfully');\n    // Make calculator available globally for debugging\n    window.concreteCalculator = calculator;\n  } else {\n    console.error('Failed to initialize Concrete Slab Pro Calculator');\n  }\n});\n\nexport { ConcreteSlabCalculator };","size_bytes":19470},"assets/js/calculators/demolition.js":{"content":"// Demolition Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"demolition\",\n    title: \"Demolition Calculator\",\n    category: \"sitework\"\n  };\n}","size_bytes":370},"assets/js/calculators/doorswindows.js":{"content":"// Doors & Windows Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"doorswindows\",\n    title: \"Doors & Windows Calculator\",\n    category: \"exterior\"\n  };\n}","size_bytes":382},"assets/js/calculators/drywall.js":{"content":"// Drywall & ACT Calculator\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('drywall') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Drywall & ACT Calculator</h2>\n        <p>Calculate drywall sheets, tape, mud, and finishing materials</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Areas</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"wall-area\">Wall Area (sq ft)</label>\n            <input type=\"number\" id=\"wall-area\" step=\"0.1\" min=\"0\" value=\"${savedState.wallArea || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ceiling-area\">Ceiling Area (sq ft)</label>\n            <input type=\"number\" id=\"ceiling-area\" step=\"0.1\" min=\"0\" value=\"${savedState.ceilingArea || ''}\" />\n          </div>\n        </div>\n\n        <h3>Configuration</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"sheet-size\">Sheet Size</label>\n            <select id=\"sheet-size\">\n              <option value=\"4x8\" ${savedState.sheetSize === '4x8' ? 'selected' : ''}>4' x 8' (32 sq ft)</option>\n              <option value=\"4x12\" ${savedState.sheetSize === '4x12' ? 'selected' : ''}>4' x 12' (48 sq ft)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"waste-percent\">Waste % (typical 10%)</label>\n            <input type=\"number\" id=\"waste-percent\" step=\"0.1\" min=\"0\" max=\"50\" value=\"${savedState.wastePercent || '10'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"tape-coverage\">Tape Coverage (LF/roll)</label>\n            <input type=\"number\" id=\"tape-coverage\" step=\"1\" min=\"0\" value=\"${savedState.tapeCoverage || '250'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"mud-coverage\">Mud Coverage (sq ft/gal)</label>\n            <input type=\"number\" id=\"mud-coverage\" step=\"1\" min=\"0\" value=\"${savedState.mudCoverage || '400'}\" />\n          </div>\n        </div>\n\n        <h3>Installation Details</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"screws-per-sqft\">Screws per sq ft</label>\n            <input type=\"number\" id=\"screws-per-sqft\" step=\"0.1\" min=\"0\" value=\"${savedState.screwsPerSqft || '1.2'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"corner-bead\">Corner Bead (LF)</label>\n            <input type=\"number\" id=\"corner-bead\" step=\"0.1\" min=\"0\" value=\"${savedState.cornerBead || ''}\" />\n          </div>\n        </div>\n\n        <h3>Pricing (Optional)</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"sheet-price\">Sheet Price ($/ea)</label>\n            <input type=\"number\" id=\"sheet-price\" step=\"0.01\" min=\"0\" value=\"${savedState.sheetPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"tape-price\">Tape Price ($/roll)</label>\n            <input type=\"number\" id=\"tape-price\" step=\"0.01\" min=\"0\" value=\"${savedState.tapePrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"mud-price\">Mud Price ($/gal)</label>\n            <input type=\"number\" id=\"mud-price\" step=\"0.01\" min=\"0\" value=\"${savedState.mudPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"screw-price\">Screw Price ($/lb)</label>\n            <input type=\"number\" id=\"screw-price\" step=\"0.01\" min=\"0\" value=\"${savedState.screwPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"labor-rate\">Labor Rate ($/hr)</label>\n            <input type=\"number\" id=\"labor-rate\" step=\"0.01\" min=\"0\" value=\"${savedState.laborRate || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"productivity\">Productivity (sq ft/hr)</label>\n            <input type=\"number\" id=\"productivity\" step=\"0.1\" min=\"0\" value=\"${savedState.productivity || '25'}\" />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\" disabled>Calculate</button>\n        <button id=\"clear-btn\" class=\"btn-secondary\">Clear</button>\n      </div>\n\n      <div id=\"results-section\" class=\"results-section\" style=\"display: none;\">\n        <h3>Results</h3>\n        <div id=\"results-content\"></div>\n\n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <div class=\"export-buttons\">\n            <button id=\"export-csv\" class=\"btn-export\">CSV</button>\n            <button id=\"export-xlsx\" class=\"btn-export\">XLSX</button>\n            <button id=\"export-pdf\" class=\"btn-export\">PDF</button>\n            <button id=\"print-btn\" class=\"btn-export\">Print</button>\n          </div>\n        </div>\n\n        <div class=\"math-section\">\n          <button id=\"show-math-btn\" class=\"btn-secondary\">Show Math</button>\n          <div id=\"math-details\" class=\"math-details\" style=\"display: none;\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  setupEventListeners();\n}\n\nfunction setupEventListeners() {\n  const inputs = document.querySelectorAll('#wall-area, #ceiling-area, #sheet-size, #waste-percent, #tape-coverage, #mud-coverage, #screws-per-sqft, #corner-bead');\n  inputs.forEach(input => {\n    input.addEventListener('input', validateAndCalculate);\n  });\n\n  document.getElementById('calculate-btn').addEventListener('click', calculateDrywall);\n  document.getElementById('clear-btn').addEventListener('click', clearInputs);\n  document.getElementById('show-math-btn')?.addEventListener('click', toggleMath);\n\n  document.getElementById('export-csv')?.addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx')?.addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf')?.addEventListener('click', () => exportResults('pdf'));\n  document.getElementById('print-btn')?.addEventListener('click', () => window.print());\n\n  validateAndCalculate();\n}\n\nfunction validateAndCalculate() {\n  const state = getCurrentState();\n  const isValid = validateInputs(state);\n\n  document.getElementById('calculate-btn').disabled = !isValid;\n\n  if (isValid) {\n    calculateDrywall();\n  }\n\n  saveState('drywall', state);\n}\n\nfunction getCurrentState() {\n  return {\n    wallArea: parseFloat(document.getElementById('wall-area').value) || 0,\n    ceilingArea: parseFloat(document.getElementById('ceiling-area').value) || 0,\n    sheetSize: document.getElementById('sheet-size').value,\n    wastePercent: parseFloat(document.getElementById('waste-percent').value) || 10,\n    tapeCoverage: parseFloat(document.getElementById('tape-coverage').value) || 250,\n    mudCoverage: parseFloat(document.getElementById('mud-coverage').value) || 400,\n    screwsPerSqft: parseFloat(document.getElementById('screws-per-sqft').value) || 1.2,\n    cornerBead: parseFloat(document.getElementById('corner-bead').value) || 0,\n    sheetPrice: parseFloat(document.getElementById('sheet-price').value) || 0,\n    tapePrice: parseFloat(document.getElementById('tape-price').value) || 0,\n    mudPrice: parseFloat(document.getElementById('mud-price').value) || 0,\n    screwPrice: parseFloat(document.getElementById('screw-price').value) || 0,\n    laborRate: parseFloat(document.getElementById('labor-rate').value) || 0,\n    productivity: parseFloat(document.getElementById('productivity').value) || 25\n  };\n}\n\nfunction validateInputs(state) {\n  return (state.wallArea > 0 || state.ceilingArea > 0);\n}\n\nfunction calculateDrywall() {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (result.ok) {\n    displayResults(result.data, state);\n    document.getElementById('results-section').style.display = 'block';\n  }\n}\n\nfunction displayResults(data, state) {\n  const resultsContent = document.getElementById('results-content');\n\n  resultsContent.innerHTML = `\n    <div class=\"results-table\">\n      <table>\n        <tr><th colspan=\"2\">Material Requirements</th></tr>\n        <tr><td>Total Area</td><td>${formatNumber(data.totalArea)} sq ft</td></tr>\n        <tr><td>Drywall Sheets</td><td>${data.sheets}</td></tr>\n        <tr><td>Tape Required</td><td>${formatNumber(data.tapeRolls)} rolls</td></tr>\n        <tr><td>Mud Required</td><td>${formatNumber(data.mudGallons)} gallons</td></tr>\n        <tr><td>Screws Required</td><td>${formatNumber(data.screwsPounds)} lbs</td></tr>\n        ${data.cornerBead > 0 ? `<tr><td>Corner Bead</td><td>${formatNumber(data.cornerBead)} LF</td></tr>` : ''}\n\n        ${data.materialCost > 0 ? `\n        <tr><th colspan=\"2\">Material Costs</th></tr>\n        <tr><td>Sheet Cost</td><td>${formatCurrency(data.sheetCost)}</td></tr>\n        <tr><td>Tape Cost</td><td>${formatCurrency(data.tapeCost)}</td></tr>\n        <tr><td>Mud Cost</td><td>${formatCurrency(data.mudCost)}</td></tr>\n        <tr><td>Screw Cost</td><td>${formatCurrency(data.screwCost)}</td></tr>\n        <tr><td><strong>Total Material</strong></td><td><strong>${formatCurrency(data.materialCost)}</strong></td></tr>\n        ` : ''}\n\n        ${data.laborCost > 0 ? `\n        <tr><th colspan=\"2\">Labor</th></tr>\n        <tr><td>Labor Hours</td><td>${formatNumber(data.laborHours)} hrs</td></tr>\n        <tr><td>Labor Cost</td><td>${formatCurrency(data.laborCost)}</td></tr>\n        ` : ''}\n\n        ${data.totalCost > 0 ? `\n        <tr><th colspan=\"2\">Total Project</th></tr>\n        <tr><td><strong>Total Cost</strong></td><td><strong>${formatCurrency(data.totalCost)}</strong></td></tr>\n        ` : ''}\n      </table>\n    </div>\n\n    <div class=\"assumptions\">\n      <h4>Assumptions</h4>\n      <ul>\n        <li>Sheet size: ${state.sheetSize}</li>\n        <li>Waste factor: ${state.wastePercent}%</li>\n        <li>Tape coverage: ${state.tapeCoverage} LF per roll</li>\n        <li>Mud coverage: ${state.mudCoverage} sq ft per gallon</li>\n        <li>Screws: ${state.screwsPerSqft} per sq ft</li>\n        <li>Productivity: ${state.productivity} sq ft/hour</li>\n      </ul>\n    </div>\n  `;\n}\n\nfunction clearInputs() {\n  document.querySelectorAll('input, select').forEach(input => {\n    if (input.type === 'number') {\n      input.value = '';\n    } else {\n      input.selectedIndex = 0;\n    }\n  });\n\n  document.getElementById('results-section').style.display = 'none';\n  saveState('drywall', {});\n}\n\nfunction toggleMath() {\n  const mathDetails = document.getElementById('math-details');\n  const isVisible = mathDetails.style.display !== 'none';\n\n  if (isVisible) {\n    mathDetails.style.display = 'none';\n    document.getElementById('show-math-btn').textContent = 'Show Math';\n  } else {\n    const state = getCurrentState();\n    const explanation = explain(state);\n    mathDetails.innerHTML = explanation;\n    mathDetails.style.display = 'block';\n    document.getElementById('show-math-btn').textContent = 'Hide Math';\n  }\n}\n\nfunction exportResults(format) {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (!result.ok) return;\n\n  const data = result.data;\n  const exportData = [\n    ['Drywall Calculator Results', ''],\n    ['Wall Area', `${state.wallArea} sq ft`],\n    ['Ceiling Area', `${state.ceilingArea} sq ft`],\n    ['Total Area', `${data.totalArea} sq ft`],\n    ['Sheet Size', state.sheetSize],\n    [''],\n    ['Drywall Sheets', data.sheets],\n    ['Tape Rolls', formatNumber(data.tapeRolls)],\n    ['Mud Gallons', formatNumber(data.mudGallons)],\n    ['Screws (lbs)', formatNumber(data.screwsPounds)],\n    [''],\n    ['Material Cost', formatCurrency(data.materialCost)],\n    ['Labor Cost', formatCurrency(data.laborCost)],\n    ['Total Cost', formatCurrency(data.totalCost)]\n  ];\n\n  switch (format) {\n    case 'csv':\n      exportToCsv(exportData, 'drywall-calculation.csv');\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, 'drywall-calculation.xlsx');\n      break;\n    case 'pdf':\n      exportToPdf(exportData, 'Drywall Calculator Results', 'drywall-calculation.pdf');\n      break;\n  }\n}\n\nexport function compute(state) {\n  try {\n    const { wallArea, ceilingArea, sheetSize, wastePercent, tapeCoverage, mudCoverage, screwsPerSqft, cornerBead, sheetPrice, tapePrice, mudPrice, screwPrice, laborRate, productivity } = state;\n\n    if (!wallArea && !ceilingArea) {\n      return { ok: false, msg: \"Must specify wall or ceiling area\" };\n    }\n\n    const totalArea = wallArea + ceilingArea;\n\n    // Sheet calculations\n    const sheetArea = sheetSize === '4x12' ? 48 : 32;\n    const sheetsBase = Math.ceil(totalArea / sheetArea);\n    const sheets = Math.ceil(sheetsBase * (1 + wastePercent / 100));\n\n    // Tape calculations (estimate based on seams)\n    const estimatedSeamLF = totalArea * 0.4; // Rough estimate: 40% of area in linear feet of seams\n    const tapeRolls = Math.ceil(estimatedSeamLF / tapeCoverage);\n\n    // Mud calculations\n    const mudGallons = Math.ceil(totalArea / mudCoverage);\n\n    // Screw calculations\n    const totalScrews = totalArea * screwsPerSqft;\n    const screwsPounds = Math.ceil(totalScrews / 200); // Approx 200 screws per pound\n\n    // Cost calculations\n    const sheetCost = sheetPrice > 0 ? sheets * sheetPrice : 0;\n    const tapeCost = tapePrice > 0 ? tapeRolls * tapePrice : 0;\n    const mudCost = mudPrice > 0 ? mudGallons * mudPrice : 0;\n    const screwCost = screwPrice > 0 ? screwsPounds * screwPrice : 0;\n    const materialCost = sheetCost + tapeCost + mudCost + screwCost;\n\n    const laborHours = productivity > 0 ? totalArea / productivity : 0;\n    const laborCost = laborRate > 0 && laborHours > 0 ? laborHours * laborRate : 0;\n\n    const totalCost = materialCost + laborCost;\n\n    return {\n      ok: true,\n      data: {\n        totalArea,\n        sheets,\n        tapeRolls,\n        mudGallons,\n        screwsPounds,\n        cornerBead,\n        sheetCost,\n        tapeCost,\n        mudCost,\n        screwCost,\n        materialCost,\n        laborHours,\n        laborCost,\n        totalCost\n      }\n    };\n  } catch (error) {\n    return { ok: false, msg: error.message };\n  }\n}\n\nexport function explain(state) {\n  const result = compute(state);\n  if (!result.ok) return \"Invalid inputs\";\n\n  const { wallArea, ceilingArea, sheetSize, wastePercent, tapeCoverage, mudCoverage, screwsPerSqft } = state;\n  const data = result.data;\n\n  const sheetArea = sheetSize === '4x12' ? 48 : 32;\n\n  return `\n    <div class=\"math-explanation\">\n      <h4>Calculation Steps</h4>\n\n      <div class=\"step\">\n        <h5>1. Total Area</h5>\n        <p>Wall area: ${wallArea} sq ft</p>\n        <p>Ceiling area: ${ceilingArea} sq ft</p>\n        <p><strong>Total: ${wallArea} + ${ceilingArea} = ${data.totalArea} sq ft</strong></p>\n      </div>\n\n      <div class=\"step\">\n        <h5>2. Drywall Sheets</h5>\n        <p>Sheet size: ${sheetSize} = ${sheetArea} sq ft per sheet</p>\n        <p>Base sheets needed: ceil(${data.totalArea} ÷ ${sheetArea}) = ${Math.ceil(data.totalArea / sheetArea)}</p>\n        <p>With ${wastePercent}% waste: ${Math.ceil(data.totalArea / sheetArea)} × 1.${wastePercent} = ${data.sheets} sheets</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>3. Tape Requirements</h5>\n        <p>Estimated seam length: ${data.totalArea} × 0.4 = ${formatNumber(data.totalArea * 0.4)} LF</p>\n        <p>Tape rolls: ceil(${formatNumber(data.totalArea * 0.4)} ÷ ${tapeCoverage}) = ${data.tapeRolls} rolls</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>4. Mud Requirements</h5>\n        <p>Coverage: ${mudCoverage} sq ft per gallon</p>\n        <p>Gallons needed: ceil(${data.totalArea} ÷ ${mudCoverage}) = ${data.mudGallons} gallons</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>5. Screws</h5>\n        <p>Screws per sq ft: ${screwsPerSqft}</p>\n        <p>Total screws: ${data.totalArea} × ${screwsPerSqft} = ${formatNumber(data.totalArea * screwsPerSqft)}</p>\n        <p>Pounds: ceil(${formatNumber(data.totalArea * screwsPerSqft)} ÷ 200) = ${data.screwsPounds} lbs</p>\n      </div>\n    </div>\n  `;\n}\n\nexport function meta() {\n  return {\n    id: \"drywall\",\n    title: \"Drywall Calculator\",\n    category: \"finishing\"\n  };\n}","size_bytes":16371},"assets/js/calculators/earthwork.js":{"content":"// Earthwork Calculator\n// Calculate cut/fill volumes, truckloads, and haul distances\n\nimport { FormBinder, setupExportHandlers } from '../core/ui.js';\nimport { initPricing, calculateCost } from '../core/pricing.js';\nimport { saveState, loadState } from '../core/store.js';\nimport { formatCurrency, formatNumber, calculateArea, calculateVolume } from '../core/units.js';\nimport { bus, EVENTS } from '../core/bus.js';\n\nclass EarthworkCalculator {\n  constructor() {\n    this.name = 'earthwork-calculator';\n    this.version = '1.0';\n    this.form = null;\n    this.formBinder = null;\n    this.results = null;\n    this.state = this.getInitialState();\n  }\n\n  async init() {\n    try {\n      await initPricing('us');\n\n      this.form = document.getElementById('earthwork-calculator-form');\n      if (!this.form) {\n        throw new Error('Earthwork calculator form not found');\n      }\n\n      this.formBinder = new FormBinder(this.form, this);\n      this.formBinder.init({\n        schema: this.getValidationSchema(),\n        autoCalculate: false\n      });\n\n      setupExportHandlers(this);\n      this.loadSavedState();\n      this.setupEventListeners();\n\n      bus.emit(EVENTS.CALCULATOR_LOADED, { calculator: this.name });\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize earthwork calculator:', error);\n      return false;\n    }\n  }\n\n  getValidationSchema() {\n    return {\n      length: [\n        { type: 'required', message: 'Length is required' },\n        { type: 'number', min: 1, max: 10000, message: 'Length must be between 1-10000 feet' }\n      ],\n      width: [\n        { type: 'required', message: 'Width is required' },\n        { type: 'number', min: 1, max: 10000, message: 'Width must be between 1-10000 feet' }\n      ],\n      cutDepth: [\n        { type: 'number', min: 0, max: 50, message: 'Cut depth must be between 0-50 feet' }\n      ],\n      fillDepth: [\n        { type: 'number', min: 0, max: 50, message: 'Fill depth must be between 0-50 feet' }\n      ],\n      haulDistance: [\n        { type: 'required', message: 'Haul distance is required' },\n        { type: 'number', min: 0, max: 100, message: 'Haul distance must be between 0-100 miles' }\n      ],\n      truckCapacity: [\n        { type: 'required', message: 'Truck capacity is required' },\n        { type: 'number', min: 8, max: 20, message: 'Truck capacity must be between 8-20 cubic yards' }\n      ],\n      soilType: [\n        { type: 'required', message: 'Soil type is required' },\n        { type: 'select', choices: ['clay', 'sand', 'gravel', 'mixed'], message: 'Please select a valid soil type' }\n      ],\n      includeLabor: [\n        { type: 'select', choices: ['yes', 'no'], message: 'Please specify if labor should be included' }\n      ]\n    };\n  }\n\n  async calculate(formData) {\n    try {\n      const inputs = this.parseInputs(formData);\n      this.validateInputs(inputs);\n\n      const calculations = this.calculateVolumes(inputs);\n      const trucking = this.calculateTrucking(calculations, inputs);\n      const costs = this.calculateCosts(calculations, trucking, inputs);\n\n      this.results = {\n        inputs,\n        calculations,\n        trucking,\n        costs,\n        timestamp: new Date().toISOString()\n      };\n\n      this.saveCurrentState();\n\n      return {\n        calculations: this.formatCalculationsForDisplay(calculations),\n        trucking: this.formatTruckingForDisplay(trucking),\n        costs: this.formatCostsForDisplay(costs)\n      };\n\n    } catch (error) {\n      console.error('Earthwork calculation error:', error);\n      throw new Error(`Calculation failed: ${error.message}`);\n    }\n  }\n\n  parseInputs(formData) {\n    return {\n      length: parseFloat(formData.length) || 0,\n      width: parseFloat(formData.width) || 0,\n      cutDepth: parseFloat(formData.cutDepth) || 0,\n      fillDepth: parseFloat(formData.fillDepth) || 0,\n      haulDistance: parseFloat(formData.haulDistance) || 5,\n      truckCapacity: parseFloat(formData.truckCapacity) || 12,\n      soilType: formData.soilType || 'mixed',\n      includeLabor: formData.includeLabor === 'yes',\n      includeCompaction: formData.includeCompaction !== 'no',\n      includeTopsoil: formData.includeTopsoil === 'yes'\n    };\n  }\n\n  validateInputs(inputs) {\n    if (inputs.length <= 0 || inputs.width <= 0) {\n      throw new Error('Length and width must be greater than 0');\n    }\n    if (inputs.cutDepth === 0 && inputs.fillDepth === 0) {\n      throw new Error('Either cut depth or fill depth must be greater than 0');\n    }\n    if (inputs.haulDistance < 0) {\n      throw new Error('Haul distance cannot be negative');\n    }\n  }\n\n  calculateVolumes(inputs) {\n    const area = calculateArea(inputs.length, inputs.width);\n\n    // Calculate cut volume\n    const cutVolume = inputs.cutDepth > 0 ? calculateVolume(inputs.length, inputs.width, inputs.cutDepth) : 0;\n    const cutVolumeYards = cutVolume / 27; // Convert to cubic yards\n\n    // Calculate fill volume\n    const fillVolume = inputs.fillDepth > 0 ? calculateVolume(inputs.length, inputs.width, inputs.fillDepth) : 0;\n    const fillVolumeYards = fillVolume / 27; // Convert to cubic yards\n\n    // Soil factors for volume adjustments\n    const soilFactors = {\n      clay: { swell: 1.25, shrinkage: 0.95 },\n      sand: { swell: 1.15, shrinkage: 0.90 },\n      gravel: { swell: 1.20, shrinkage: 0.85 },\n      mixed: { swell: 1.20, shrinkage: 0.90 }\n    };\n\n    const factor = soilFactors[inputs.soilType];\n\n    // Adjust volumes for soil characteristics\n    const cutVolumeLoose = cutVolumeYards * factor.swell; // Volume when excavated (loose)\n    const fillVolumeCompacted = fillVolumeYards / factor.shrinkage; // Volume needed before compaction\n\n    // Net volume calculation\n    const netCutFill = cutVolumeYards - fillVolumeYards;\n    const excessCut = netCutFill > 0 ? netCutFill : 0;\n    const importFill = netCutFill < 0 ? Math.abs(netCutFill) : 0;\n\n    return {\n      area,\n      cutVolume: cutVolumeYards,\n      fillVolume: fillVolumeYards,\n      cutVolumeLoose,\n      fillVolumeCompacted,\n      netCutFill,\n      excessCut,\n      importFill,\n      soilFactor: factor\n    };\n  }\n\n  calculateTrucking(calculations, inputs) {\n    // Calculate truck loads needed\n    const excessLoads = calculations.excessCut > 0\n      ? Math.ceil(calculations.cutVolumeLoose / inputs.truckCapacity)\n      : 0;\n\n    const importLoads = calculations.importFill > 0\n      ? Math.ceil(calculations.fillVolumeCompacted / inputs.truckCapacity)\n      : 0;\n\n    // Calculate round trips and total miles\n    const totalLoads = Math.max(excessLoads, importLoads);\n    const totalMiles = totalLoads * inputs.haulDistance * 2; // Round trip\n\n    // Estimate trucking time (assume 30 mph average + loading/unloading)\n    const hoursPerLoad = (inputs.haulDistance * 2) / 30 + 0.5; // 0.5 hr for loading/unloading\n    const totalHours = totalLoads * hoursPerLoad;\n\n    return {\n      excessLoads,\n      importLoads,\n      totalLoads,\n      totalMiles,\n      totalHours,\n      haulDistance: inputs.haulDistance,\n      truckCapacity: inputs.truckCapacity\n    };\n  }\n\n  calculateCosts(calculations, trucking, inputs) {\n    const materials = [];\n    let laborCost = 0;\n    const laborItems = [];\n\n    // Excavation costs\n    if (calculations.cutVolume > 0) {\n      const excavationCost = calculateCost('earthwork', 'excavation', calculations.cutVolume, 'per_cubic_yard');\n      materials.push({\n        name: 'Excavation',\n        quantity: calculations.cutVolume,\n        unit: 'cubic yards',\n        cost: excavationCost.totalCost,\n        unitPrice: excavationCost.unitPrice\n      });\n\n      if (inputs.includeLabor) {\n        laborItems.push({\n          label: 'Excavation Labor',\n          amount: excavationCost.totalCost * 0.6 // 60% of excavation cost is typically labor\n        });\n      }\n    }\n\n    // Fill material costs\n    if (calculations.importFill > 0) {\n      const fillCost = calculateCost('earthwork', 'fill_material', calculations.fillVolumeCompacted, 'per_cubic_yard');\n      materials.push({\n        name: 'Engineered Fill Material',\n        quantity: calculations.fillVolumeCompacted,\n        unit: 'cubic yards',\n        cost: fillCost.totalCost,\n        unitPrice: fillCost.unitPrice\n      });\n    }\n\n    // Topsoil if requested\n    if (inputs.includeTopsoil) {\n      const topsoilVolume = calculations.area * (6 / 12) / 27; // 6\" of topsoil\n      const topsoilCost = calculateCost('earthwork', 'topsoil', topsoilVolume, 'per_cubic_yard');\n      materials.push({\n        name: 'Topsoil (6\" depth)',\n        quantity: topsoilVolume,\n        unit: 'cubic yards',\n        cost: topsoilCost.totalCost,\n        unitPrice: topsoilCost.unitPrice\n      });\n    }\n\n    // Trucking costs\n    if (trucking.totalLoads > 0) {\n      let truckingCost;\n      if (inputs.haulDistance <= 10) {\n        truckingCost = calculateCost('earthwork', 'trucking_10_miles', trucking.totalLoads, 'per_cubic_yard');\n      } else {\n        const baseCost = calculateCost('earthwork', 'trucking_10_miles', trucking.totalLoads, 'per_cubic_yard');\n        const extraMiles = inputs.haulDistance - 10;\n        const extraCost = calculateCost('earthwork', 'trucking_per_mile', trucking.totalLoads * extraMiles, 'per_cubic_yard_mile');\n        truckingCost = {\n          totalCost: baseCost.totalCost + extraCost.totalCost,\n          unitPrice: (baseCost.totalCost + extraCost.totalCost) / trucking.totalLoads\n        };\n      }\n\n      materials.push({\n        name: `Trucking (${inputs.haulDistance} miles)`,\n        quantity: trucking.totalLoads,\n        unit: 'loads',\n        cost: truckingCost.totalCost,\n        unitPrice: truckingCost.unitPrice\n      });\n    }\n\n    // Compaction costs\n    if (inputs.includeCompaction && calculations.fillVolume > 0) {\n      const compactionCost = calculateCost('earthwork', 'compaction', calculations.fillVolume, 'per_cubic_yard');\n      materials.push({\n        name: 'Mechanical Compaction',\n        quantity: calculations.fillVolume,\n        unit: 'cubic yards',\n        cost: compactionCost.totalCost,\n        unitPrice: compactionCost.unitPrice\n      });\n\n      if (inputs.includeLabor) {\n        laborItems.push({\n          label: 'Compaction Labor',\n          amount: compactionCost.totalCost * 0.8 // 80% of compaction cost is typically labor/equipment\n        });\n      }\n    }\n\n    const materialsCost = materials.reduce((sum, material) => sum + material.cost, 0);\n    laborCost = laborItems.reduce((sum, item) => sum + item.amount, 0);\n\n    const subtotal = materialsCost + laborCost;\n    const overhead = subtotal * 0.15; // 15% overhead\n    const profit = subtotal * 0.10; // 10% profit\n    const total = subtotal + overhead + profit;\n\n    const costItems = [\n      { label: 'Materials & Equipment', amount: materialsCost }\n    ];\n\n    if (inputs.includeLabor) {\n      costItems.push({ label: 'Labor', amount: laborCost });\n    }\n\n    costItems.push(\n      { label: 'Overhead (15%)', amount: overhead },\n      { label: 'Profit (10%)', amount: profit }\n    );\n\n    return {\n      materials: materialsCost,\n      labor: laborCost,\n      subtotal,\n      overhead,\n      profit,\n      total,\n      items: costItems,\n      materialsList: materials\n    };\n  }\n\n  formatCalculationsForDisplay(calculations) {\n    return {\n      'Project Area': `${formatNumber(calculations.area)} sq ft`,\n      'Cut Volume': `${formatNumber(calculations.cutVolume, 1)} cubic yards`,\n      'Fill Volume': `${formatNumber(calculations.fillVolume, 1)} cubic yards`,\n      'Net Cut/Fill': `${formatNumber(Math.abs(calculations.netCutFill), 1)} CY ${calculations.netCutFill >= 0 ? 'excess' : 'import'}`,\n      'Loose Volume (Cut)': `${formatNumber(calculations.cutVolumeLoose, 1)} cubic yards`\n    };\n  }\n\n  formatTruckingForDisplay(trucking) {\n    return {\n      'Total Truck Loads': `${trucking.totalLoads} loads`,\n      'Total Miles': `${formatNumber(trucking.totalMiles)} miles`,\n      'Estimated Hours': `${formatNumber(trucking.totalHours, 1)} hours`,\n      'Truck Capacity': `${trucking.truckCapacity} cubic yards`\n    };\n  }\n\n  formatCostsForDisplay(costs) {\n    return {\n      items: costs.items.map(item => ({\n        label: item.label,\n        amount: item.amount\n      })),\n      total: costs.total\n    };\n  }\n\n  getExportData() {\n    if (!this.results) {\n      throw new Error('No calculation results available for export');\n    }\n\n    const { calculations, trucking, costs } = this.results;\n\n    const table = [\n      ['Earthwork Calculator Results'],\n      ['Generated:', new Date().toLocaleDateString()],\n      [''],\n      ['PROJECT CALCULATIONS'],\n      ['Metric', 'Value'],\n      ['Project Area', `${formatNumber(calculations.area)} sq ft`],\n      ['Cut Volume', `${formatNumber(calculations.cutVolume, 1)} cubic yards`],\n      ['Fill Volume', `${formatNumber(calculations.fillVolume, 1)} cubic yards`],\n      ['Net Cut/Fill', `${formatNumber(Math.abs(calculations.netCutFill), 1)} CY ${calculations.netCutFill >= 0 ? 'excess' : 'import'}`],\n      [''],\n      ['TRUCKING ANALYSIS'],\n      ['Total Loads', `${trucking.totalLoads} loads`],\n      ['Total Miles', `${formatNumber(trucking.totalMiles)} miles`],\n      ['Estimated Hours', `${formatNumber(trucking.totalHours, 1)} hours`],\n      [''],\n      ['MATERIALS'],\n      ['Item', 'Quantity', 'Unit', 'Unit Price', 'Total Cost'],\n      ...costs.materialsList.map(m => [\n        m.name,\n        formatNumber(m.quantity, 1),\n        m.unit,\n        formatCurrency(m.unitPrice),\n        formatCurrency(m.cost)\n      ]),\n      [''],\n      ['COST BREAKDOWN'],\n      ['Category', 'Amount'],\n      ...costs.items.map(item => [item.label, formatCurrency(item.amount)]),\n      [''],\n      ['TOTAL PROJECT COST', formatCurrency(costs.total)]\n    ];\n\n    return {\n      table,\n      title: 'Earthwork Calculator Results'\n    };\n  }\n\n  getEmailData() {\n    if (!this.results) {\n      throw new Error('No calculation results available for email');\n    }\n\n    const subject = 'Earthwork Calculator Results';\n    const body = `Earthwork Calculator Results\n\nProject Summary:\n- Project Area: ${formatNumber(this.results.calculations.area)} sq ft\n- Cut Volume: ${formatNumber(this.results.calculations.cutVolume, 1)} cubic yards\n- Fill Volume: ${formatNumber(this.results.calculations.fillVolume, 1)} cubic yards\n- Total Cost: ${formatCurrency(this.results.costs.total)}\n\nGenerated by CostFlowAI Calculator\n${window.location.href}`;\n\n    return { subject, body };\n  }\n\n  getState() {\n    return {\n      inputs: this.state.inputs,\n      results: this.results,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  loadSavedState() {\n    const saved = loadState(this.name);\n    if (saved && saved.inputs) {\n      this.state.inputs = saved.inputs;\n      this.populateForm(saved.inputs);\n    }\n  }\n\n  saveCurrentState() {\n    this.state.results = this.results;\n    saveState(this.name, this.state);\n  }\n\n  populateForm(inputs) {\n    if (!this.form) return;\n\n    Object.entries(inputs).forEach(([key, value]) => {\n      const input = this.form.querySelector(`[name=\"${key}\"], #${key}`);\n      if (input) {\n        input.value = value;\n      }\n    });\n  }\n\n  getInitialState() {\n    return {\n      inputs: {\n        length: '',\n        width: '',\n        cutDepth: '0',\n        fillDepth: '0',\n        haulDistance: '5',\n        truckCapacity: '12',\n        soilType: 'mixed',\n        includeLabor: 'yes'\n      },\n      results: null\n    };\n  }\n\n  setupEventListeners() {\n    bus.on(EVENTS.PRICING_UPDATED, () => {\n      console.log('Pricing data updated');\n    });\n\n    bus.on(EVENTS.FORM_CHANGED, (data) => {\n      if (data.form === 'earthwork-calculator-form') {\n        this.state.inputs[data.field] = data.value;\n      }\n    });\n  }\n}\n\n// Legacy API for compatibility\nexport function init(el) {\n  const calculator = new EarthworkCalculator();\n  calculator.init().then(success => {\n    if (success) {\n      console.log('Earthwork calculator initialized');\n    }\n  });\n}\n\nexport function compute(state) {\n  // ROM calculation for testing: 100 CY @ 10 mi → trucks > 0\n  const cutVolume = parseFloat(state.cutVolume) || 0;\n  const truckCapacity = parseFloat(state.truckCapacity) || 12;\n  const haulDistance = parseFloat(state.haulDistance) || 10;\n\n  if (cutVolume > 0) {\n    const trucksNeeded = Math.ceil(cutVolume / truckCapacity);\n    return {\n      ok: true,\n      trucksNeeded,\n      message: `${trucksNeeded} truck loads needed for ${cutVolume} CY at ${haulDistance} miles`\n    };\n  }\n\n  return { ok: false, msg: \"No cut volume specified\" };\n}\n\nexport function explain(state) {\n  return \"Professional earthwork calculator for cut/fill analysis, trucking requirements, and cost estimation with soil type adjustments and haul distance calculations.\";\n}\n\nexport function meta() {\n  return {\n    id: \"earthwork\",\n    title: \"Earthwork Calculator\",\n    category: \"sitework\",\n    description: \"Calculate cut/fill volumes, truck loads, haul distances, and earthwork costs\",\n    features: [\n      \"Cut and fill volume calculations\",\n      \"Soil type adjustments (swell/shrinkage)\",\n      \"Trucking analysis with haul distances\",\n      \"Labor and equipment cost estimation\",\n      \"Export to CSV/Excel/PDF\",\n      \"Compaction and topsoil options\"\n    ]\n  };\n}\n\n// Initialize calculator when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n  const calculator = new EarthworkCalculator();\n  const initialized = await calculator.init();\n\n  if (initialized) {\n    console.log('Earthwork Calculator initialized successfully');\n    window.earthworkCalculator = calculator;\n  } else {\n    console.error('Failed to initialize Earthwork Calculator');\n  }\n});\n\nexport { EarthworkCalculator };","size_bytes":17678},"assets/js/calculators/electrical.js":{"content":"// Professional Electrical Calculator\n// Comprehensive electrical materials calculation with NEC standards\n\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('electrical') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Professional Electrical Calculator</h2>\n        <p>Calculate electrical materials including wire, conduit, panels, and devices with NEC compliance</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Project Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"building-sqft\">Building Area (sq ft)</label>\n            <input type=\"number\" id=\"building-sqft\" step=\"1\" min=\"0\" value=\"${savedState.buildingSqft || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"voltage-system\">Voltage System</label>\n            <select id=\"voltage-system\">\n              <option value=\"120/240-1ph\" ${savedState.voltageSystem === '120/240-1ph' ? 'selected' : ''}>120/240V Single Phase</option>\n              <option value=\"120/208-3ph\" ${savedState.voltageSystem === '120/208-3ph' ? 'selected' : ''}>120/208V Three Phase</option>\n              <option value=\"277/480-3ph\" ${savedState.voltageSystem === '277/480-3ph' ? 'selected' : ''}>277/480V Three Phase</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"panel-count\">Number of Panels</label>\n            <input type=\"number\" id=\"panel-count\" min=\"1\" value=\"${savedState.panelCount || '1'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"occupancy-type\">Occupancy Type</label>\n            <select id=\"occupancy-type\">\n              <option value=\"residential\" ${savedState.occupancyType === 'residential' ? 'selected' : ''}>Residential</option>\n              <option value=\"office\" ${savedState.occupancyType === 'office' ? 'selected' : ''}>Office/Commercial</option>\n              <option value=\"retail\" ${savedState.occupancyType === 'retail' ? 'selected' : ''}>Retail</option>\n              <option value=\"warehouse\" ${savedState.occupancyType === 'warehouse' ? 'selected' : ''}>Warehouse/Industrial</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Load Calculations</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"general-lighting\">General Lighting Load (W/sq ft)</label>\n            <input type=\"number\" id=\"general-lighting\" step=\"0.1\" min=\"0\" value=\"${savedState.generalLighting || ''}\" />\n            <small>NEC Table 220.12 - Auto-populated based on occupancy</small>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"receptacle-load\">Receptacle Load (W/sq ft)</label>\n            <input type=\"number\" id=\"receptacle-load\" step=\"0.1\" min=\"0\" value=\"${savedState.receptacleLoad || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"hvac-load\">HVAC Load (kW)</label>\n            <input type=\"number\" id=\"hvac-load\" step=\"0.1\" min=\"0\" value=\"${savedState.hvacLoad || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"motor-load\">Motor Load (HP)</label>\n            <input type=\"number\" id=\"motor-load\" step=\"0.5\" min=\"0\" value=\"${savedState.motorLoad || '0'}\" />\n          </div>\n        </div>\n\n        <h3>Distribution System</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"main-panel-size\">Main Panel Size (Amps)</label>\n            <select id=\"main-panel-size\">\n              <option value=\"100\" ${savedState.mainPanelSize === '100' ? 'selected' : ''}>100A</option>\n              <option value=\"200\" ${savedState.mainPanelSize === '200' ? 'selected' : ''}>200A</option>\n              <option value=\"400\" ${savedState.mainPanelSize === '400' ? 'selected' : ''}>400A</option>\n              <option value=\"600\" ${savedState.mainPanelSize === '600' ? 'selected' : ''}>600A</option>\n              <option value=\"800\" ${savedState.mainPanelSize === '800' ? 'selected' : ''}>800A</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"sub-panel-size\">Sub Panel Size (Amps)</label>\n            <select id=\"sub-panel-size\">\n              <option value=\"0\" ${savedState.subPanelSize === '0' ? 'selected' : ''}>None</option>\n              <option value=\"100\" ${savedState.subPanelSize === '100' ? 'selected' : ''}>100A</option>\n              <option value=\"200\" ${savedState.subPanelSize === '200' ? 'selected' : ''}>200A</option>\n              <option value=\"400\" ${savedState.subPanelSize === '400' ? 'selected' : ''}>400A</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"feeder-length\">Main Feeder Length (ft)</label>\n            <input type=\"number\" id=\"feeder-length\" step=\"1\" min=\"0\" value=\"${savedState.feederLength || '50'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"branch-circuits\">Branch Circuits (qty)</label>\n            <input type=\"number\" id=\"branch-circuits\" min=\"1\" value=\"${savedState.branchCircuits || ''}\" />\n          </div>\n        </div>\n\n        <h3>Wiring & Conduit</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"conduit-type\">Conduit Type</label>\n            <select id=\"conduit-type\">\n              <option value=\"emt\" ${savedState.conduitType === 'emt' ? 'selected' : ''}>EMT (Steel)</option>\n              <option value=\"pvc\" ${savedState.conduitType === 'pvc' ? 'selected' : ''}>PVC Schedule 40</option>\n              <option value=\"rigid\" ${savedState.conduitType === 'rigid' ? 'selected' : ''}>Rigid Steel</option>\n              <option value=\"mc-cable\" ${savedState.conduitType === 'mc-cable' ? 'selected' : ''}>MC Cable</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"wire-type\">Wire Type</label>\n            <select id=\"wire-type\">\n              <option value=\"thhn\" ${savedState.wireType === 'thhn' ? 'selected' : ''}>THHN/THWN Copper</option>\n              <option value=\"thhn-al\" ${savedState.wireType === 'thhn-al' ? 'selected' : ''}>THHN/THWN Aluminum</option>\n              <option value=\"romex\" ${savedState.wireType === 'romex' ? 'selected' : ''}>Romex NM-B</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"conduit-length\">Total Conduit Length (ft)</label>\n            <input type=\"number\" id=\"conduit-length\" step=\"1\" min=\"0\" value=\"${savedState.conduitLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"wire-derating\">Derating Factor</label>\n            <select id=\"wire-derating\">\n              <option value=\"1.0\" ${savedState.wireDerating === '1.0' ? 'selected' : ''}>No derating</option>\n              <option value=\"0.8\" ${savedState.wireDerating === '0.8' ? 'selected' : ''}>4-6 conductors (80%)</option>\n              <option value=\"0.7\" ${savedState.wireDerating === '0.7' ? 'selected' : ''}>7-9 conductors (70%)</option>\n              <option value=\"0.5\" ${savedState.wireDerating === '0.5' ? 'selected' : ''}>10+ conductors (50%)</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Devices & Fixtures</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"outlets-count\">Duplex Outlets</label>\n            <input type=\"number\" id=\"outlets-count\" min=\"0\" value=\"${savedState.outletsCount || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"switches-count\">Light Switches</label>\n            <input type=\"number\" id=\"switches-count\" min=\"0\" value=\"${savedState.switchesCount || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"gfci-count\">GFCI Outlets</label>\n            <input type=\"number\" id=\"gfci-count\" min=\"0\" value=\"${savedState.gfciCount || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"fixture-count\">Light Fixtures</label>\n            <input type=\"number\" id=\"fixture-count\" min=\"0\" value=\"${savedState.fixtureCount || ''}\" />\n          </div>\n        </div>\n\n        <h3>Regional Pricing</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"region\">Region</label>\n            <select id=\"region\">\n              <option value=\"southeast\" ${savedState.region === 'southeast' ? 'selected' : ''}>Southeast US</option>\n              <option value=\"northeast\" ${savedState.region === 'northeast' ? 'selected' : ''}>Northeast US</option>\n              <option value=\"midwest\" ${savedState.region === 'midwest' ? 'selected' : ''}>Midwest US</option>\n              <option value=\"southwest\" ${savedState.region === 'southwest' ? 'selected' : ''}>Southwest US</option>\n              <option value=\"west\" ${savedState.region === 'west' ? 'selected' : ''}>West Coast</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"include-labor\">Include Labor Costs</label>\n            <select id=\"include-labor\">\n              <option value=\"no\" ${savedState.includeLabor === 'no' ? 'selected' : ''}>Materials Only</option>\n              <option value=\"yes\" ${savedState.includeLabor === 'yes' ? 'selected' : ''}>Materials + Labor</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\">Calculate Electrical Materials</button>\n        <button id=\"reset-btn\" class=\"btn-secondary\">Reset Form</button>\n      </div>\n\n      <div id=\"results\" class=\"results-section\" style=\"display: none;\">\n        <h3>Electrical Materials Calculation</h3>\n        <div id=\"results-content\"></div>\n        \n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <button id=\"export-csv\" class=\"btn-secondary\">Export CSV</button>\n          <button id=\"export-xlsx\" class=\"btn-secondary\">Export Excel</button>\n          <button id=\"export-pdf\" class=\"btn-secondary\">Export PDF</button>\n        </div>\n      </div>\n\n      <div id=\"explanation\" class=\"explanation-section\" style=\"display: none;\">\n        <h3>Calculation Methodology</h3>\n        <div id=\"explanation-content\"></div>\n      </div>\n    </div>\n  `;\n\n  // Initialize calculator\n  setupEventListeners();\n  \n  // Auto-populate lighting loads based on occupancy type\n  updateLightingLoads();\n}\n\nfunction setupEventListeners() {\n  const calculateBtn = document.getElementById('calculate-btn');\n  const resetBtn = document.getElementById('reset-btn');\n  \n  calculateBtn.addEventListener('click', calculateElectrical);\n  resetBtn.addEventListener('click', resetForm);\n  \n  // Auto-save form data\n  const inputs = document.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    input.addEventListener('change', saveFormState);\n  });\n  \n  // Export handlers\n  document.getElementById('export-csv').addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx').addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf').addEventListener('click', () => exportResults('pdf'));\n  \n  // Update lighting loads when occupancy type changes\n  document.getElementById('occupancy-type').addEventListener('change', updateLightingLoads);\n  \n  // Auto-calculate branch circuits based on sq ft\n  document.getElementById('building-sqft').addEventListener('input', updateBranchCircuits);\n}\n\nfunction updateLightingLoads() {\n  const occupancyType = document.getElementById('occupancy-type').value;\n  const generalLighting = document.getElementById('general-lighting');\n  const receptacleLoad = document.getElementById('receptacle-load');\n  \n  // NEC Table 220.12 lighting unit loads\n  const lightingLoads = {\n    'residential': { lighting: 3.0, receptacle: 3.0 },\n    'office': { lighting: 3.5, receptacle: 1.0 },\n    'retail': { lighting: 3.0, receptacle: 1.0 },\n    'warehouse': { lighting: 0.25, receptacle: 1.0 }\n  };\n  \n  const loads = lightingLoads[occupancyType] || lightingLoads['office'];\n  generalLighting.value = loads.lighting;\n  receptacleLoad.value = loads.receptacle;\n}\n\nfunction updateBranchCircuits() {\n  const sqft = parseFloat(document.getElementById('building-sqft').value) || 0;\n  const branchCircuitsInput = document.getElementById('branch-circuits');\n  \n  if (sqft > 0 && !branchCircuitsInput.value) {\n    // Estimate 1 circuit per 500 sq ft for general purpose outlets\n    const estimatedCircuits = Math.ceil(sqft / 500);\n    branchCircuitsInput.value = Math.max(estimatedCircuits, 4); // Minimum 4 circuits\n  }\n}\n\nfunction calculateElectrical() {\n  const data = collectFormData();\n  const validation = validateInputs(data);\n  \n  if (!validation.isValid) {\n    alert('Please fix the following errors:\\n' + validation.errors.join('\\n'));\n    return;\n  }\n  \n  const results = compute(data);\n  displayResults(results);\n  displayExplanation(results, data);\n  \n  document.getElementById('results').style.display = 'block';\n  document.getElementById('explanation').style.display = 'block';\n  \n  // Emit calculator usage event for analytics\n  document.dispatchEvent(new CustomEvent('calculator:used', {\n    detail: {\n      type: 'electrical',\n      sqft: data.buildingSqft,\n      panelSize: data.mainPanelSize\n    }\n  }));\n}\n\nfunction collectFormData() {\n  return {\n    buildingSqft: parseFloat(document.getElementById('building-sqft').value) || 0,\n    voltageSystem: document.getElementById('voltage-system').value,\n    panelCount: parseInt(document.getElementById('panel-count').value) || 1,\n    occupancyType: document.getElementById('occupancy-type').value,\n    generalLighting: parseFloat(document.getElementById('general-lighting').value) || 0,\n    receptacleLoad: parseFloat(document.getElementById('receptacle-load').value) || 0,\n    hvacLoad: parseFloat(document.getElementById('hvac-load').value) || 0,\n    motorLoad: parseFloat(document.getElementById('motor-load').value) || 0,\n    mainPanelSize: parseInt(document.getElementById('main-panel-size').value) || 200,\n    subPanelSize: parseInt(document.getElementById('sub-panel-size').value) || 0,\n    feederLength: parseFloat(document.getElementById('feeder-length').value) || 50,\n    branchCircuits: parseInt(document.getElementById('branch-circuits').value) || 0,\n    conduitType: document.getElementById('conduit-type').value,\n    wireType: document.getElementById('wire-type').value,\n    conduitLength: parseFloat(document.getElementById('conduit-length').value) || 0,\n    wireDerating: parseFloat(document.getElementById('wire-derating').value) || 1.0,\n    outletsCount: parseInt(document.getElementById('outlets-count').value) || 0,\n    switchesCount: parseInt(document.getElementById('switches-count').value) || 0,\n    gfciCount: parseInt(document.getElementById('gfci-count').value) || 0,\n    fixtureCount: parseInt(document.getElementById('fixture-count').value) || 0,\n    region: document.getElementById('region').value,\n    includeLabor: document.getElementById('include-labor').value === 'yes'\n  };\n}\n\nfunction validateInputs(data) {\n  const errors = [];\n  \n  if (data.buildingSqft <= 0) errors.push('Building area must be greater than 0');\n  if (data.buildingSqft > 1000000) errors.push('Building area seems too large (max 1,000,000 sq ft)');\n  if (data.branchCircuits <= 0) errors.push('Must have at least 1 branch circuit');\n  \n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n}\n\nexport function compute(data) {\n  // Load calculations (NEC Article 220)\n  const lightingLoad = data.buildingSqft * data.generalLighting; // Watts\n  const receptacleLoad = data.buildingSqft * data.receptacleLoad; // Watts\n  const hvacLoadW = data.hvacLoad * 1000; // Convert kW to W\n  const motorLoadW = data.motorLoad * 746; // Convert HP to W (1 HP = 746 W)\n  \n  const totalConnectedLoad = lightingLoad + receptacleLoad + hvacLoadW + motorLoadW;\n  \n  // Apply NEC demand factors (simplified)\n  const lightingDemand = lightingLoad * 1.0; // 100% for first 3000W, then reduced\n  const receptacleDemand = receptacleLoad * 1.0;\n  const hvacDemand = hvacLoadW * 1.25; // 125% for continuous loads\n  const motorDemand = motorLoadW * 1.25; // 125% for motor loads\n  \n  const totalDemandLoad = lightingDemand + receptacleDemand + hvacDemand + motorDemand;\n  \n  // Determine voltage for calculations\n  const voltage = getSystemVoltage(data.voltageSystem);\n  const calculatedAmps = totalDemandLoad / voltage / Math.sqrt(data.voltageSystem.includes('3ph') ? 3 : 1);\n  \n  // Wire sizing based on load and derating\n  const adjustedAmps = calculatedAmps / data.wireDerating;\n  const feederWireSize = getWireSize(adjustedAmps, data.wireType);\n  const branchWireSize = getWireSize(20, data.wireType); // Assume 20A branch circuits\n  \n  // Conduit sizing\n  const feederConduitSize = getConduitSize(feederWireSize, 4); // 4 conductors (3ph + N or 2 hot + N + G)\n  const branchConduitSize = getConduitSize(branchWireSize, 3); // 3 conductors (hot, neutral, ground)\n  \n  // Material quantities\n  const feederWireLength = data.feederLength;\n  const branchWireLength = data.conduitLength;\n  const totalWire12AWG = data.branchCircuits * (branchWireLength * 3); // 3 conductors per circuit\n  const totalConduitEMT = data.conduitLength + data.feederLength;\n  \n  // Panel and device calculations\n  const mainPanelSpaces = getPanelSpaces(data.mainPanelSize);\n  const subPanelSpaces = data.subPanelSize > 0 ? getPanelSpaces(data.subPanelSize) : 0;\n  \n  // Regional pricing\n  const pricing = getRegionalPricing(data.region);\n  \n  // Cost calculations\n  const costs = {\n    mainPanel: pricing.panels[data.mainPanelSize] || 0,\n    subPanel: data.subPanelSize > 0 ? (pricing.panels[data.subPanelSize] || 0) : 0,\n    feederWire: getWireCost(feederWireSize, feederWireLength * 4, data.wireType, pricing), // 4 conductors\n    branchWire: (totalWire12AWG / 1000) * pricing.wire['12AWG'][data.wireType], // Per 1000ft\n    conduit: (totalConduitEMT / 10) * pricing.conduit[data.conduitType]['3/4'], // Per 10ft stick\n    breakers: data.branchCircuits * pricing.breaker20A,\n    outlets: data.outletsCount * pricing.duplexOutlet,\n    switches: data.switchesCount * pricing.lightSwitch,\n    gfci: data.gfciCount * pricing.gfciOutlet,\n    fixtures: data.fixtureCount * pricing.lightFixture,\n    fittings: totalConduitEMT * 0.5 * pricing.conduitFittings // Estimate 0.5 fittings per foot\n  };\n  \n  const materialCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n  const laborCost = data.includeLabor ? materialCost * pricing.laborMultiplier : 0;\n  const totalCost = materialCost + laborCost;\n  \n  return {\n    // Load Analysis\n    loads: {\n      lighting: lightingLoad,\n      receptacle: receptacleLoad,\n      hvac: hvacLoadW,\n      motor: motorLoadW,\n      totalConnected: totalConnectedLoad,\n      totalDemand: totalDemandLoad\n    },\n    \n    // Electrical Sizing\n    calculatedAmps: parseFloat(calculatedAmps.toFixed(1)),\n    adjustedAmps: parseFloat(adjustedAmps.toFixed(1)),\n    feederWireSize: feederWireSize,\n    branchWireSize: branchWireSize,\n    feederConduitSize: feederConduitSize,\n    branchConduitSize: branchConduitSize,\n    \n    // Material Quantities\n    quantities: {\n      mainPanelSpaces: mainPanelSpaces,\n      subPanelSpaces: subPanelSpaces,\n      feederWireFeet: feederWireLength * 4,\n      branchWireFeet: totalWire12AWG,\n      conduitFeet: totalConduitEMT,\n      breakers: data.branchCircuits,\n      outlets: data.outletsCount,\n      switches: data.switchesCount,\n      gfci: data.gfciCount,\n      fixtures: data.fixtureCount\n    },\n    \n    // Costs\n    costs: costs,\n    materialCost: materialCost,\n    laborCost: laborCost,\n    totalCost: totalCost,\n    \n    pricing: pricing\n  };\n}\n\nfunction getSystemVoltage(system) {\n  const voltages = {\n    '120/240-1ph': 240,\n    '120/208-3ph': 208,\n    '277/480-3ph': 480\n  };\n  return voltages[system] || 240;\n}\n\nfunction getWireSize(amps, wireType) {\n  // Simplified wire sizing based on ampacity (NEC Table 310.15(B)(16))\n  const copperAmps = [\n    { size: '14AWG', amps: 20 },\n    { size: '12AWG', amps: 25 },\n    { size: '10AWG', amps: 35 },\n    { size: '8AWG', amps: 50 },\n    { size: '6AWG', amps: 65 },\n    { size: '4AWG', amps: 85 },\n    { size: '2AWG', amps: 115 },\n    { size: '1AWG', amps: 130 },\n    { size: '1/0AWG', amps: 150 },\n    { size: '2/0AWG', amps: 175 },\n    { size: '3/0AWG', amps: 200 },\n    { size: '4/0AWG', amps: 230 }\n  ];\n  \n  for (let wire of copperAmps) {\n    if (wire.amps >= amps) {\n      return wire.size;\n    }\n  }\n  return '4/0AWG'; // Default to largest\n}\n\nfunction getConduitSize(wireSize, conductorCount) {\n  // Simplified conduit fill calculations (NEC Chapter 9)\n  const conduitSizes = ['1/2\"', '3/4\"', '1\"', '1-1/4\"', '1-1/2\"', '2\"'];\n  \n  // Basic sizing - would need full NEC tables for precision\n  if (wireSize.includes('14') || wireSize.includes('12')) return '1/2\"';\n  if (wireSize.includes('10') || wireSize.includes('8')) return '3/4\"';\n  if (wireSize.includes('6') || wireSize.includes('4')) return '1\"';\n  if (wireSize.includes('2') || wireSize.includes('1')) return '1-1/4\"';\n  return '1-1/2\"';\n}\n\nfunction getPanelSpaces(amperage) {\n  const panelSpaces = {\n    100: 20,\n    200: 40,\n    400: 42,\n    600: 42,\n    800: 42\n  };\n  return panelSpaces[amperage] || 20;\n}\n\nfunction getWireCost(wireSize, totalFeet, wireType, pricing) {\n  const priceKey = wireSize.replace('AWG', 'AWG');\n  const basePrice = pricing.wire[priceKey] ? pricing.wire[priceKey][wireType] : pricing.wire['12AWG'][wireType];\n  return (totalFeet / 1000) * basePrice; // Price per 1000ft\n}\n\nfunction getRegionalPricing(region) {\n  const basePricing = {\n    'southeast': {\n      panels: { 100: 180, 200: 320, 400: 850, 600: 1200, 800: 1500 },\n      wire: {\n        '14AWG': { 'thhn': 85, 'thhn-al': 45, 'romex': 120 },\n        '12AWG': { 'thhn': 125, 'thhn-al': 65, 'romex': 165 },\n        '10AWG': { 'thhn': 185, 'thhn-al': 95, 'romex': 245 },\n        '8AWG': { 'thhn': 285, 'thhn-al': 145, 'romex': 385 },\n        '6AWG': { 'thhn': 445, 'thhn-al': 225, 'romex': 0 },\n        '4AWG': { 'thhn': 685, 'thhn-al': 345, 'romex': 0 },\n        '2AWG': { 'thhn': 1085, 'thhn-al': 545, 'romex': 0 },\n        '1AWG': { 'thhn': 1385, 'thhn-al': 695, 'romex': 0 }\n      },\n      conduit: {\n        'emt': { '1/2': 18, '3/4': 22, '1': 32, '1-1/4': 45, '1-1/2': 58 },\n        'pvc': { '1/2': 8, '3/4': 12, '1': 18, '1-1/4': 28, '1-1/2': 35 },\n        'rigid': { '1/2': 35, '3/4': 45, '1': 65, '1-1/4': 85, '1-1/2': 105 }\n      },\n      breaker20A: 25,\n      duplexOutlet: 3.50,\n      lightSwitch: 2.80,\n      gfciOutlet: 18,\n      lightFixture: 45,\n      conduitFittings: 4.50,\n      laborMultiplier: 2.5\n    },\n    'northeast': {\n      panels: { 100: 220, 200: 380, 400: 950, 600: 1350, 800: 1680 },\n      wire: {\n        '14AWG': { 'thhn': 95, 'thhn-al': 55, 'romex': 135 },\n        '12AWG': { 'thhn': 140, 'thhn-al': 75, 'romex': 185 },\n        '10AWG': { 'thhn': 205, 'thhn-al': 110, 'romex': 275 },\n        '8AWG': { 'thhn': 315, 'thhn-al': 165, 'romex': 425 },\n        '6AWG': { 'thhn': 485, 'thhn-al': 255, 'romex': 0 },\n        '4AWG': { 'thhn': 745, 'thhn-al': 385, 'romex': 0 },\n        '2AWG': { 'thhn': 1185, 'thhn-al': 615, 'romex': 0 },\n        '1AWG': { 'thhn': 1525, 'thhn-al': 785, 'romex': 0 }\n      },\n      conduit: {\n        'emt': { '1/2': 20, '3/4': 25, '1': 36, '1-1/4': 52, '1-1/2': 68 },\n        'pvc': { '1/2': 10, '3/4': 14, '1': 22, '1-1/4': 32, '1-1/2': 42 },\n        'rigid': { '1/2': 42, '3/4': 52, '1': 75, '1-1/4': 95, '1-1/2': 125 }\n      },\n      breaker20A: 28,\n      duplexOutlet: 4.20,\n      lightSwitch: 3.50,\n      gfciOutlet: 22,\n      lightFixture: 55,\n      conduitFittings: 5.50,\n      laborMultiplier: 3.2\n    }\n  };\n  \n  // Use southeast as default if region not found\n  return basePricing[region] || basePricing['southeast'];\n}\n\nfunction displayResults(results) {\n  const content = document.getElementById('results-content');\n  \n  content.innerHTML = `\n    <div class=\"results-grid\">\n      <div class=\"result-section\">\n        <h4>Load Analysis</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Connected Load:</span>\n          <span class=\"value\">${formatNumber(results.loads.totalConnected / 1000, 1)} kW</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Demand Load:</span>\n          <span class=\"value\">${formatNumber(results.loads.totalDemand / 1000, 1)} kW</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Calculated Current:</span>\n          <span class=\"value\">${results.calculatedAmps} Amps</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Adjusted Current:</span>\n          <span class=\"value\">${results.adjustedAmps} Amps (after derating)</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Electrical Distribution</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Main Panel:</span>\n          <span class=\"value\">${results.quantities.mainPanelSpaces} spaces</span>\n        </div>\n        ${results.quantities.subPanelSpaces > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Sub Panel:</span>\n          <span class=\"value\">${results.quantities.subPanelSpaces} spaces</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item\">\n          <span class=\"label\">Feeder Wire Size:</span>\n          <span class=\"value\">${results.feederWireSize}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Branch Wire Size:</span>\n          <span class=\"value\">${results.branchWireSize}</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Material Quantities</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Feeder Wire:</span>\n          <span class=\"value\">${formatNumber(results.quantities.feederWireFeet)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Branch Circuit Wire:</span>\n          <span class=\"value\">${formatNumber(results.quantities.branchWireFeet)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Conduit:</span>\n          <span class=\"value\">${formatNumber(results.quantities.conduitFeet)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Circuit Breakers:</span>\n          <span class=\"value\">${results.quantities.breakers} ea (20A)</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Devices & Fixtures</h4>\n        ${results.quantities.outlets > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Duplex Outlets:</span>\n          <span class=\"value\">${results.quantities.outlets} ea</span>\n        </div>\n        ` : ''}\n        ${results.quantities.switches > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Light Switches:</span>\n          <span class=\"value\">${results.quantities.switches} ea</span>\n        </div>\n        ` : ''}\n        ${results.quantities.gfci > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">GFCI Outlets:</span>\n          <span class=\"value\">${results.quantities.gfci} ea</span>\n        </div>\n        ` : ''}\n        ${results.quantities.fixtures > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Light Fixtures:</span>\n          <span class=\"value\">${results.quantities.fixtures} ea</span>\n        </div>\n        ` : ''}\n      </div>\n\n      <div class=\"result-section cost-summary\">\n        <h4>Cost Summary</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.materialCost)}</span>\n        </div>\n        ${results.laborCost > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Labor Cost:</span>\n          <span class=\"value\">${formatCurrency(results.laborCost)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item total\">\n          <span class=\"label\">Total Cost:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Cost per Sq Ft:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost / parseFloat(document.getElementById('building-sqft').value))}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function explain(data) {\n  const results = compute(data);\n  \n  return `\n    <div class=\"explanation-content\">\n      <h4>Electrical Load Calculation Methodology</h4>\n      \n      <h5>1. Connected Load Calculation (NEC Article 220)</h5>\n      <p>General Lighting: ${data.buildingSqft} sq ft × ${data.generalLighting} W/sq ft = ${formatNumber(results.loads.lighting)} W</p>\n      <p>Receptacles: ${data.buildingSqft} sq ft × ${data.receptacleLoad} W/sq ft = ${formatNumber(results.loads.receptacle)} W</p>\n      <p>HVAC Load: ${data.hvacLoad} kW × 1000 = ${formatNumber(results.loads.hvac)} W</p>\n      <p>Motor Load: ${data.motorLoad} HP × 746 W/HP = ${formatNumber(results.loads.motor)} W</p>\n      <p><strong>Total Connected Load: ${formatNumber(results.loads.totalConnected)} W</strong></p>\n      \n      <h5>2. Demand Load Calculation</h5>\n      <p>Applies NEC demand factors for continuous loads (125% for HVAC and motors)</p>\n      <p><strong>Total Demand Load: ${formatNumber(results.loads.totalDemand)} W (${formatNumber(results.loads.totalDemand/1000, 1)} kW)</strong></p>\n      \n      <h5>3. Current Calculation</h5>\n      <p>System Voltage: ${getSystemVoltage(data.voltageSystem)}V ${data.voltageSystem.includes('3ph') ? '(3-phase)' : '(1-phase)'}</p>\n      <p>Calculated Current: ${formatNumber(results.loads.totalDemand)} W ÷ ${getSystemVoltage(data.voltageSystem)}V ${data.voltageSystem.includes('3ph') ? '÷ √3' : ''} = ${results.calculatedAmps} A</p>\n      <p>Adjusted for Derating: ${results.calculatedAmps} A ÷ ${data.wireDerating} = ${results.adjustedAmps} A</p>\n      \n      <h5>4. Wire Sizing (NEC Table 310.15(B)(16))</h5>\n      <p>Feeder Wire: ${results.feederWireSize} (rated for ${results.adjustedAmps}A+)</p>\n      <p>Branch Circuits: ${results.branchWireSize} (20A circuits)</p>\n      \n      <h5>5. Conduit Sizing (NEC Chapter 9)</h5>\n      <p>Feeder Conduit: ${results.feederConduitSize} (based on ${results.feederWireSize} wire, 4 conductors)</p>\n      <p>Branch Conduit: ${results.branchConduitSize} (based on ${results.branchWireSize} wire, 3 conductors)</p>\n      \n      <div class=\"formula-note\">\n        <p><strong>NEC Standards Applied:</strong></p>\n        <ul>\n          <li>Article 220: Branch Circuit, Feeder, and Service Load Calculations</li>\n          <li>Table 220.12: General Lighting Loads by Occupancy</li>\n          <li>Table 310.15(B)(16): Allowable Ampacities of Insulated Conductors</li>\n          <li>Article 314: Outlet, Device, Pull, and Junction Boxes; Conduit Bodies; Fittings; and Handhole Enclosures</li>\n          <li>Chapter 9: Tables for conductor and conduit fill calculations</li>\n        </ul>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayExplanation(results, data) {\n  const content = document.getElementById('explanation-content');\n  content.innerHTML = explain(data);\n}\n\nfunction saveFormState() {\n  const formData = collectFormData();\n  saveState('electrical', formData);\n}\n\nfunction resetForm() {\n  document.querySelectorAll('input').forEach(input => {\n    input.value = '';\n  });\n  document.querySelectorAll('select').forEach(select => {\n    select.selectedIndex = 0;\n  });\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('explanation').style.display = 'none';\n  saveState('electrical', {});\n  updateLightingLoads(); // Restore default lighting loads\n}\n\nfunction exportResults(format) {\n  const data = collectFormData();\n  const results = compute(data);\n  \n  const exportData = {\n    'Project': 'Electrical Materials Calculation',\n    'Date': new Date().toLocaleDateString(),\n    'Building Area (sq ft)': data.buildingSqft,\n    'Total Demand Load (kW)': formatNumber(results.loads.totalDemand/1000, 1),\n    'Calculated Current (A)': results.calculatedAmps,\n    'Feeder Wire Size': results.feederWireSize,\n    'Branch Circuits': data.branchCircuits,\n    'Material Cost': formatCurrency(results.materialCost),\n    'Total Cost': formatCurrency(results.totalCost)\n  };\n  \n  const filename = `electrical-calculation-${new Date().toISOString().split('T')[0]}`;\n  \n  switch(format) {\n    case 'csv':\n      exportToCsv(exportData, filename);\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, filename);\n      break;\n    case 'pdf':\n      exportToPdf(exportData, filename, 'Electrical Materials Calculation');\n      break;\n  }\n}\n\nexport function meta() {\n  return {\n    id: \"electrical\",\n    title: \"Professional Electrical Calculator\",\n    category: \"mep\",\n    description: \"Calculate electrical materials including wire, conduit, panels, and devices with NEC compliance and load calculations\"\n  };\n}","size_bytes":33594},"assets/js/calculators/fees.js":{"content":"// Fees Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"fees\",\n    title: \"Fees Calculator\",\n    category: \"project\"\n  };\n}","size_bytes":351},"assets/js/calculators/firestop.js":{"content":"// Firestop Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"firestop\",\n    title: \"Firestop Calculator\",\n    category: \"safety\"\n  };\n}","size_bytes":362},"assets/js/calculators/flooring.js":{"content":"// Professional Flooring Calculator\n// Comprehensive flooring materials calculation with waste factors and installation requirements\n\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('flooring') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Professional Flooring Calculator</h2>\n        <p>Calculate flooring materials for tile, hardwood, carpet, vinyl, and other floor finishes with waste factors and installation requirements</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Room Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"room-length\">Room Length (ft)</label>\n            <input type=\"number\" id=\"room-length\" step=\"0.1\" min=\"0\" value=\"${savedState.roomLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"room-width\">Room Width (ft)</label>\n            <input type=\"number\" id=\"room-width\" step=\"0.1\" min=\"0\" value=\"${savedState.roomWidth || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"total-area\">Total Area (sq ft)</label>\n            <input type=\"number\" id=\"total-area\" step=\"0.1\" min=\"0\" value=\"${savedState.totalArea || ''}\" readonly />\n            <small>Auto-calculated from length × width</small>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"room-shape\">Room Shape</label>\n            <select id=\"room-shape\">\n              <option value=\"rectangle\" ${savedState.roomShape === 'rectangle' ? 'selected' : ''}>Rectangle</option>\n              <option value=\"l-shape\" ${savedState.roomShape === 'l-shape' ? 'selected' : ''}>L-Shape</option>\n              <option value=\"irregular\" ${savedState.roomShape === 'irregular' ? 'selected' : ''}>Irregular</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Flooring Type & Material</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"flooring-type\">Flooring Type</label>\n            <select id=\"flooring-type\">\n              <option value=\"tile\" ${savedState.flooringType === 'tile' ? 'selected' : ''}>Ceramic/Porcelain Tile</option>\n              <option value=\"hardwood\" ${savedState.flooringType === 'hardwood' ? 'selected' : ''}>Hardwood</option>\n              <option value=\"laminate\" ${savedState.flooringType === 'laminate' ? 'selected' : ''}>Laminate</option>\n              <option value=\"vinyl\" ${savedState.flooringType === 'vinyl' ? 'selected' : ''}>Vinyl/LVP</option>\n              <option value=\"carpet\" ${savedState.flooringType === 'carpet' ? 'selected' : ''}>Carpet</option>\n              <option value=\"bamboo\" ${savedState.flooringType === 'bamboo' ? 'selected' : ''}>Bamboo</option>\n              <option value=\"stone\" ${savedState.flooringType === 'stone' ? 'selected' : ''}>Natural Stone</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"material-grade\">Material Grade</label>\n            <select id=\"material-grade\">\n              <option value=\"economy\" ${savedState.materialGrade === 'economy' ? 'selected' : ''}>Economy</option>\n              <option value=\"standard\" ${savedState.materialGrade === 'standard' ? 'selected' : ''}>Standard</option>\n              <option value=\"premium\" ${savedState.materialGrade === 'premium' ? 'selected' : ''}>Premium</option>\n              <option value=\"luxury\" ${savedState.materialGrade === 'luxury' ? 'selected' : ''}>Luxury</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"material-size\">Material Size/Format</label>\n            <select id=\"material-size\">\n              <option value=\"12x12\" ${savedState.materialSize === '12x12' ? 'selected' : ''}>12\" × 12\"</option>\n              <option value=\"18x18\" ${savedState.materialSize === '18x18' ? 'selected' : ''}>18\" × 18\"</option>\n              <option value=\"24x24\" ${savedState.materialSize === '24x24' ? 'selected' : ''}>24\" × 24\"</option>\n              <option value=\"6x36\" ${savedState.materialSize === '6x36' ? 'selected' : ''}>6\" × 36\" (plank)</option>\n              <option value=\"8x48\" ${savedState.materialSize === '8x48' ? 'selected' : ''}>8\" × 48\" (plank)</option>\n              <option value=\"roll\" ${savedState.materialSize === 'roll' ? 'selected' : ''}>Roll goods</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"pattern-layout\">Pattern/Layout</label>\n            <select id=\"pattern-layout\">\n              <option value=\"straight\" ${savedState.patternLayout === 'straight' ? 'selected' : ''}>Straight</option>\n              <option value=\"diagonal\" ${savedState.patternLayout === 'diagonal' ? 'selected' : ''}>Diagonal</option>\n              <option value=\"herringbone\" ${savedState.patternLayout === 'herringbone' ? 'selected' : ''}>Herringbone</option>\n              <option value=\"brick\" ${savedState.patternLayout === 'brick' ? 'selected' : ''}>Brick/Running</option>\n              <option value=\"basket-weave\" ${savedState.patternLayout === 'basket-weave' ? 'selected' : ''}>Basket Weave</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Installation Requirements</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"subfloor-prep\">Subfloor Preparation</label>\n            <select id=\"subfloor-prep\">\n              <option value=\"none\" ${savedState.subfloorPrep === 'none' ? 'selected' : ''}>None Required</option>\n              <option value=\"clean\" ${savedState.subfloorPrep === 'clean' ? 'selected' : ''}>Clean & Level</option>\n              <option value=\"underlayment\" ${savedState.subfloorPrep === 'underlayment' ? 'selected' : ''}>Underlayment Required</option>\n              <option value=\"self-leveling\" ${savedState.subfloorPrep === 'self-leveling' ? 'selected' : ''}>Self-Leveling Compound</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"adhesive-type\">Adhesive/Installation</label>\n            <select id=\"adhesive-type\">\n              <option value=\"none\" ${savedState.adhesiveType === 'none' ? 'selected' : ''}>Floating/Click-Lock</option>\n              <option value=\"glue-down\" ${savedState.adhesiveType === 'glue-down' ? 'selected' : ''}>Glue Down</option>\n              <option value=\"nail-down\" ${savedState.adhesiveType === 'nail-down' ? 'selected' : ''}>Nail Down</option>\n              <option value=\"mortar\" ${savedState.adhesiveType === 'mortar' ? 'selected' : ''}>Thinset Mortar</option>\n              <option value=\"mastic\" ${savedState.adhesiveType === 'mastic' ? 'selected' : ''}>Tile Mastic</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"transition-strips\">Transition Strips (ft)</label>\n            <input type=\"number\" id=\"transition-strips\" step=\"0.1\" min=\"0\" value=\"${savedState.transitionStrips || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"baseboards\">Baseboards (ft)</label>\n            <input type=\"number\" id=\"baseboards\" step=\"0.1\" min=\"0\" value=\"${savedState.baseboards || ''}\" />\n          </div>\n        </div>\n\n        <h3>Waste & Coverage Factors</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"waste-factor\">Waste Factor (%)</label>\n            <input type=\"number\" id=\"waste-factor\" step=\"0.5\" min=\"0\" max=\"25\" value=\"${savedState.wasteFactor || ''}\" />\n            <small>Auto-populated based on pattern and complexity</small>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"overage-extra\">Extra Overage (%)</label>\n            <input type=\"number\" id=\"overage-extra\" step=\"0.5\" min=\"0\" max=\"15\" value=\"${savedState.overageExtra || '5'}\" />\n            <small>Additional material for future repairs</small>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"complex-cuts\">Complex Cuts/Obstacles</label>\n            <select id=\"complex-cuts\">\n              <option value=\"none\" ${savedState.complexCuts === 'none' ? 'selected' : ''}>None</option>\n              <option value=\"few\" ${savedState.complexCuts === 'few' ? 'selected' : ''}>Few (toilet, vanity)</option>\n              <option value=\"many\" ${savedState.complexCuts === 'many' ? 'selected' : ''}>Many (cabinets, islands)</option>\n              <option value=\"extensive\" ${savedState.complexCuts === 'extensive' ? 'selected' : ''}>Extensive (complex layout)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"grout-joint\">Grout Joint Width</label>\n            <select id=\"grout-joint\">\n              <option value=\"1/16\" ${savedState.groutJoint === '1/16' ? 'selected' : ''}>1/16\" (tight joint)</option>\n              <option value=\"1/8\" ${savedState.groutJoint === '1/8' ? 'selected' : ''}>1/8\" (standard)</option>\n              <option value=\"1/4\" ${savedState.groutJoint === '1/4' ? 'selected' : ''}>1/4\" (wide joint)</option>\n              <option value=\"3/8\" ${savedState.groutJoint === '3/8' ? 'selected' : ''}>3/8\" (stone)</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Regional Pricing</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"region\">Region</label>\n            <select id=\"region\">\n              <option value=\"southeast\" ${savedState.region === 'southeast' ? 'selected' : ''}>Southeast US</option>\n              <option value=\"northeast\" ${savedState.region === 'northeast' ? 'selected' : ''}>Northeast US</option>\n              <option value=\"midwest\" ${savedState.region === 'midwest' ? 'selected' : ''}>Midwest US</option>\n              <option value=\"southwest\" ${savedState.region === 'southwest' ? 'selected' : ''}>Southwest US</option>\n              <option value=\"west\" ${savedState.region === 'west' ? 'selected' : ''}>West Coast</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"include-labor\">Include Labor Costs</label>\n            <select id=\"include-labor\">\n              <option value=\"no\" ${savedState.includeLabor === 'no' ? 'selected' : ''}>Materials Only</option>\n              <option value=\"yes\" ${savedState.includeLabor === 'yes' ? 'selected' : ''}>Materials + Labor</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\">Calculate Flooring Materials</button>\n        <button id=\"reset-btn\" class=\"btn-secondary\">Reset Form</button>\n      </div>\n\n      <div id=\"results\" class=\"results-section\" style=\"display: none;\">\n        <h3>Flooring Materials Calculation</h3>\n        <div id=\"results-content\"></div>\n        \n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <button id=\"export-csv\" class=\"btn-secondary\">Export CSV</button>\n          <button id=\"export-xlsx\" class=\"btn-secondary\">Export Excel</button>\n          <button id=\"export-pdf\" class=\"btn-secondary\">Export PDF</button>\n        </div>\n      </div>\n\n      <div id=\"explanation\" class=\"explanation-section\" style=\"display: none;\">\n        <h3>Calculation Methodology</h3>\n        <div id=\"explanation-content\"></div>\n      </div>\n    </div>\n  `;\n\n  // Initialize calculator\n  setupEventListeners();\n  \n  // Auto-populate waste factors and material options\n  updateMaterialOptions();\n  calculateTotalArea();\n}\n\nfunction setupEventListeners() {\n  const calculateBtn = document.getElementById('calculate-btn');\n  const resetBtn = document.getElementById('reset-btn');\n  \n  calculateBtn.addEventListener('click', calculateFlooring);\n  resetBtn.addEventListener('click', resetForm);\n  \n  // Auto-save form data\n  const inputs = document.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    input.addEventListener('change', saveFormState);\n  });\n  \n  // Export handlers\n  document.getElementById('export-csv').addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx').addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf').addEventListener('click', () => exportResults('pdf'));\n  \n  // Update material options when flooring type changes\n  document.getElementById('flooring-type').addEventListener('change', updateMaterialOptions);\n  document.getElementById('pattern-layout').addEventListener('change', updateWasteFactors);\n  document.getElementById('complex-cuts').addEventListener('change', updateWasteFactors);\n  \n  // Calculate area when dimensions change\n  document.getElementById('room-length').addEventListener('input', calculateTotalArea);\n  document.getElementById('room-width').addEventListener('input', calculateTotalArea);\n  \n  // Auto-calculate perimeter for baseboards\n  document.getElementById('room-length').addEventListener('input', calculatePerimeter);\n  document.getElementById('room-width').addEventListener('input', calculatePerimeter);\n}\n\nfunction updateMaterialOptions() {\n  const flooringType = document.getElementById('flooring-type').value;\n  const materialSize = document.getElementById('material-size');\n  const adhesiveType = document.getElementById('adhesive-type');\n  \n  // Update material size options based on flooring type\n  const sizeOptions = {\n    'tile': ['12x12', '18x18', '24x24', '6x36', '8x48'],\n    'hardwood': ['3x36', '5x36', '6x48', '7x48'],\n    'laminate': ['6x36', '8x48', '12x48'],\n    'vinyl': ['6x36', '8x48', '12x24', 'roll'],\n    'carpet': ['roll'],\n    'bamboo': ['3x36', '5x36'],\n    'stone': ['12x12', '18x18', '24x24']\n  };\n  \n  // Update adhesive options based on flooring type\n  const adhesiveOptions = {\n    'tile': ['mortar', 'mastic'],\n    'hardwood': ['nail-down', 'glue-down', 'none'],\n    'laminate': ['none'],\n    'vinyl': ['glue-down', 'none'],\n    'carpet': ['none'],\n    'bamboo': ['nail-down', 'glue-down', 'none'],\n    'stone': ['mortar']\n  };\n  \n  // Clear and populate material size options\n  materialSize.innerHTML = '';\n  const sizes = sizeOptions[flooringType] || sizeOptions['tile'];\n  sizes.forEach(size => {\n    const option = document.createElement('option');\n    option.value = size;\n    option.textContent = size === 'roll' ? 'Roll goods' : \n                       size.includes('x') ? size.replace('x', '\" × ') + '\"' : size;\n    materialSize.appendChild(option);\n  });\n  \n  // Clear and populate adhesive options\n  adhesiveType.innerHTML = '';\n  const adhesives = adhesiveOptions[flooringType] || adhesiveOptions['tile'];\n  const adhesiveLabels = {\n    'none': 'Floating/Click-Lock',\n    'glue-down': 'Glue Down',\n    'nail-down': 'Nail Down',\n    'mortar': 'Thinset Mortar',\n    'mastic': 'Tile Mastic'\n  };\n  \n  adhesives.forEach(adhesive => {\n    const option = document.createElement('option');\n    option.value = adhesive;\n    option.textContent = adhesiveLabels[adhesive];\n    adhesiveType.appendChild(option);\n  });\n  \n  // Update waste factors\n  updateWasteFactors();\n}\n\nfunction updateWasteFactors() {\n  const flooringType = document.getElementById('flooring-type').value;\n  const patternLayout = document.getElementById('pattern-layout').value;\n  const complexCuts = document.getElementById('complex-cuts').value;\n  const wasteFactorInput = document.getElementById('waste-factor');\n  \n  // Base waste factors by flooring type and pattern\n  const baseWasteFactors = {\n    'tile': { 'straight': 8, 'diagonal': 15, 'herringbone': 18, 'brick': 10, 'basket-weave': 15 },\n    'hardwood': { 'straight': 7, 'diagonal': 12, 'herringbone': 15, 'brick': 8 },\n    'laminate': { 'straight': 6, 'diagonal': 10, 'herringbone': 12, 'brick': 7 },\n    'vinyl': { 'straight': 5, 'diagonal': 8, 'herringbone': 10, 'brick': 6 },\n    'carpet': { 'straight': 3, 'diagonal': 5 },\n    'bamboo': { 'straight': 7, 'diagonal': 12, 'herringbone': 15, 'brick': 8 },\n    'stone': { 'straight': 10, 'diagonal': 18, 'herringbone': 20, 'brick': 12 }\n  };\n  \n  const baseWaste = baseWasteFactors[flooringType]?.[patternLayout] || \n                   baseWasteFactors[flooringType]?.['straight'] || 8;\n  \n  // Complexity adjustment\n  const complexityAdjustments = {\n    'none': 0,\n    'few': 2,\n    'many': 4,\n    'extensive': 7\n  };\n  \n  const totalWaste = baseWaste + (complexityAdjustments[complexCuts] || 0);\n  wasteFactorInput.value = totalWaste;\n}\n\nfunction calculateTotalArea() {\n  const length = parseFloat(document.getElementById('room-length').value) || 0;\n  const width = parseFloat(document.getElementById('room-width').value) || 0;\n  const totalArea = length * width;\n  \n  document.getElementById('total-area').value = totalArea > 0 ? totalArea.toFixed(1) : '';\n}\n\nfunction calculatePerimeter() {\n  const length = parseFloat(document.getElementById('room-length').value) || 0;\n  const width = parseFloat(document.getElementById('room-width').value) || 0;\n  const perimeter = 2 * (length + width);\n  \n  const baseboardsInput = document.getElementById('baseboards');\n  if (!baseboardsInput.value && perimeter > 0) {\n    baseboardsInput.value = perimeter.toFixed(1);\n  }\n}\n\nfunction calculateFlooring() {\n  const data = collectFormData();\n  const validation = validateInputs(data);\n  \n  if (!validation.isValid) {\n    alert('Please fix the following errors:\\n' + validation.errors.join('\\n'));\n    return;\n  }\n  \n  const results = compute(data);\n  displayResults(results);\n  displayExplanation(results, data);\n  \n  document.getElementById('results').style.display = 'block';\n  document.getElementById('explanation').style.display = 'block';\n  \n  // Emit calculator usage event for analytics\n  document.dispatchEvent(new CustomEvent('calculator:used', {\n    detail: {\n      type: 'flooring',\n      flooringType: data.flooringType,\n      area: data.totalArea\n    }\n  }));\n}\n\nfunction collectFormData() {\n  return {\n    roomLength: parseFloat(document.getElementById('room-length').value) || 0,\n    roomWidth: parseFloat(document.getElementById('room-width').value) || 0,\n    totalArea: parseFloat(document.getElementById('total-area').value) || 0,\n    roomShape: document.getElementById('room-shape').value,\n    flooringType: document.getElementById('flooring-type').value,\n    materialGrade: document.getElementById('material-grade').value,\n    materialSize: document.getElementById('material-size').value,\n    patternLayout: document.getElementById('pattern-layout').value,\n    subfloorPrep: document.getElementById('subfloor-prep').value,\n    adhesiveType: document.getElementById('adhesive-type').value,\n    transitionStrips: parseFloat(document.getElementById('transition-strips').value) || 0,\n    baseboards: parseFloat(document.getElementById('baseboards').value) || 0,\n    wasteFactor: parseFloat(document.getElementById('waste-factor').value) || 10,\n    overageExtra: parseFloat(document.getElementById('overage-extra').value) || 5,\n    complexCuts: document.getElementById('complex-cuts').value,\n    groutJoint: document.getElementById('grout-joint').value,\n    region: document.getElementById('region').value,\n    includeLabor: document.getElementById('include-labor').value === 'yes'\n  };\n}\n\nfunction validateInputs(data) {\n  const errors = [];\n  \n  if (data.totalArea <= 0) errors.push('Room area must be greater than 0');\n  if (data.totalArea > 50000) errors.push('Room area seems too large (max 50,000 sq ft)');\n  if (data.wasteFactor < 0 || data.wasteFactor > 50) errors.push('Waste factor must be between 0-50%');\n  \n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n}\n\nexport function compute(data) {\n  // Calculate material quantities with waste\n  const baseArea = data.totalArea;\n  const wasteMultiplier = (100 + data.wasteFactor + data.overageExtra) / 100;\n  const totalMaterialNeeded = baseArea * wasteMultiplier;\n  \n  // Convert to appropriate units based on material\n  const materialQuantities = calculateMaterialQuantities(totalMaterialNeeded, data);\n  \n  // Calculate adhesive/installation materials\n  const adhesiveQuantities = calculateAdhesiveQuantities(data);\n  \n  // Calculate accessories (transition strips, baseboards, etc.)\n  const accessoryQuantities = calculateAccessoryQuantities(data);\n  \n  // Calculate grout (for tile only)\n  const groutQuantities = data.flooringType === 'tile' || data.flooringType === 'stone' ? \n    calculateGroutQuantities(data) : { bags: 0, coverage: 0 };\n  \n  // Regional pricing\n  const pricing = getRegionalPricing(data.region);\n  \n  // Cost calculations\n  const costs = {\n    materials: calculateMaterialCost(materialQuantities, data, pricing),\n    adhesive: calculateAdhesiveCost(adhesiveQuantities, data, pricing),\n    grout: groutQuantities.bags * pricing.grout[data.groutJoint],\n    accessories: calculateAccessoryCost(accessoryQuantities, pricing),\n    subfloorPrep: calculateSubfloorCost(data, pricing),\n    underlayment: data.subfloorPrep === 'underlayment' ? baseArea * pricing.underlayment : 0\n  };\n  \n  const materialCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n  const laborCost = data.includeLabor ? materialCost * pricing.laborMultiplier[data.flooringType] : 0;\n  const totalCost = materialCost + laborCost;\n  \n  return {\n    // Area calculations\n    baseArea: baseArea,\n    totalMaterialNeeded: totalMaterialNeeded,\n    wasteAmount: totalMaterialNeeded - baseArea,\n    wastePercentage: ((totalMaterialNeeded - baseArea) / baseArea * 100),\n    \n    // Material quantities\n    materialQuantities: materialQuantities,\n    adhesiveQuantities: adhesiveQuantities,\n    groutQuantities: groutQuantities,\n    accessoryQuantities: accessoryQuantities,\n    \n    // Cost breakdown\n    costs: costs,\n    materialCost: materialCost,\n    laborCost: laborCost,\n    totalCost: totalCost,\n    costPerSqFt: totalCost / baseArea,\n    \n    pricing: pricing\n  };\n}\n\nfunction calculateMaterialQuantities(totalArea, data) {\n  const materialSizes = {\n    '12x12': 1, // 1 sq ft per tile\n    '18x18': 2.25, // 2.25 sq ft per tile\n    '24x24': 4, // 4 sq ft per tile\n    '6x36': 1.5, // 1.5 sq ft per plank\n    '8x48': 2.67, // 2.67 sq ft per plank\n    '3x36': 0.75,\n    '5x36': 1.25,\n    '7x48': 2.33,\n    '12x48': 4,\n    'roll': totalArea // Roll goods sold by area\n  };\n  \n  const sizeInSqFt = materialSizes[data.materialSize] || 1;\n  \n  let pieces = 0;\n  let area = totalArea;\n  let boxes = 0;\n  \n  if (data.materialSize === 'roll') {\n    // Roll goods (carpet, sheet vinyl)\n    const rollWidth = data.flooringType === 'carpet' ? 12 : 6; // feet\n    const rollLength = Math.ceil(Math.max(data.roomLength, data.roomWidth) / rollWidth) * rollWidth;\n    pieces = Math.ceil(totalArea / (rollWidth * rollLength));\n    area = pieces * rollWidth * rollLength;\n  } else {\n    // Individual pieces (tile, plank)\n    pieces = Math.ceil(totalArea / sizeInSqFt);\n    \n    // Convert to boxes if applicable\n    const pcsPerBox = getPiecesPerBox(data.flooringType, data.materialSize);\n    boxes = Math.ceil(pieces / pcsPerBox);\n    area = boxes * pcsPerBox * sizeInSqFt;\n  }\n  \n  return {\n    area: parseFloat(area.toFixed(1)),\n    pieces: pieces,\n    boxes: boxes,\n    piecesPerBox: getPiecesPerBox(data.flooringType, data.materialSize)\n  };\n}\n\nfunction getPiecesPerBox(flooringType, materialSize) {\n  const boxCounts = {\n    'tile': { '12x12': 12, '18x18': 6, '24x24': 4, '6x36': 8, '8x48': 6 },\n    'hardwood': { '3x36': 20, '5x36': 12, '6x48': 8, '7x48': 6 },\n    'laminate': { '6x36': 18, '8x48': 10, '12x48': 8 },\n    'vinyl': { '6x36': 20, '8x48': 12, '12x24': 15 },\n    'bamboo': { '3x36': 20, '5x36': 12 },\n    'stone': { '12x12': 10, '18x18': 5, '24x24': 3 }\n  };\n  \n  return boxCounts[flooringType]?.[materialSize] || 10;\n}\n\nfunction calculateAdhesiveQuantities(data) {\n  if (data.adhesiveType === 'none') return { amount: 0, unit: 'none' };\n  \n  const coverageRates = {\n    'glue-down': 200, // sq ft per gallon\n    'nail-down': 0, // No adhesive\n    'mortar': 50, // sq ft per 50lb bag\n    'mastic': 150 // sq ft per gallon\n  };\n  \n  const coverage = coverageRates[data.adhesiveType] || 100;\n  const amount = data.adhesiveType === 'mortar' ? \n    Math.ceil(data.totalArea / coverage) : // Bags for mortar\n    Math.ceil(data.totalArea / coverage); // Gallons for adhesive\n  \n  const unit = data.adhesiveType === 'mortar' ? 'bags' : 'gallons';\n  \n  return { amount, unit, coverage };\n}\n\nfunction calculateGroutQuantities(data) {\n  if (!['tile', 'stone'].includes(data.flooringType)) return { bags: 0, coverage: 0 };\n  \n  // Grout coverage based on tile size and joint width\n  const coverageRates = {\n    '1/16': { '12x12': 400, '18x18': 600, '24x24': 800 },\n    '1/8': { '12x12': 200, '18x18': 300, '24x24': 400 },\n    '1/4': { '12x12': 100, '18x18': 150, '24x24': 200 },\n    '3/8': { '12x12': 70, '18x18': 100, '24x24': 130 }\n  };\n  \n  const coverage = coverageRates[data.groutJoint]?.[data.materialSize] || 200;\n  const bags = Math.ceil(data.totalArea / coverage);\n  \n  return { bags, coverage };\n}\n\nfunction calculateAccessoryQuantities(data) {\n  return {\n    transitionStrips: Math.ceil(data.transitionStrips),\n    baseboards: Math.ceil(data.baseboards),\n    quarterRound: data.baseboards > 0 ? Math.ceil(data.baseboards) : 0, // Match baseboard length\n    doorThresholds: Math.max(1, Math.ceil(data.transitionStrips / 3)) // Estimate based on transitions\n  };\n}\n\nfunction calculateMaterialCost(quantities, data, pricing) {\n  const materialPricing = pricing.materials[data.flooringType][data.materialGrade];\n  return quantities.area * materialPricing;\n}\n\nfunction calculateAdhesiveCost(adhesive, data, pricing) {\n  if (adhesive.amount === 0) return 0;\n  \n  const adhesivePricing = pricing.adhesives[data.adhesiveType] || 0;\n  return adhesive.amount * adhesivePricing;\n}\n\nfunction calculateAccessoryCost(accessories, pricing) {\n  return (\n    accessories.transitionStrips * pricing.transitionStrips +\n    accessories.baseboards * pricing.baseboard +\n    accessories.quarterRound * pricing.quarterRound +\n    accessories.doorThresholds * pricing.doorThreshold\n  );\n}\n\nfunction calculateSubfloorCost(data, pricing) {\n  if (data.subfloorPrep === 'none' || data.subfloorPrep === 'clean') return 0;\n  \n  const subfloorCosts = {\n    'self-leveling': data.totalArea * pricing.selfLeveling,\n    'underlayment': data.totalArea * pricing.underlayment\n  };\n  \n  return subfloorCosts[data.subfloorPrep] || 0;\n}\n\nfunction getRegionalPricing(region) {\n  const basePricing = {\n    'southeast': {\n      materials: {\n        tile: { economy: 2.50, standard: 4.50, premium: 8.50, luxury: 15.00 },\n        hardwood: { economy: 4.50, standard: 7.50, premium: 12.50, luxury: 22.00 },\n        laminate: { economy: 1.50, standard: 3.50, premium: 6.50, luxury: 9.50 },\n        vinyl: { economy: 2.00, standard: 4.50, premium: 8.00, luxury: 14.00 },\n        carpet: { economy: 1.50, standard: 3.50, premium: 7.50, luxury: 15.00 },\n        bamboo: { economy: 3.50, standard: 6.50, premium: 10.50, luxury: 16.00 },\n        stone: { economy: 5.50, standard: 9.50, premium: 18.50, luxury: 35.00 }\n      },\n      adhesives: {\n        'glue-down': 45, // per gallon\n        'mortar': 25, // per 50lb bag\n        'mastic': 35 // per gallon\n      },\n      grout: {\n        '1/16': 18, '1/8': 18, '1/4': 22, '3/8': 22\n      },\n      transitionStrips: 15,\n      baseboard: 3.50,\n      quarterRound: 2.25,\n      doorThreshold: 25,\n      selfLeveling: 2.80,\n      underlayment: 1.25,\n      laborMultiplier: {\n        tile: 2.8, hardwood: 3.2, laminate: 1.8, vinyl: 2.0,\n        carpet: 1.5, bamboo: 3.0, stone: 3.5\n      }\n    },\n    'northeast': {\n      materials: {\n        tile: { economy: 3.00, standard: 5.50, premium: 10.00, luxury: 18.00 },\n        hardwood: { economy: 5.50, standard: 9.00, premium: 15.00, luxury: 26.00 },\n        laminate: { economy: 1.80, standard: 4.20, premium: 7.80, luxury: 11.50 },\n        vinyl: { economy: 2.40, standard: 5.40, premium: 9.60, luxury: 16.80 },\n        carpet: { economy: 1.80, standard: 4.20, premium: 9.00, luxury: 18.00 },\n        bamboo: { economy: 4.20, standard: 7.80, premium: 12.60, luxury: 19.20 },\n        stone: { economy: 6.60, standard: 11.40, premium: 22.20, luxury: 42.00 }\n      },\n      adhesives: {\n        'glue-down': 55, 'mortar': 30, 'mastic': 42\n      },\n      grout: {\n        '1/16': 22, '1/8': 22, '1/4': 26, '3/8': 26\n      },\n      transitionStrips: 18,\n      baseboard: 4.20,\n      quarterRound: 2.70,\n      doorThreshold: 30,\n      selfLeveling: 3.40,\n      underlayment: 1.50,\n      laborMultiplier: {\n        tile: 3.5, hardwood: 4.0, laminate: 2.2, vinyl: 2.5,\n        carpet: 1.8, bamboo: 3.8, stone: 4.2\n      }\n    }\n  };\n  \n  return basePricing[region] || basePricing['southeast'];\n}\n\nfunction displayResults(results) {\n  const content = document.getElementById('results-content');\n  \n  content.innerHTML = `\n    <div class=\"results-grid\">\n      <div class=\"result-section\">\n        <h4>Area & Material Calculations</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Base Area:</span>\n          <span class=\"value\">${formatNumber(results.baseArea, 1)} sq ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Material Needed:</span>\n          <span class=\"value\">${formatNumber(results.totalMaterialNeeded, 1)} sq ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Waste Amount:</span>\n          <span class=\"value\">${formatNumber(results.wasteAmount, 1)} sq ft (${formatNumber(results.wastePercentage, 1)}%)</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Coverage:</span>\n          <span class=\"value\">${formatNumber(results.materialQuantities.area, 1)} sq ft</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Material Quantities</h4>\n        ${results.materialQuantities.boxes > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Boxes Needed:</span>\n          <span class=\"value\">${results.materialQuantities.boxes} boxes</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Pieces per Box:</span>\n          <span class=\"value\">${results.materialQuantities.piecesPerBox}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item\">\n          <span class=\"label\">Total Pieces:</span>\n          <span class=\"value\">${formatNumber(results.materialQuantities.pieces)}</span>\n        </div>\n        ${results.adhesiveQuantities.amount > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Adhesive:</span>\n          <span class=\"value\">${results.adhesiveQuantities.amount} ${results.adhesiveQuantities.unit}</span>\n        </div>\n        ` : ''}\n      </div>\n\n      ${results.groutQuantities.bags > 0 ? `\n      <div class=\"result-section\">\n        <h4>Grout & Accessories</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Grout:</span>\n          <span class=\"value\">${results.groutQuantities.bags} bags</span>\n        </div>\n        ${results.accessoryQuantities.transitionStrips > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Transition Strips:</span>\n          <span class=\"value\">${results.accessoryQuantities.transitionStrips} pieces</span>\n        </div>\n        ` : ''}\n        ${results.accessoryQuantities.baseboards > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Baseboards:</span>\n          <span class=\"value\">${results.accessoryQuantities.baseboards} linear ft</span>\n        </div>\n        ` : ''}\n      </div>\n      ` : ''}\n\n      <div class=\"result-section cost-summary\">\n        <h4>Cost Summary</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.costs.materials)}</span>\n        </div>\n        ${results.costs.adhesive > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Adhesive Cost:</span>\n          <span class=\"value\">${formatCurrency(results.costs.adhesive)}</span>\n        </div>\n        ` : ''}\n        ${results.costs.grout > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Grout Cost:</span>\n          <span class=\"value\">${formatCurrency(results.costs.grout)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item\">\n          <span class=\"label\">Total Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.materialCost)}</span>\n        </div>\n        ${results.laborCost > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Labor Cost:</span>\n          <span class=\"value\">${formatCurrency(results.laborCost)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item total\">\n          <span class=\"label\">Total Cost:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Cost per Sq Ft:</span>\n          <span class=\"value\">${formatCurrency(results.costPerSqFt)}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function explain(data) {\n  const results = compute(data);\n  \n  return `\n    <div class=\"explanation-content\">\n      <h4>Flooring Calculation Methodology</h4>\n      \n      <h5>1. Base Area Calculation</h5>\n      <p>Room Dimensions: ${data.roomLength} ft × ${data.roomWidth} ft = ${formatNumber(results.baseArea, 1)} sq ft</p>\n      \n      <h5>2. Waste Factor Application</h5>\n      <p>Base waste for ${data.flooringType} with ${data.patternLayout} pattern: ${data.wasteFactor}%</p>\n      <p>Additional overage: ${data.overageExtra}%</p>\n      <p>Total multiplier: ${formatNumber((100 + data.wasteFactor + data.overageExtra) / 100, 3)}</p>\n      <p>Material needed: ${formatNumber(results.baseArea, 1)} sq ft × ${formatNumber((100 + data.wasteFactor + data.overageExtra) / 100, 3)} = ${formatNumber(results.totalMaterialNeeded, 1)} sq ft</p>\n      \n      <h5>3. Material Conversion</h5>\n      <p>Material size: ${data.materialSize}</p>\n      <p>Pieces needed: ${results.materialQuantities.pieces}</p>\n      ${results.materialQuantities.boxes > 0 ? `\n      <p>Pieces per box: ${results.materialQuantities.piecesPerBox}</p>\n      <p>Boxes required: ${results.materialQuantities.boxes} boxes</p>\n      ` : ''}\n      \n      ${results.adhesiveQuantities.amount > 0 ? `\n      <h5>4. Adhesive Calculations</h5>\n      <p>Adhesive type: ${data.adhesiveType}</p>\n      <p>Coverage rate: ${results.adhesiveQuantities.coverage} sq ft per ${results.adhesiveQuantities.unit.slice(0, -1)}</p>\n      <p>Amount needed: ${results.adhesiveQuantities.amount} ${results.adhesiveQuantities.unit}</p>\n      ` : ''}\n      \n      ${results.groutQuantities.bags > 0 ? `\n      <h5>5. Grout Calculations</h5>\n      <p>Joint width: ${data.groutJoint}\"</p>\n      <p>Coverage: ${results.groutQuantities.coverage} sq ft per bag</p>\n      <p>Bags needed: ${results.groutQuantities.bags} bags</p>\n      ` : ''}\n      \n      <div class=\"formula-note\">\n        <p><strong>Industry Standards Used:</strong></p>\n        <ul>\n          <li>Waste factors based on pattern complexity and cutting requirements</li>\n          <li>Standard box/piece counts for different material types</li>\n          <li>Adhesive coverage rates per manufacturer specifications</li>\n          <li>Grout coverage based on tile size and joint width</li>\n          <li>5% minimum overage recommended for future repairs</li>\n        </ul>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayExplanation(results, data) {\n  const content = document.getElementById('explanation-content');\n  content.innerHTML = explain(data);\n}\n\nfunction saveFormState() {\n  const formData = collectFormData();\n  saveState('flooring', formData);\n}\n\nfunction resetForm() {\n  document.querySelectorAll('input').forEach(input => {\n    input.value = '';\n  });\n  document.querySelectorAll('select').forEach(select => {\n    select.selectedIndex = 0;\n  });\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('explanation').style.display = 'none';\n  saveState('flooring', {});\n  updateMaterialOptions(); // Reset material options\n}\n\nfunction exportResults(format) {\n  const data = collectFormData();\n  const results = compute(data);\n  \n  const exportData = {\n    'Project': 'Flooring Materials Calculation',\n    'Date': new Date().toLocaleDateString(),\n    'Flooring Type': data.flooringType,\n    'Room Area (sq ft)': data.totalArea,\n    'Pattern': data.patternLayout,\n    'Material Grade': data.materialGrade,\n    'Total Material Needed (sq ft)': formatNumber(results.totalMaterialNeeded, 1),\n    'Boxes Required': results.materialQuantities.boxes || 'N/A',\n    'Total Pieces': results.materialQuantities.pieces,\n    'Waste Factor (%)': data.wasteFactor,\n    'Material Cost': formatCurrency(results.materialCost),\n    'Total Cost': formatCurrency(results.totalCost),\n    'Cost per Sq Ft': formatCurrency(results.costPerSqFt)\n  };\n  \n  const filename = `flooring-calculation-${new Date().toISOString().split('T')[0]}`;\n  \n  switch(format) {\n    case 'csv':\n      exportToCsv(exportData, filename);\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, filename);\n      break;\n    case 'pdf':\n      exportToPdf(exportData, filename, 'Flooring Materials Calculation');\n      break;\n  }\n}\n\nexport function meta() {\n  return {\n    id: \"flooring\",\n    title: \"Professional Flooring Calculator\",\n    category: \"finishes\",\n    description: \"Calculate flooring materials for tile, hardwood, carpet, vinyl, and other floor finishes with waste factors, installation requirements, and comprehensive cost analysis\"\n  };\n}","size_bytes":38009},"assets/js/calculators/framing.js":{"content":"// Framing Calculator - Stud Wall Framing\nimport { validateInput, validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('framing') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Stud Wall Framing Calculator</h2>\n        <p>Calculate lumber quantities and costs for wood framing systems</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Wall Dimensions</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"wall-length\">Wall Length (ft)</label>\n            <input type=\"number\" id=\"wall-length\" step=\"0.1\" min=\"0\" value=\"${savedState.wallLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"wall-height\">Wall Height (ft)</label>\n            <input type=\"number\" id=\"wall-height\" step=\"0.1\" min=\"0\" value=\"${savedState.wallHeight || '8'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"stud-spacing\">Stud Spacing</label>\n            <select id=\"stud-spacing\">\n              <option value=\"16\" ${savedState.studSpacing === '16' ? 'selected' : ''}>16\" O.C.</option>\n              <option value=\"24\" ${savedState.studSpacing === '24' ? 'selected' : ''}>24\" O.C.</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"num-walls\">Number of Walls</label>\n            <input type=\"number\" id=\"num-walls\" min=\"1\" value=\"${savedState.numWalls || '1'}\" />\n          </div>\n        </div>\n\n        <h3>Configuration</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"corner-type\">Corner Type</label>\n            <select id=\"corner-type\">\n              <option value=\"standard\" ${savedState.cornerType === 'standard' ? 'selected' : ''}>Standard (1 extra)</option>\n              <option value=\"advanced\" ${savedState.cornerType === 'advanced' ? 'selected' : ''}>Advanced (2 extra)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"plate-count\">Plates</label>\n            <select id=\"plate-count\">\n              <option value=\"2\" ${savedState.plateCount === '2' ? 'selected' : ''}>2 (Single Top)</option>\n              <option value=\"3\" ${savedState.plateCount === '3' ? 'selected' : ''}>3 (Double Top)</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Openings</h3>\n        <div id=\"openings-container\">\n          <div class=\"opening-row\">\n            <input type=\"number\" class=\"opening-width\" placeholder=\"Width (ft)\" step=\"0.1\" min=\"0\" value=\"${savedState.openingWidth1 || ''}\" />\n            <input type=\"number\" class=\"opening-count\" placeholder=\"Count\" min=\"0\" value=\"${savedState.openingCount1 || ''}\" />\n            <button type=\"button\" class=\"btn-remove\" onclick=\"removeOpening(this)\">Remove</button>\n          </div>\n        </div>\n        <button type=\"button\" id=\"add-opening\" class=\"btn-secondary\">Add Opening</button>\n\n        <h3>Pricing (Optional)</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"stud-price\">Stud Price ($/ea)</label>\n            <input type=\"number\" id=\"stud-price\" step=\"0.01\" min=\"0\" value=\"${savedState.studPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"plate-price\">Plate Price ($/LF)</label>\n            <input type=\"number\" id=\"plate-price\" step=\"0.01\" min=\"0\" value=\"${savedState.platePrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"labor-rate\">Labor Rate ($/hr)</label>\n            <input type=\"number\" id=\"labor-rate\" step=\"0.01\" min=\"0\" value=\"${savedState.laborRate || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"productivity\">Productivity (studs/hr)</label>\n            <input type=\"number\" id=\"productivity\" step=\"0.1\" min=\"0\" value=\"${savedState.productivity || '15'}\" />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\" disabled>Calculate</button>\n        <button id=\"clear-btn\" class=\"btn-secondary\">Clear</button>\n      </div>\n\n      <div id=\"results-section\" class=\"results-section\" style=\"display: none;\">\n        <h3>Results</h3>\n        <div id=\"results-content\"></div>\n\n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <div class=\"export-buttons\">\n            <button id=\"export-csv\" class=\"btn-export\">CSV</button>\n            <button id=\"export-xlsx\" class=\"btn-export\">XLSX</button>\n            <button id=\"export-pdf\" class=\"btn-export\">PDF</button>\n            <button id=\"print-btn\" class=\"btn-export\">Print</button>\n          </div>\n        </div>\n\n        <div class=\"math-section\">\n          <button id=\"show-math-btn\" class=\"btn-secondary\">Show Math</button>\n          <div id=\"math-details\" class=\"math-details\" style=\"display: none;\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Event listeners\n  setupEventListeners();\n}\n\nfunction setupEventListeners() {\n  // Input validation and auto-calculate\n  const inputs = document.querySelectorAll('#wall-length, #wall-height, #stud-spacing, #num-walls, #corner-type, #plate-count');\n  inputs.forEach(input => {\n    input.addEventListener('input', validateAndCalculate);\n  });\n\n  // Opening management\n  document.getElementById('add-opening').addEventListener('click', addOpening);\n\n  // Buttons\n  document.getElementById('calculate-btn').addEventListener('click', calculateFraming);\n  document.getElementById('clear-btn').addEventListener('click', clearInputs);\n  document.getElementById('show-math-btn')?.addEventListener('click', toggleMath);\n\n  // Export buttons\n  document.getElementById('export-csv')?.addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx')?.addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf')?.addEventListener('click', () => exportResults('pdf'));\n  document.getElementById('print-btn')?.addEventListener('click', () => window.print());\n\n  validateAndCalculate();\n}\n\nfunction addOpening() {\n  const container = document.getElementById('openings-container');\n  const row = document.createElement('div');\n  row.className = 'opening-row';\n  row.innerHTML = `\n    <input type=\"number\" class=\"opening-width\" placeholder=\"Width (ft)\" step=\"0.1\" min=\"0\" />\n    <input type=\"number\" class=\"opening-count\" placeholder=\"Count\" min=\"0\" />\n    <button type=\"button\" class=\"btn-remove\" onclick=\"removeOpening(this)\">Remove</button>\n  `;\n  container.appendChild(row);\n\n  row.querySelectorAll('input').forEach(input => {\n    input.addEventListener('input', validateAndCalculate);\n  });\n}\n\nfunction removeOpening(btn) {\n  btn.parentElement.remove();\n  validateAndCalculate();\n}\n\nfunction validateAndCalculate() {\n  const state = getCurrentState();\n  const isValid = validateInputs(state);\n\n  document.getElementById('calculate-btn').disabled = !isValid;\n\n  if (isValid) {\n    calculateFraming();\n  }\n\n  saveState('framing', state);\n}\n\nfunction getCurrentState() {\n  const openings = [];\n  document.querySelectorAll('.opening-row').forEach(row => {\n    const width = parseFloat(row.querySelector('.opening-width').value) || 0;\n    const count = parseInt(row.querySelector('.opening-count').value) || 0;\n    if (width > 0 && count > 0) {\n      openings.push({ width, count });\n    }\n  });\n\n  return {\n    wallLength: parseFloat(document.getElementById('wall-length').value) || 0,\n    wallHeight: parseFloat(document.getElementById('wall-height').value) || 0,\n    studSpacing: parseInt(document.getElementById('stud-spacing').value) || 16,\n    numWalls: parseInt(document.getElementById('num-walls').value) || 1,\n    cornerType: document.getElementById('corner-type').value,\n    plateCount: parseInt(document.getElementById('plate-count').value) || 2,\n    openings,\n    studPrice: parseFloat(document.getElementById('stud-price').value) || 0,\n    platePrice: parseFloat(document.getElementById('plate-price').value) || 0,\n    laborRate: parseFloat(document.getElementById('labor-rate').value) || 0,\n    productivity: parseFloat(document.getElementById('productivity').value) || 15\n  };\n}\n\nfunction validateInputs(state) {\n  return state.wallLength > 0 && state.wallHeight > 0 && state.numWalls > 0;\n}\n\nfunction calculateFraming() {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (result.ok) {\n    displayResults(result.data, state);\n    document.getElementById('results-section').style.display = 'block';\n  }\n}\n\nfunction displayResults(data, state) {\n  const resultsContent = document.getElementById('results-content');\n\n  resultsContent.innerHTML = `\n    <div class=\"results-table\">\n      <table>\n        <tr><th colspan=\"2\">Stud Requirements</th></tr>\n        <tr><td>Studs per Wall</td><td>${data.studsPerWall}</td></tr>\n        <tr><td>Corner/Partition Studs</td><td>${data.cornerStuds}</td></tr>\n        <tr><td>King/Jack Studs</td><td>${data.openingStuds}</td></tr>\n        <tr><td><strong>Total Studs</strong></td><td><strong>${data.totalStuds}</strong></td></tr>\n\n        <tr><th colspan=\"2\">Plates</th></tr>\n        <tr><td>Plate Linear Feet</td><td>${formatNumber(data.platesLF)} LF</td></tr>\n\n        ${data.materialCost > 0 ? `\n        <tr><th colspan=\"2\">Material Costs</th></tr>\n        <tr><td>Stud Cost</td><td>${formatCurrency(data.studCost)}</td></tr>\n        <tr><td>Plate Cost</td><td>${formatCurrency(data.plateCost)}</td></tr>\n        <tr><td><strong>Total Material</strong></td><td><strong>${formatCurrency(data.materialCost)}</strong></td></tr>\n        ` : ''}\n\n        ${data.laborCost > 0 ? `\n        <tr><th colspan=\"2\">Labor</th></tr>\n        <tr><td>Labor Hours</td><td>${formatNumber(data.laborHours)} hrs</td></tr>\n        <tr><td>Labor Cost</td><td>${formatCurrency(data.laborCost)}</td></tr>\n        ` : ''}\n\n        ${data.totalCost > 0 ? `\n        <tr><th colspan=\"2\">Total Project</th></tr>\n        <tr><td><strong>Total Cost</strong></td><td><strong>${formatCurrency(data.totalCost)}</strong></td></tr>\n        ` : ''}\n      </table>\n    </div>\n\n    <div class=\"assumptions\">\n      <h4>Assumptions</h4>\n      <ul>\n        <li>Standard stud spacing: ${state.studSpacing}\" O.C.</li>\n        <li>Corner type: ${state.cornerType}</li>\n        <li>Plate configuration: ${state.plateCount} plates</li>\n        <li>King/jack studs: 2 per opening</li>\n        <li>Productivity: ${state.productivity} studs/hour</li>\n      </ul>\n    </div>\n  `;\n}\n\nfunction clearInputs() {\n  document.querySelectorAll('input, select').forEach(input => {\n    if (input.type === 'number') {\n      input.value = '';\n    } else {\n      input.selectedIndex = 0;\n    }\n  });\n\n  // Reset openings to one row\n  const container = document.getElementById('openings-container');\n  container.innerHTML = `\n    <div class=\"opening-row\">\n      <input type=\"number\" class=\"opening-width\" placeholder=\"Width (ft)\" step=\"0.1\" min=\"0\" />\n      <input type=\"number\" class=\"opening-count\" placeholder=\"Count\" min=\"0\" />\n      <button type=\"button\" class=\"btn-remove\" onclick=\"removeOpening(this)\">Remove</button>\n    </div>\n  `;\n\n  document.getElementById('results-section').style.display = 'none';\n  saveState('framing', {});\n}\n\nfunction toggleMath() {\n  const mathDetails = document.getElementById('math-details');\n  const isVisible = mathDetails.style.display !== 'none';\n\n  if (isVisible) {\n    mathDetails.style.display = 'none';\n    document.getElementById('show-math-btn').textContent = 'Show Math';\n  } else {\n    const state = getCurrentState();\n    const explanation = explain(state);\n    mathDetails.innerHTML = explanation;\n    mathDetails.style.display = 'block';\n    document.getElementById('show-math-btn').textContent = 'Hide Math';\n  }\n}\n\nfunction exportResults(format) {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (!result.ok) return;\n\n  const data = result.data;\n  const exportData = [\n    ['Framing Calculator Results', ''],\n    ['Wall Length', `${state.wallLength} ft`],\n    ['Wall Height', `${state.wallHeight} ft`],\n    ['Number of Walls', state.numWalls],\n    ['Stud Spacing', `${state.studSpacing}\" O.C.`],\n    [''],\n    ['Studs per Wall', data.studsPerWall],\n    ['Corner/Partition Studs', data.cornerStuds],\n    ['King/Jack Studs', data.openingStuds],\n    ['Total Studs', data.totalStuds],\n    ['Plate Linear Feet', `${data.platesLF} LF`],\n    [''],\n    ['Material Cost', formatCurrency(data.materialCost)],\n    ['Labor Cost', formatCurrency(data.laborCost)],\n    ['Total Cost', formatCurrency(data.totalCost)]\n  ];\n\n  switch (format) {\n    case 'csv':\n      exportToCsv(exportData, 'framing-calculation.csv');\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, 'framing-calculation.xlsx');\n      break;\n    case 'pdf':\n      exportToPdf(exportData, 'Framing Calculator Results', 'framing-calculation.pdf');\n      break;\n  }\n}\n\nexport function compute(state) {\n  try {\n    const { wallLength, wallHeight, studSpacing, numWalls, cornerType, plateCount, openings, studPrice, platePrice, laborRate, productivity } = state;\n\n    if (!wallLength || !wallHeight || !numWalls) {\n      return { ok: false, msg: \"Missing required inputs\" };\n    }\n\n    // Calculate studs per wall run\n    const studsPerWall = Math.ceil((wallLength * 12) / studSpacing) + 1;\n\n    // Corner/partition studs\n    const cornerMultiplier = cornerType === 'advanced' ? 2 : 1;\n    const cornerStuds = numWalls * cornerMultiplier;\n\n    // Opening studs (king and jack studs)\n    let openingStuds = 0;\n    openings.forEach(opening => {\n      openingStuds += opening.count * 2; // 2 studs per opening (king + jack)\n    });\n\n    // Total studs\n    const totalStuds = (studsPerWall * numWalls) + cornerStuds + openingStuds;\n\n    // Plates calculation\n    const platesLF = numWalls * plateCount * wallLength;\n\n    // Cost calculations\n    const studCost = studPrice > 0 ? totalStuds * studPrice : 0;\n    const plateCost = platePrice > 0 ? platesLF * platePrice : 0;\n    const materialCost = studCost + plateCost;\n\n    const laborHours = productivity > 0 ? totalStuds / productivity : 0;\n    const laborCost = laborRate > 0 && laborHours > 0 ? laborHours * laborRate : 0;\n\n    const totalCost = materialCost + laborCost;\n\n    return {\n      ok: true,\n      data: {\n        studsPerWall,\n        cornerStuds,\n        openingStuds,\n        totalStuds,\n        platesLF,\n        studCost,\n        plateCost,\n        materialCost,\n        laborHours,\n        laborCost,\n        totalCost\n      }\n    };\n  } catch (error) {\n    return { ok: false, msg: error.message };\n  }\n}\n\nexport function explain(state) {\n  const result = compute(state);\n  if (!result.ok) return \"Invalid inputs\";\n\n  const { wallLength, studSpacing, numWalls, cornerType, plateCount, openings } = state;\n  const data = result.data;\n\n  return `\n    <div class=\"math-explanation\">\n      <h4>Calculation Steps</h4>\n\n      <div class=\"step\">\n        <h5>1. Studs per Wall</h5>\n        <p>Formula: ceil((length × 12) / spacing) + 1</p>\n        <p>Calculation: ceil((${wallLength} × 12) / ${studSpacing}) + 1 = ceil(${wallLength * 12} / ${studSpacing}) + 1 = ceil(${(wallLength * 12) / studSpacing}) + 1 = ${data.studsPerWall}</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>2. Corner/Partition Studs</h5>\n        <p>Corner type: ${cornerType} (${cornerType === 'advanced' ? '2' : '1'} extra per wall)</p>\n        <p>Calculation: ${numWalls} walls × ${cornerType === 'advanced' ? '2' : '1'} = ${data.cornerStuds} studs</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>3. Opening Studs</h5>\n        <p>King and jack studs: 2 per opening</p>\n        ${openings.map(opening => `<p>${opening.count} openings × 2 studs = ${opening.count * 2} studs</p>`).join('')}\n        <p>Total opening studs: ${data.openingStuds}</p>\n      </div>\n\n      <div class=\"step\">\n        <h5>4. Total Studs</h5>\n        <p>Wall studs: ${data.studsPerWall} × ${numWalls} = ${data.studsPerWall * numWalls}</p>\n        <p>Corner studs: ${data.cornerStuds}</p>\n        <p>Opening studs: ${data.openingStuds}</p>\n        <p><strong>Total: ${data.studsPerWall * numWalls} + ${data.cornerStuds} + ${data.openingStuds} = ${data.totalStuds} studs</strong></p>\n      </div>\n\n      <div class=\"step\">\n        <h5>5. Plates</h5>\n        <p>Formula: walls × plates × length</p>\n        <p>Calculation: ${numWalls} × ${plateCount} × ${wallLength} = ${data.platesLF} LF</p>\n      </div>\n    </div>\n  `;\n}\n\nexport function meta() {\n  return {\n    id: \"framing\",\n    title: \"Framing Calculator\",\n    category: \"structural\"\n  };\n}","size_bytes":16949},"assets/js/calculators/genconds.js":{"content":"// General Conditions Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"genconds\",\n    title: \"General Conditions Calculator\",\n    category: \"project\"\n  };\n}","size_bytes":383},"assets/js/calculators/hub.js":{"content":"// Calculator Hub - Handle calculator loading and navigation\nimport { calculatorRegistry } from './registry.js';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Handle calculator button clicks\n    document.querySelectorAll('[data-calc]').forEach(button => {\n        button.addEventListener('click', async function() {\n            const calcId = this.getAttribute('data-calc');\n            await loadCalculator(calcId);\n        });\n    });\n});\n\nasync function loadCalculator(calcId) {\n    try {\n        // Find the calculator in the registry\n        const calcEntry = calculatorRegistry.find(calc => calc.id === calcId);\n\n        if (!calcEntry) {\n            console.error(`Calculator ${calcId} not found in registry`);\n            return;\n        }\n\n        // Dynamically import and initialize the calculator\n        const module = await calcEntry.module();\n\n        // Create a new page for the calculator\n        const newWindow = window.open('', '_blank');\n        newWindow.document.write(`\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${module.meta().title} - CostFlowAI</title>\n                <link rel=\"stylesheet\" href=\"/assets/css/base.css\">\n                <link rel=\"stylesheet\" href=\"/assets/css/layout.css\">\n                <link rel=\"stylesheet\" href=\"/assets/css/calculators.css\">\n                <style>\n                    .calculator-container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n                    .input-section { margin-bottom: 30px; }\n                    .input-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px; }\n                    .input-group { display: flex; flex-direction: column; }\n                    .input-group label { font-weight: bold; margin-bottom: 5px; }\n                    .input-group input, .input-group select { padding: 8px; border: 1px solid #ddd; border-radius: 4px; }\n                    .button-section { text-align: center; margin: 30px 0; }\n                    .btn-primary { background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer; margin: 0 10px; }\n                    .btn-secondary { background: #6c757d; color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer; margin: 0 10px; }\n                    .btn-export { background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin: 0 5px; }\n                    .results-section { margin-top: 30px; }\n                    .results-table table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n                    .results-table th, .results-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n                    .results-table th { background-color: #f5f5f5; font-weight: bold; }\n                    .assumptions { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 4px; }\n                    .math-details { margin-top: 15px; padding: 15px; background: #fff; border: 1px solid #ddd; border-radius: 4px; }\n                    .step { margin-bottom: 20px; }\n                    .step h5 { color: #007bff; margin-bottom: 10px; }\n                    .step p { margin-bottom: 5px; }\n                    .export-buttons { margin-top: 10px; }\n                    .opening-row { display: flex; gap: 10px; align-items: center; margin-bottom: 10px; }\n                    .opening-row input { flex: 1; }\n                    .btn-remove { background: #dc3545; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer; }\n                </style>\n            </head>\n            <body>\n                <header>\n                    <h1>CostFlowAI - ${module.meta().title}</h1>\n                    <a href=\"/calculators/\" style=\"color: white; text-decoration: none;\">← Back to Calculators</a>\n                </header>\n                <main id=\"calculator-app\"></main>\n                <script type=\"module\">\n                    // Initialize calculator when page loads\n                    window.addEventListener('load', async function() {\n                        const appElement = document.getElementById('calculator-app');\n\n                        try {\n                            // Re-import the calculator module in the new window context\n                            const module = await import('/assets/js/calculators/${calcId}.js');\n\n                            // Initialize the calculator\n                            if (module.init) {\n                                module.init(appElement);\n                            } else {\n                                console.error('Calculator init function not found');\n                            }\n                        } catch (error) {\n                            console.error('Error initializing calculator:', error);\n                            appElement.innerHTML = '<p>Error loading calculator. Please try again.</p>';\n                        }\n                    });\n                </script>\n            </body>\n            </html>\n        `);\n        newWindow.document.close();\n\n    } catch (error) {\n        console.error('Error loading calculator:', error);\n        alert('Error loading calculator. Please try again.');\n    }\n}","size_bytes":5469},"assets/js/calculators/hvac.js":{"content":"// Professional HVAC Calculator\n// Comprehensive HVAC system design with thermal load calculations and equipment sizing\n\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('hvac') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Professional HVAC Calculator</h2>\n        <p>Calculate HVAC system components, ductwork sizing, and thermal load calculations with ASHRAE standards</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Building Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"building-type\">Building Type</label>\n            <select id=\"building-type\">\n              <option value=\"residential\" ${savedState.buildingType === 'residential' ? 'selected' : ''}>Residential</option>\n              <option value=\"office\" ${savedState.buildingType === 'office' ? 'selected' : ''}>Office/Commercial</option>\n              <option value=\"retail\" ${savedState.buildingType === 'retail' ? 'selected' : ''}>Retail</option>\n              <option value=\"restaurant\" ${savedState.buildingType === 'restaurant' ? 'selected' : ''}>Restaurant</option>\n              <option value=\"warehouse\" ${savedState.buildingType === 'warehouse' ? 'selected' : ''}>Warehouse</option>\n              <option value=\"hotel\" ${savedState.buildingType === 'hotel' ? 'selected' : ''}>Hotel</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"total-sqft\">Total Floor Area (sq ft)</label>\n            <input type=\"number\" id=\"total-sqft\" step=\"1\" min=\"0\" value=\"${savedState.totalSqft || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ceiling-height\">Ceiling Height (ft)</label>\n            <input type=\"number\" id=\"ceiling-height\" step=\"0.1\" min=\"6\" max=\"20\" value=\"${savedState.ceilingHeight || '9'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"climate-zone\">Climate Zone (ASHRAE)</label>\n            <select id=\"climate-zone\">\n              <option value=\"1A\" ${savedState.climateZone === '1A' ? 'selected' : ''}>1A - Very Hot, Humid</option>\n              <option value=\"2A\" ${savedState.climateZone === '2A' ? 'selected' : ''}>2A - Hot, Humid</option>\n              <option value=\"3A\" ${savedState.climateZone === '3A' ? 'selected' : ''}>3A - Warm, Humid</option>\n              <option value=\"3B\" ${savedState.climateZone === '3B' ? 'selected' : ''}>3B - Warm, Dry</option>\n              <option value=\"4A\" ${savedState.climateZone === '4A' ? 'selected' : ''}>4A - Mixed, Humid</option>\n              <option value=\"4B\" ${savedState.climateZone === '4B' ? 'selected' : ''}>4B - Mixed, Dry</option>\n              <option value=\"5A\" ${savedState.climateZone === '5A' ? 'selected' : ''}>5A - Cool, Humid</option>\n              <option value=\"6A\" ${savedState.climateZone === '6A' ? 'selected' : ''}>6A - Cold, Humid</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Thermal Load Factors</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"insulation-level\">Insulation Level</label>\n            <select id=\"insulation-level\">\n              <option value=\"poor\" ${savedState.insulationLevel === 'poor' ? 'selected' : ''}>Poor (R-11 walls, R-19 roof)</option>\n              <option value=\"average\" ${savedState.insulationLevel === 'average' ? 'selected' : ''}>Average (R-13 walls, R-30 roof)</option>\n              <option value=\"good\" ${savedState.insulationLevel === 'good' ? 'selected' : ''}>Good (R-19 walls, R-38 roof)</option>\n              <option value=\"excellent\" ${savedState.insulationLevel === 'excellent' ? 'selected' : ''}>Excellent (R-21+ walls, R-49+ roof)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"window-area\">Window Area (sq ft)</label>\n            <input type=\"number\" id=\"window-area\" step=\"1\" min=\"0\" value=\"${savedState.windowArea || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"window-type\">Window Type</label>\n            <select id=\"window-type\">\n              <option value=\"single\" ${savedState.windowType === 'single' ? 'selected' : ''}>Single Pane</option>\n              <option value=\"double\" ${savedState.windowType === 'double' ? 'selected' : ''}>Double Pane</option>\n              <option value=\"low-e\" ${savedState.windowType === 'low-e' ? 'selected' : ''}>Low-E Double Pane</option>\n              <option value=\"triple\" ${savedState.windowType === 'triple' ? 'selected' : ''}>Triple Pane</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"occupancy\">Peak Occupancy</label>\n            <input type=\"number\" id=\"occupancy\" min=\"0\" value=\"${savedState.occupancy || ''}\" />\n          </div>\n        </div>\n\n        <h3>Equipment Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"system-type\">HVAC System Type</label>\n            <select id=\"system-type\">\n              <option value=\"split-system\" ${savedState.systemType === 'split-system' ? 'selected' : ''}>Split System (Heat Pump)</option>\n              <option value=\"package-unit\" ${savedState.systemType === 'package-unit' ? 'selected' : ''}>Package Unit</option>\n              <option value=\"vrf\" ${savedState.systemType === 'vrf' ? 'selected' : ''}>VRF System</option>\n              <option value=\"chiller\" ${savedState.systemType === 'chiller' ? 'selected' : ''}>Chilled Water System</option>\n              <option value=\"gas-furnace\" ${savedState.systemType === 'gas-furnace' ? 'selected' : ''}>Gas Furnace + AC</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"efficiency-rating\">System Efficiency</label>\n            <select id=\"efficiency-rating\">\n              <option value=\"standard\" ${savedState.efficiencyRating === 'standard' ? 'selected' : ''}>Standard (14 SEER)</option>\n              <option value=\"high\" ${savedState.efficiencyRating === 'high' ? 'selected' : ''}>High Efficiency (16-18 SEER)</option>\n              <option value=\"premium\" ${savedState.efficiencyRating === 'premium' ? 'selected' : ''}>Premium (19+ SEER)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ventilation-cfm\">Ventilation Requirement (CFM)</label>\n            <input type=\"number\" id=\"ventilation-cfm\" step=\"10\" min=\"0\" value=\"${savedState.ventilationCfm || ''}\" />\n            <small>ASHRAE 62.1 - Auto-calculated based on occupancy</small>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"zones\">Number of Zones</label>\n            <input type=\"number\" id=\"zones\" min=\"1\" max=\"20\" value=\"${savedState.zones || '1'}\" />\n          </div>\n        </div>\n\n        <h3>Ductwork System</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"duct-material\">Duct Material</label>\n            <select id=\"duct-material\">\n              <option value=\"galvanized\" ${savedState.ductMaterial === 'galvanized' ? 'selected' : ''}>Galvanized Steel</option>\n              <option value=\"aluminum\" ${savedState.ductMaterial === 'aluminum' ? 'selected' : ''}>Aluminum</option>\n              <option value=\"fiberglass\" ${savedState.ductMaterial === 'fiberglass' ? 'selected' : ''}>Fiberglass Ductboard</option>\n              <option value=\"flexible\" ${savedState.ductMaterial === 'flexible' ? 'selected' : ''}>Flexible Duct</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"duct-insulation\">Duct Insulation</label>\n            <select id=\"duct-insulation\">\n              <option value=\"none\" ${savedState.ductInsulation === 'none' ? 'selected' : ''}>None</option>\n              <option value=\"r4\" ${savedState.ductInsulation === 'r4' ? 'selected' : ''}>R-4 (1\" wrap)</option>\n              <option value=\"r6\" ${savedState.ductInsulation === 'r6' ? 'selected' : ''}>R-6 (1.5\" wrap)</option>\n              <option value=\"r8\" ${savedState.ductInsulation === 'r8' ? 'selected' : ''}>R-8 (2\" wrap)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"main-trunk-length\">Main Trunk Length (ft)</label>\n            <input type=\"number\" id=\"main-trunk-length\" step=\"1\" min=\"0\" value=\"${savedState.mainTrunkLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"branch-ductwork\">Branch Ductwork (ft)</label>\n            <input type=\"number\" id=\"branch-ductwork\" step=\"1\" min=\"0\" value=\"${savedState.branchDuctwork || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"return-ductwork\">Return Air Ductwork (ft)</label>\n            <input type=\"number\" id=\"return-ductwork\" step=\"1\" min=\"0\" value=\"${savedState.returnDuctwork || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"diffusers\">Supply Diffusers (qty)</label>\n            <input type=\"number\" id=\"diffusers\" min=\"0\" value=\"${savedState.diffusers || ''}\" />\n          </div>\n        </div>\n\n        <h3>Regional Pricing</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"region\">Region</label>\n            <select id=\"region\">\n              <option value=\"southeast\" ${savedState.region === 'southeast' ? 'selected' : ''}>Southeast US</option>\n              <option value=\"northeast\" ${savedState.region === 'northeast' ? 'selected' : ''}>Northeast US</option>\n              <option value=\"midwest\" ${savedState.region === 'midwest' ? 'selected' : ''}>Midwest US</option>\n              <option value=\"southwest\" ${savedState.region === 'southwest' ? 'selected' : ''}>Southwest US</option>\n              <option value=\"west\" ${savedState.region === 'west' ? 'selected' : ''}>West Coast</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"include-labor\">Include Labor Costs</label>\n            <select id=\"include-labor\">\n              <option value=\"no\" ${savedState.includeLabor === 'no' ? 'selected' : ''}>Materials Only</option>\n              <option value=\"yes\" ${savedState.includeLabor === 'yes' ? 'selected' : ''}>Materials + Labor</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\">Calculate HVAC System</button>\n        <button id=\"reset-btn\" class=\"btn-secondary\">Reset Form</button>\n      </div>\n\n      <div id=\"results\" class=\"results-section\" style=\"display: none;\">\n        <h3>HVAC System Calculation</h3>\n        <div id=\"results-content\"></div>\n        \n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <button id=\"export-csv\" class=\"btn-secondary\">Export CSV</button>\n          <button id=\"export-xlsx\" class=\"btn-secondary\">Export Excel</button>\n          <button id=\"export-pdf\" class=\"btn-secondary\">Export PDF</button>\n        </div>\n      </div>\n\n      <div id=\"explanation\" class=\"explanation-section\" style=\"display: none;\">\n        <h3>Calculation Methodology</h3>\n        <div id=\"explanation-content\"></div>\n      </div>\n    </div>\n  `;\n\n  // Initialize calculator\n  setupEventListeners();\n  \n  // Auto-populate ventilation requirements\n  updateVentilationRequirements();\n}\n\nfunction setupEventListeners() {\n  const calculateBtn = document.getElementById('calculate-btn');\n  const resetBtn = document.getElementById('reset-btn');\n  \n  calculateBtn.addEventListener('click', calculateHVAC);\n  resetBtn.addEventListener('click', resetForm);\n  \n  // Auto-save form data\n  const inputs = document.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    input.addEventListener('change', saveFormState);\n  });\n  \n  // Export handlers\n  document.getElementById('export-csv').addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx').addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf').addEventListener('click', () => exportResults('pdf'));\n  \n  // Update ventilation when building type or occupancy changes\n  document.getElementById('building-type').addEventListener('change', updateVentilationRequirements);\n  document.getElementById('occupancy').addEventListener('input', updateVentilationRequirements);\n  document.getElementById('total-sqft').addEventListener('input', updateVentilationRequirements);\n}\n\nfunction updateVentilationRequirements() {\n  const buildingType = document.getElementById('building-type').value;\n  const occupancy = parseInt(document.getElementById('occupancy').value) || 0;\n  const sqft = parseFloat(document.getElementById('total-sqft').value) || 0;\n  \n  // ASHRAE 62.1 ventilation rates (CFM per person + CFM per sq ft)\n  const ventilationRates = {\n    'residential': { perPerson: 5, perSqft: 0.03 },\n    'office': { perPerson: 5, perSqft: 0.06 },\n    'retail': { perPerson: 7.5, perSqft: 0.12 },\n    'restaurant': { perPerson: 7.5, perSqft: 0.18 },\n    'warehouse': { perPerson: 5, perSqft: 0.05 },\n    'hotel': { perPerson: 5, perSqft: 0.06 }\n  };\n  \n  const rates = ventilationRates[buildingType] || ventilationRates['office'];\n  const requiredVentilation = (occupancy * rates.perPerson) + (sqft * rates.perSqft);\n  \n  document.getElementById('ventilation-cfm').value = Math.ceil(requiredVentilation);\n  \n  // Auto-estimate occupancy if not provided\n  if (!document.getElementById('occupancy').value && sqft > 0) {\n    const occupancyDensity = {\n      'residential': 150, // sq ft per person\n      'office': 200,\n      'retail': 30,\n      'restaurant': 15,\n      'warehouse': 500,\n      'hotel': 300\n    };\n    \n    const density = occupancyDensity[buildingType] || 200;\n    document.getElementById('occupancy').value = Math.max(1, Math.ceil(sqft / density));\n    \n    // Recalculate ventilation with estimated occupancy\n    const newOccupancy = parseInt(document.getElementById('occupancy').value);\n    const newVentilation = (newOccupancy * rates.perPerson) + (sqft * rates.perSqft);\n    document.getElementById('ventilation-cfm').value = Math.ceil(newVentilation);\n  }\n  \n  // Estimate ductwork lengths if not provided\n  if (sqft > 0) {\n    const avgDimension = Math.sqrt(sqft);\n    \n    if (!document.getElementById('main-trunk-length').value) {\n      document.getElementById('main-trunk-length').value = Math.ceil(avgDimension * 0.8);\n    }\n    if (!document.getElementById('branch-ductwork').value) {\n      document.getElementById('branch-ductwork').value = Math.ceil(avgDimension * 2.5);\n    }\n    if (!document.getElementById('return-ductwork').value) {\n      document.getElementById('return-ductwork').value = Math.ceil(avgDimension * 1.2);\n    }\n    if (!document.getElementById('diffusers').value) {\n      document.getElementById('diffusers').value = Math.max(1, Math.ceil(sqft / 150));\n    }\n  }\n}\n\nfunction calculateHVAC() {\n  const data = collectFormData();\n  const validation = validateInputs(data);\n  \n  if (!validation.isValid) {\n    alert('Please fix the following errors:\\n' + validation.errors.join('\\n'));\n    return;\n  }\n  \n  const results = compute(data);\n  displayResults(results);\n  displayExplanation(results, data);\n  \n  document.getElementById('results').style.display = 'block';\n  document.getElementById('explanation').style.display = 'block';\n  \n  // Emit calculator usage event for analytics\n  document.dispatchEvent(new CustomEvent('calculator:used', {\n    detail: {\n      type: 'hvac',\n      buildingType: data.buildingType,\n      sqft: data.totalSqft,\n      systemType: data.systemType\n    }\n  }));\n}\n\nfunction collectFormData() {\n  return {\n    buildingType: document.getElementById('building-type').value,\n    totalSqft: parseFloat(document.getElementById('total-sqft').value) || 0,\n    ceilingHeight: parseFloat(document.getElementById('ceiling-height').value) || 9,\n    climateZone: document.getElementById('climate-zone').value,\n    insulationLevel: document.getElementById('insulation-level').value,\n    windowArea: parseFloat(document.getElementById('window-area').value) || 0,\n    windowType: document.getElementById('window-type').value,\n    occupancy: parseInt(document.getElementById('occupancy').value) || 0,\n    systemType: document.getElementById('system-type').value,\n    efficiencyRating: document.getElementById('efficiency-rating').value,\n    ventilationCfm: parseFloat(document.getElementById('ventilation-cfm').value) || 0,\n    zones: parseInt(document.getElementById('zones').value) || 1,\n    ductMaterial: document.getElementById('duct-material').value,\n    ductInsulation: document.getElementById('duct-insulation').value,\n    mainTrunkLength: parseFloat(document.getElementById('main-trunk-length').value) || 0,\n    branchDuctwork: parseFloat(document.getElementById('branch-ductwork').value) || 0,\n    returnDuctwork: parseFloat(document.getElementById('return-ductwork').value) || 0,\n    diffusers: parseInt(document.getElementById('diffusers').value) || 0,\n    region: document.getElementById('region').value,\n    includeLabor: document.getElementById('include-labor').value === 'yes'\n  };\n}\n\nfunction validateInputs(data) {\n  const errors = [];\n  \n  if (data.totalSqft <= 0) errors.push('Total floor area must be greater than 0');\n  if (data.totalSqft > 1000000) errors.push('Floor area seems too large (max 1,000,000 sq ft)');\n  if (data.windowArea > data.totalSqft) errors.push('Window area cannot exceed total floor area');\n  if (data.occupancy <= 0) errors.push('Must specify building occupancy');\n  \n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n}\n\nexport function compute(data) {\n  // Calculate total thermal load using simplified Manual J methodology\n  const thermalLoad = calculateThermalLoad(data);\n  \n  // Size equipment based on thermal load\n  const equipmentSizing = sizeEquipment(thermalLoad, data);\n  \n  // Size ductwork based on airflow requirements\n  const ductworkSizing = sizeDuctwork(equipmentSizing.totalCfm, data);\n  \n  // Calculate material quantities\n  const materialQuantities = calculateMaterials(data, equipmentSizing, ductworkSizing);\n  \n  // Regional pricing\n  const pricing = getRegionalPricing(data.region);\n  \n  // Cost calculations\n  const costs = {\n    equipment: calculateEquipmentCost(equipmentSizing, data, pricing),\n    ductwork: calculateDuctworkCost(materialQuantities.ductwork, data, pricing),\n    accessories: materialQuantities.accessories * pricing.averageAccessory,\n    controls: data.zones * pricing.zoneControls,\n    installation: 0 // Will be calculated as labor multiplier\n  };\n  \n  const materialCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n  const laborCost = data.includeLabor ? materialCost * pricing.laborMultiplier : 0;\n  const totalCost = materialCost + laborCost;\n  \n  return {\n    // Load Analysis\n    thermalLoad: thermalLoad,\n    \n    // Equipment Sizing\n    equipmentSizing: equipmentSizing,\n    \n    // Ductwork Design\n    ductworkSizing: ductworkSizing,\n    \n    // Material Quantities\n    materialQuantities: materialQuantities,\n    \n    // Cost Analysis\n    costs: costs,\n    materialCost: materialCost,\n    laborCost: laborCost,\n    totalCost: totalCost,\n    \n    pricing: pricing\n  };\n}\n\nfunction calculateThermalLoad(data) {\n  // Simplified thermal load calculation (real Manual J is much more complex)\n  \n  // Base load factors by building type (BTU/hr per sq ft)\n  const baseLoadFactors = {\n    'residential': 25,\n    'office': 30,\n    'retail': 35,\n    'restaurant': 45,\n    'warehouse': 20,\n    'hotel': 28\n  };\n  \n  const baseLoad = data.totalSqft * (baseLoadFactors[data.buildingType] || 30);\n  \n  // Climate zone adjustment factors\n  const climateFactors = {\n    '1A': 1.4, '2A': 1.3, '3A': 1.2, '3B': 1.1,\n    '4A': 1.0, '4B': 0.9, '5A': 0.8, '6A': 0.7\n  };\n  \n  const climateAdjustedLoad = baseLoad * (climateFactors[data.climateZone] || 1.0);\n  \n  // Window heat gain (BTU/hr per sq ft)\n  const windowHeatGain = {\n    'single': 200,\n    'double': 120,\n    'low-e': 80,\n    'triple': 60\n  };\n  \n  const windowLoad = data.windowArea * (windowHeatGain[data.windowType] || 120);\n  \n  // Occupancy load (300 BTU/hr per person)\n  const occupancyLoad = data.occupancy * 300;\n  \n  // Insulation adjustment\n  const insulationFactors = {\n    'poor': 1.3,\n    'average': 1.0,\n    'good': 0.8,\n    'excellent': 0.6\n  };\n  \n  const totalSensibleLoad = (climateAdjustedLoad + windowLoad + occupancyLoad) * \n    (insulationFactors[data.insulationLevel] || 1.0);\n  \n  // Latent load (approximately 30% of sensible in humid climates)\n  const latentLoad = totalSensibleLoad * 0.3;\n  \n  const totalLoad = totalSensibleLoad + latentLoad;\n  \n  return {\n    sensibleLoad: Math.round(totalSensibleLoad),\n    latentLoad: Math.round(latentLoad),\n    totalLoad: Math.round(totalLoad),\n    tonsRequired: Math.round((totalLoad / 12000) * 10) / 10 // Round to 0.1 ton\n  };\n}\n\nfunction sizeEquipment(thermalLoad, data) {\n  // Size equipment to handle calculated load with safety factor\n  const requiredTons = Math.ceil(thermalLoad.tonsRequired * 1.15); // 15% safety factor\n  \n  // CFM sizing (typically 400 CFM per ton for cooling)\n  const coolingCfm = requiredTons * 400;\n  const ventilationCfm = data.ventilationCfm || 0;\n  const totalCfm = Math.max(coolingCfm, coolingCfm + ventilationCfm * 0.3); // Blend ventilation\n  \n  // Equipment efficiency factors\n  const efficiencyMultipliers = {\n    'standard': 1.0,\n    'high': 0.85,\n    'premium': 0.75\n  };\n  \n  const efficiencyFactor = efficiencyMultipliers[data.efficiencyRating] || 1.0;\n  \n  return {\n    requiredTons: requiredTons,\n    coolingCfm: coolingCfm,\n    ventilationCfm: ventilationCfm,\n    totalCfm: totalCfm,\n    systemCount: Math.ceil(requiredTons / 5), // Max 5 tons per unit typically\n    efficiencyFactor: efficiencyFactor\n  };\n}\n\nfunction sizeDuctwork(totalCfm, data) {\n  // Main trunk sizing (typically 700-900 FPM velocity)\n  const trunkVelocity = 800; // FPM\n  const trunkArea = totalCfm / trunkVelocity; // sq in\n  const trunkDiameter = Math.sqrt(trunkArea / 0.785); // inches (round duct equivalent)\n  const trunkSize = getDuctSize(trunkDiameter);\n  \n  // Branch duct sizing (600-700 FPM)\n  const branchVelocity = 650; // FPM\n  const cfmPerDiffuser = totalCfm / data.diffusers;\n  const branchArea = cfmPerDiffuser / branchVelocity;\n  const branchDiameter = Math.sqrt(branchArea / 0.785);\n  const branchSize = getDuctSize(branchDiameter);\n  \n  // Return air sizing (500 FPM)\n  const returnVelocity = 500; // FPM\n  const returnArea = (totalCfm * 0.9) / returnVelocity; // 90% return air\n  const returnDiameter = Math.sqrt(returnArea / 0.785);\n  const returnSize = getDuctSize(returnDiameter);\n  \n  return {\n    trunkSize: trunkSize,\n    branchSize: branchSize,\n    returnSize: returnSize,\n    totalCfm: totalCfm,\n    systemPressure: calculateSystemPressure(data)\n  };\n}\n\nfunction getDuctSize(diameter) {\n  // Convert diameter to standard rectangular or round duct sizes\n  const standardSizes = [\n    { size: '6\"', diameter: 6 },\n    { size: '8\"', diameter: 8 },\n    { size: '10\"', diameter: 10 },\n    { size: '12\"', diameter: 12 },\n    { size: '14\"', diameter: 14 },\n    { size: '16\"', diameter: 16 },\n    { size: '18\"', diameter: 18 },\n    { size: '20\"', diameter: 20 },\n    { size: '24\"', diameter: 24 }\n  ];\n  \n  for (let size of standardSizes) {\n    if (diameter <= size.diameter) {\n      return size.size;\n    }\n  }\n  \n  return '24\"'; // Max size\n}\n\nfunction calculateSystemPressure(data) {\n  // Simplified static pressure calculation\n  const basePressure = 0.5; // inches of water\n  const ductLengthFactor = (data.mainTrunkLength + data.branchDuctwork) / 100;\n  const zonesFactor = data.zones * 0.1;\n  \n  return basePressure + ductLengthFactor + zonesFactor;\n}\n\nfunction calculateMaterials(data, equipmentSizing, ductworkSizing) {\n  const totalDuctwork = data.mainTrunkLength + data.branchDuctwork + data.returnDuctwork;\n  \n  // Estimate fittings (elbows, tees, reducers)\n  const fittingsCount = Math.ceil(totalDuctwork / 10); // 1 fitting per 10 feet\n  \n  // Accessories (dampers, registers, grilles)\n  const accessories = data.diffusers + Math.ceil(data.zones * 2); // Return grilles\n  \n  // Insulation (if specified)\n  const insulationSqft = data.ductInsulation !== 'none' ? \n    totalDuctwork * getAverageDuctPerimeter(ductworkSizing) : 0;\n  \n  return {\n    ductwork: {\n      total: totalDuctwork,\n      trunk: data.mainTrunkLength,\n      branch: data.branchDuctwork,\n      return: data.returnDuctwork\n    },\n    fittings: fittingsCount,\n    accessories: accessories,\n    insulationSqft: insulationSqft,\n    equipmentCount: equipmentSizing.systemCount\n  };\n}\n\nfunction getAverageDuctPerimeter(ductworkSizing) {\n  // Simplified average perimeter calculation for insulation\n  const avgDiameter = 12; // inches, rough average\n  return (avgDiameter * Math.PI) / 12; // feet\n}\n\nfunction calculateEquipmentCost(equipmentSizing, data, pricing) {\n  const systemCost = equipmentSizing.systemCount * pricing.equipment[data.systemType][equipmentSizing.requiredTons] || \n    pricing.equipment['split-system'][3]; // Default fallback\n  \n  const efficiencyUpcharge = data.efficiencyRating !== 'standard' ? systemCost * 0.25 : 0;\n  \n  return systemCost + efficiencyUpcharge;\n}\n\nfunction calculateDuctworkCost(ductwork, data, pricing) {\n  const materialPricing = pricing.ductwork[data.ductMaterial];\n  const ductCost = ductwork.total * materialPricing.perFoot;\n  \n  const insulationCost = data.ductInsulation !== 'none' ? \n    ductwork.total * pricing.ductInsulation[data.ductInsulation] : 0;\n  \n  return ductCost + insulationCost;\n}\n\nfunction getRegionalPricing(region) {\n  const basePricing = {\n    'southeast': {\n      equipment: {\n        'split-system': { 2: 3500, 3: 4200, 4: 5100, 5: 6200 },\n        'package-unit': { 2: 4200, 3: 5000, 4: 6100, 5: 7400 },\n        'vrf': { 2: 8500, 3: 11000, 4: 14000, 5: 17500 },\n        'chiller': { 2: 12000, 3: 16000, 4: 20000, 5: 25000 },\n        'gas-furnace': { 2: 2800, 3: 3400, 4: 4200, 5: 5100 }\n      },\n      ductwork: {\n        galvanized: { perFoot: 8.50 },\n        aluminum: { perFoot: 6.75 },\n        fiberglass: { perFoot: 5.25 },\n        flexible: { perFoot: 3.80 }\n      },\n      ductInsulation: {\n        r4: 2.20,\n        r6: 2.85,\n        r8: 3.50\n      },\n      zoneControls: 450,\n      averageAccessory: 35,\n      laborMultiplier: 2.2\n    },\n    'northeast': {\n      equipment: {\n        'split-system': { 2: 4200, 3: 5000, 4: 6100, 5: 7400 },\n        'package-unit': { 2: 5000, 3: 6000, 4: 7300, 5: 8800 },\n        'vrf': { 2: 10200, 3: 13200, 4: 16800, 5: 21000 },\n        'chiller': { 2: 14400, 3: 19200, 4: 24000, 5: 30000 },\n        'gas-furnace': { 2: 3400, 3: 4100, 4: 5000, 5: 6100 }\n      },\n      ductwork: {\n        galvanized: { perFoot: 10.20 },\n        aluminum: { perFoot: 8.10 },\n        fiberglass: { perFoot: 6.30 },\n        flexible: { perFoot: 4.55 }\n      },\n      ductInsulation: {\n        r4: 2.65,\n        r6: 3.40,\n        r8: 4.20\n      },\n      zoneControls: 540,\n      averageAccessory: 42,\n      laborMultiplier: 2.8\n    }\n  };\n  \n  // Use southeast as default if region not found\n  return basePricing[region] || basePricing['southeast'];\n}\n\nfunction displayResults(results) {\n  const content = document.getElementById('results-content');\n  \n  content.innerHTML = `\n    <div class=\"results-grid\">\n      <div class=\"result-section\">\n        <h4>Thermal Load Analysis</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Cooling Load:</span>\n          <span class=\"value\">${formatNumber(results.thermalLoad.totalLoad)} BTU/hr</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Required Capacity:</span>\n          <span class=\"value\">${results.thermalLoad.tonsRequired} tons</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Sensible Load:</span>\n          <span class=\"value\">${formatNumber(results.thermalLoad.sensibleLoad)} BTU/hr</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Latent Load:</span>\n          <span class=\"value\">${formatNumber(results.thermalLoad.latentLoad)} BTU/hr</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Equipment Sizing</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">System Capacity:</span>\n          <span class=\"value\">${results.equipmentSizing.requiredTons} tons</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Airflow:</span>\n          <span class=\"value\">${formatNumber(results.equipmentSizing.totalCfm)} CFM</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Number of Units:</span>\n          <span class=\"value\">${results.equipmentSizing.systemCount}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Ventilation Air:</span>\n          <span class=\"value\">${formatNumber(results.equipmentSizing.ventilationCfm)} CFM</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Ductwork Design</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Main Trunk Size:</span>\n          <span class=\"value\">${results.ductworkSizing.trunkSize}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Branch Duct Size:</span>\n          <span class=\"value\">${results.ductworkSizing.branchSize}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Return Duct Size:</span>\n          <span class=\"value\">${results.ductworkSizing.returnSize}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">System Pressure:</span>\n          <span class=\"value\">${formatNumber(results.ductworkSizing.systemPressure, 2)} in. W.C.</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Material Quantities</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Ductwork:</span>\n          <span class=\"value\">${formatNumber(results.materialQuantities.ductwork.total)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Fittings:</span>\n          <span class=\"value\">${results.materialQuantities.fittings} pcs</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Diffusers & Grilles:</span>\n          <span class=\"value\">${results.materialQuantities.accessories} pcs</span>\n        </div>\n        ${results.materialQuantities.insulationSqft > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Duct Insulation:</span>\n          <span class=\"value\">${formatNumber(results.materialQuantities.insulationSqft)} sq ft</span>\n        </div>\n        ` : ''}\n      </div>\n\n      <div class=\"result-section cost-summary\">\n        <h4>Cost Summary</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Equipment:</span>\n          <span class=\"value\">${formatCurrency(results.costs.equipment)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Ductwork:</span>\n          <span class=\"value\">${formatCurrency(results.costs.ductwork)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Controls:</span>\n          <span class=\"value\">${formatCurrency(results.costs.controls)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.materialCost)}</span>\n        </div>\n        ${results.laborCost > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Labor Cost:</span>\n          <span class=\"value\">${formatCurrency(results.laborCost)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item total\">\n          <span class=\"label\">Total Cost:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost)}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function explain(data) {\n  const results = compute(data);\n  \n  return `\n    <div class=\"explanation-content\">\n      <h4>HVAC System Design Methodology</h4>\n      \n      <h5>1. Thermal Load Calculation (Simplified Manual J)</h5>\n      <p>Base Building Load: ${data.totalSqft} sq ft × ${results.thermalLoad.totalLoad / data.totalSqft} BTU/hr/sq ft = ${formatNumber(results.thermalLoad.totalLoad)} BTU/hr</p>\n      <p>Climate Zone Adjustment: ${data.climateZone} (varies cooling/heating requirements)</p>\n      <p>Window Heat Gain: ${data.windowArea} sq ft × ${data.windowType} glazing factor</p>\n      <p>Occupancy Load: ${data.occupancy} people × 300 BTU/hr/person = ${data.occupancy * 300} BTU/hr</p>\n      <p><strong>Total Load: ${formatNumber(results.thermalLoad.totalLoad)} BTU/hr (${results.thermalLoad.tonsRequired} tons)</strong></p>\n      \n      <h5>2. Equipment Sizing</h5>\n      <p>Required Capacity: ${results.thermalLoad.tonsRequired} tons × 1.15 safety factor = ${results.equipmentSizing.requiredTons} tons</p>\n      <p>Airflow Rate: ${results.equipmentSizing.requiredTons} tons × 400 CFM/ton = ${formatNumber(results.equipmentSizing.coolingCfm)} CFM</p>\n      <p>Ventilation Air: ${formatNumber(results.equipmentSizing.ventilationCfm)} CFM (ASHRAE 62.1)</p>\n      <p>Total System Airflow: ${formatNumber(results.equipmentSizing.totalCfm)} CFM</p>\n      \n      <h5>3. Ductwork Sizing</h5>\n      <p>Main Trunk: ${formatNumber(results.equipmentSizing.totalCfm)} CFM ÷ 800 FPM = ${results.ductworkSizing.trunkSize}</p>\n      <p>Branch Ducts: ${formatNumber(results.equipmentSizing.totalCfm / (data.diffusers || 1))} CFM/diffuser ÷ 650 FPM = ${results.ductworkSizing.branchSize}</p>\n      <p>Return Air: 90% return air ÷ 500 FPM = ${results.ductworkSizing.returnSize}</p>\n      \n      <h5>4. System Pressure</h5>\n      <p>Static Pressure: ${formatNumber(results.ductworkSizing.systemPressure, 2)} in. W.C.</p>\n      <p>Based on ductwork length, fittings, and zoning requirements</p>\n      \n      <div class=\"formula-note\">\n        <p><strong>Standards Applied:</strong></p>\n        <ul>\n          <li>ASHRAE 90.1: Energy efficiency standards</li>\n          <li>ASHRAE 62.1: Ventilation for acceptable indoor air quality</li>\n          <li>Manual J: Residential load calculation methodology</li>\n          <li>Manual D: Ductwork design and sizing</li>\n          <li>SMACNA: Sheet metal ductwork construction standards</li>\n        </ul>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayExplanation(results, data) {\n  const content = document.getElementById('explanation-content');\n  content.innerHTML = explain(data);\n}\n\nfunction saveFormState() {\n  const formData = collectFormData();\n  saveState('hvac', formData);\n}\n\nfunction resetForm() {\n  document.querySelectorAll('input').forEach(input => {\n    input.value = '';\n  });\n  document.querySelectorAll('select').forEach(select => {\n    select.selectedIndex = 0;\n  });\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('explanation').style.display = 'none';\n  saveState('hvac', {});\n}\n\nfunction exportResults(format) {\n  const data = collectFormData();\n  const results = compute(data);\n  \n  const exportData = {\n    'Project': 'HVAC System Calculation',\n    'Date': new Date().toLocaleDateString(),\n    'Building Type': data.buildingType,\n    'Floor Area (sq ft)': data.totalSqft,\n    'Climate Zone': data.climateZone,\n    'Total Load (BTU/hr)': formatNumber(results.thermalLoad.totalLoad),\n    'Required Capacity (tons)': results.thermalLoad.tonsRequired,\n    'System Airflow (CFM)': formatNumber(results.equipmentSizing.totalCfm),\n    'Main Trunk Size': results.ductworkSizing.trunkSize,\n    'Material Cost': formatCurrency(results.materialCost),\n    'Total Cost': formatCurrency(results.totalCost)\n  };\n  \n  const filename = `hvac-calculation-${new Date().toISOString().split('T')[0]}`;\n  \n  switch(format) {\n    case 'csv':\n      exportToCsv(exportData, filename);\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, filename);\n      break;\n    case 'pdf':\n      exportToPdf(exportData, filename, 'HVAC System Calculation');\n      break;\n  }\n}\n\nexport function meta() {\n  return {\n    id: \"hvac\",\n    title: \"Professional HVAC Calculator\",\n    category: \"mep\",\n    description: \"Calculate HVAC system components, ductwork sizing, and thermal load calculations with ASHRAE standards and Manual J methodology\"\n  };\n}","size_bytes":36936},"assets/js/calculators/insulation.js":{"content":"import { Bus } from '../core/bus.js';\nimport { Units } from '../core/units.js';\nimport { Validate } from '../core/validate.js';\nimport { Pricing } from '../core/pricing.js';\nimport { Export } from '../core/export.js';\nimport { Store } from '../core/store.js';\nimport { UI } from '../core/ui.js';\n\nclass InsulationCalculator {\n  constructor() {\n    this.id = 'insulation';\n    this.name = 'Insulation Calculator';\n    this.description = 'Calculate batt, blown, and rigid insulation materials with R-value calculations by assembly type';\n\n    this.state = {\n      // Area calculations\n      wallArea: 1000,\n      ceilingArea: 1200,\n      floorArea: 1000,\n\n      // Assembly types\n      wallAssembly: 'wood-frame', // wood-frame, steel-frame, masonry\n      ceilingAssembly: 'wood-joist', // wood-joist, steel-joist, concrete\n      floorAssembly: 'wood-frame', // wood-frame, concrete-slab, crawlspace\n\n      // Target R-values\n      wallRValue: 13,\n      ceilingRValue: 30,\n      floorRValue: 19,\n\n      // Insulation types\n      wallInsulationType: 'batt', // batt, blown, rigid, spray\n      ceilingInsulationType: 'blown', // batt, blown, rigid\n      floorInsulationType: 'batt', // batt, rigid\n\n      // Cavity dimensions (for batt calculations)\n      wallCavityDepth: 3.5, // inches\n      ceilingCavityDepth: 9.25, // inches\n      floorCavityDepth: 9.25, // inches\n\n      // Regional settings\n      region: 'national',\n      wastePercent: 10,\n\n      // Output\n      results: null\n    };\n\n    // R-value per inch for different insulation types\n    this.rValuePerInch = {\n      batt: {\n        fiberglass: 3.2,\n        rockwool: 3.3,\n        cotton: 3.4\n      },\n      blown: {\n        fiberglass: 2.5,\n        cellulose: 3.6,\n        rockwool: 2.8\n      },\n      rigid: {\n        eps: 4.0, // Expanded polystyrene\n        xps: 5.0, // Extruded polystyrene\n        polyiso: 6.0 // Polyisocyanurate\n      },\n      spray: {\n        open_cell: 3.5,\n        closed_cell: 6.0\n      }\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.bindFormElements();\n    this.setupEventListeners();\n    this.loadStoredData();\n    this.calculate();\n  }\n\n  bindFormElements() {\n    this.elements = {\n      // Areas\n      wallArea: document.getElementById('wall-area'),\n      ceilingArea: document.getElementById('ceiling-area'),\n      floorArea: document.getElementById('floor-area'),\n\n      // Assembly types\n      wallAssembly: document.getElementById('wall-assembly'),\n      ceilingAssembly: document.getElementById('ceiling-assembly'),\n      floorAssembly: document.getElementById('floor-assembly'),\n\n      // Target R-values\n      wallRValue: document.getElementById('wall-r-value'),\n      ceilingRValue: document.getElementById('ceiling-r-value'),\n      floorRValue: document.getElementById('floor-r-value'),\n\n      // Insulation types\n      wallInsulationType: document.getElementById('wall-insulation-type'),\n      ceilingInsulationType: document.getElementById('ceiling-insulation-type'),\n      floorInsulationType: document.getElementById('floor-insulation-type'),\n\n      // Cavity depths\n      wallCavityDepth: document.getElementById('wall-cavity-depth'),\n      ceilingCavityDepth: document.getElementById('ceiling-cavity-depth'),\n      floorCavityDepth: document.getElementById('floor-cavity-depth'),\n\n      // Regional settings\n      region: document.getElementById('region'),\n      wastePercent: document.getElementById('waste-percent'),\n\n      // Output elements\n      resultsContainer: document.getElementById('results'),\n      summaryContainer: document.getElementById('summary'),\n      exportContainer: document.getElementById('export-options')\n    };\n\n    // Set initial values\n    Object.keys(this.state).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        this.elements[key].value = this.state[key];\n      }\n    });\n  }\n\n  setupEventListeners() {\n    // Form change events\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && this.elements[key].addEventListener) {\n        this.elements[key].addEventListener('change', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n\n        this.elements[key].addEventListener('input', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n      }\n    });\n\n    // Export buttons\n    Bus.on('export:csv', () => this.exportResults('csv'));\n    Bus.on('export:excel', () => this.exportResults('excel'));\n    Bus.on('export:pdf', () => this.exportResults('pdf'));\n\n    // Climate zone preset buttons\n    const presetButtons = document.querySelectorAll('.climate-preset');\n    presetButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const zone = e.target.dataset.zone;\n        this.applyClimateZonePreset(zone);\n      });\n    });\n  }\n\n  updateStateFromForm() {\n    // Update state from form elements\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        const value = parseFloat(this.elements[key].value) || this.elements[key].value || 0;\n        this.state[key] = value;\n      }\n    });\n\n    // Store state\n    Store.set(`calc-${this.id}-state`, this.state);\n  }\n\n  loadStoredData() {\n    const stored = Store.get(`calc-${this.id}-state`);\n    if (stored) {\n      Object.assign(this.state, stored);\n      this.bindFormElements();\n    }\n  }\n\n  applyClimateZonePreset(zone) {\n    const presets = {\n      '1': { wallRValue: 13, ceilingRValue: 30, floorRValue: 13 }, // Hot\n      '2': { wallRValue: 13, ceilingRValue: 30, floorRValue: 13 }, // Hot-Humid\n      '3': { wallRValue: 20, ceilingRValue: 38, floorRValue: 25 }, // Warm\n      '4': { wallRValue: 20, ceilingRValue: 38, floorRValue: 30 }, // Mixed\n      '5': { wallRValue: 20, ceilingRValue: 49, floorRValue: 30 }, // Cool\n      '6': { wallRValue: 20, ceilingRValue: 49, floorRValue: 30 }, // Cold\n      '7': { wallRValue: 21, ceilingRValue: 49, floorRValue: 30 }, // Very Cold\n      '8': { wallRValue: 21, ceilingRValue: 60, floorRValue: 30 }  // Subarctic\n    };\n\n    const preset = presets[zone];\n    if (preset) {\n      Object.assign(this.state, preset);\n      this.bindFormElements();\n      this.calculate();\n      UI.showMessage(`Applied Climate Zone ${zone} R-value requirements`);\n    }\n  }\n\n  calculate() {\n    try {\n      const results = {\n        walls: this.calculateWallInsulation(),\n        ceiling: this.calculateCeilingInsulation(),\n        floor: this.calculateFloorInsulation()\n      };\n\n      // Calculate total costs\n      results.costs = this.calculateCosts(results);\n\n      // Apply waste factor\n      results.materialsWithWaste = this.applyWasteFactor(results);\n\n      this.state.results = results;\n      this.displayResults();\n\n      Bus.emit('calculation:complete', {\n        calculator: this.id,\n        results: this.state.results\n      });\n\n    } catch (error) {\n      console.error('Calculation error:', error);\n      UI.showError('Calculation failed. Please check your inputs.');\n    }\n  }\n\n  calculateWallInsulation() {\n    const area = this.state.wallArea;\n    const targetR = this.state.wallRValue;\n    const insulationType = this.state.wallInsulationType;\n    const cavityDepth = this.state.wallCavityDepth;\n\n    return this.calculateInsulationForArea({\n      area,\n      targetR,\n      insulationType,\n      cavityDepth,\n      assembly: this.state.wallAssembly,\n      location: 'walls'\n    });\n  }\n\n  calculateCeilingInsulation() {\n    const area = this.state.ceilingArea;\n    const targetR = this.state.ceilingRValue;\n    const insulationType = this.state.ceilingInsulationType;\n    const cavityDepth = this.state.ceilingCavityDepth;\n\n    return this.calculateInsulationForArea({\n      area,\n      targetR,\n      insulationType,\n      cavityDepth,\n      assembly: this.state.ceilingAssembly,\n      location: 'ceiling'\n    });\n  }\n\n  calculateFloorInsulation() {\n    const area = this.state.floorArea;\n    const targetR = this.state.floorRValue;\n    const insulationType = this.state.floorInsulationType;\n    const cavityDepth = this.state.floorCavityDepth;\n\n    return this.calculateInsulationForArea({\n      area,\n      targetR,\n      insulationType,\n      cavityDepth,\n      assembly: this.state.floorAssembly,\n      location: 'floor'\n    });\n  }\n\n  calculateInsulationForArea({ area, targetR, insulationType, cavityDepth, assembly, location }) {\n    let materials = {};\n    let thickness = 0;\n    let actualR = 0;\n\n    switch (insulationType) {\n      case 'batt':\n        return this.calculateBattInsulation(area, targetR, cavityDepth);\n      case 'blown':\n        return this.calculateBlownInsulation(area, targetR, cavityDepth);\n      case 'rigid':\n        return this.calculateRigidInsulation(area, targetR);\n      case 'spray':\n        return this.calculateSprayInsulation(area, targetR, cavityDepth);\n      default:\n        return { materials: {}, thickness: 0, actualR: 0, area };\n    }\n  }\n\n  calculateBattInsulation(area, targetR, cavityDepth) {\n    // Standard batt thicknesses and R-values\n    const battOptions = [\n      { thickness: 3.5, rValue: 11, type: 'R-11' },\n      { thickness: 3.5, rValue: 13, type: 'R-13' },\n      { thickness: 5.5, rValue: 15, type: 'R-15' },\n      { thickness: 5.5, rValue: 19, type: 'R-19' },\n      { thickness: 6.25, rValue: 19, type: 'R-19' },\n      { thickness: 8.25, rValue: 25, type: 'R-25' },\n      { thickness: 9.25, rValue: 30, type: 'R-30' },\n      { thickness: 12, rValue: 38, type: 'R-38' }\n    ];\n\n    // Find best fit for cavity and R-value\n    let selectedBatt = battOptions.find(batt =>\n      batt.thickness <= cavityDepth && batt.rValue >= targetR\n    );\n\n    if (!selectedBatt) {\n      // If no exact fit, get the highest R-value that fits\n      selectedBatt = battOptions\n        .filter(batt => batt.thickness <= cavityDepth)\n        .sort((a, b) => b.rValue - a.rValue)[0];\n    }\n\n    if (!selectedBatt) {\n      selectedBatt = battOptions[0]; // Default fallback\n    }\n\n    // Calculate square footage needed\n    const sqftNeeded = area;\n\n    // Standard batt coverage (varies by type)\n    const coveragePerBundle = selectedBatt.rValue <= 15 ? 88 : 64; // sq ft per bundle\n    const bundlesNeeded = Math.ceil(sqftNeeded / coveragePerBundle);\n\n    return {\n      materials: {\n        battInsulation: {\n          type: selectedBatt.type,\n          bundles: bundlesNeeded,\n          coverage: coveragePerBundle,\n          totalCoverage: bundlesNeeded * coveragePerBundle\n        }\n      },\n      thickness: selectedBatt.thickness,\n      actualR: selectedBatt.rValue,\n      area: area,\n      specifications: {\n        battType: selectedBatt.type,\n        thickness: `${selectedBatt.thickness}\"`,\n        cavityFit: selectedBatt.thickness <= cavityDepth ? 'Fits' : 'Requires compression'\n      }\n    };\n  }\n\n  calculateBlownInsulation(area, targetR, cavityDepth) {\n    // Default to cellulose for blown insulation\n    const rPerInch = this.rValuePerInch.blown.cellulose;\n    const requiredThickness = targetR / rPerInch;\n\n    // Density calculations (typical for cellulose)\n    const density = 2.5; // lbs per cubic foot settled\n    const settlingFactor = 1.15; // Account for settling\n\n    const volume = area * (requiredThickness / 12) * settlingFactor; // cubic feet\n    const weightNeeded = volume * density; // pounds\n\n    // Bags (typically 25 lb bags for blown cellulose)\n    const bagsNeeded = Math.ceil(weightNeeded / 25);\n\n    return {\n      materials: {\n        blownInsulation: {\n          type: 'Cellulose',\n          bags: bagsNeeded,\n          weightPerBag: 25,\n          totalWeight: bagsNeeded * 25,\n          coverage: area\n        }\n      },\n      thickness: requiredThickness,\n      actualR: requiredThickness * rPerInch,\n      area: area,\n      specifications: {\n        material: 'Blown Cellulose',\n        thickness: `${requiredThickness.toFixed(1)}\"`,\n        density: `${density} lbs/cu ft`,\n        settlingFactor: settlingFactor\n      }\n    };\n  }\n\n  calculateRigidInsulation(area, targetR) {\n    // Default to XPS for rigid insulation\n    const rPerInch = this.rValuePerInch.rigid.xps;\n    const requiredThickness = targetR / rPerInch;\n\n    // Standard rigid board thicknesses\n    const standardThicknesses = [0.5, 0.75, 1, 1.5, 2, 2.5, 3, 4];\n    const selectedThickness = standardThicknesses.find(t => t >= requiredThickness) ||\n                             standardThicknesses[standardThicknesses.length - 1];\n\n    // Standard board size is 4' x 8' = 32 sq ft\n    const boardArea = 32;\n    const boardsNeeded = Math.ceil(area / boardArea);\n\n    return {\n      materials: {\n        rigidInsulation: {\n          type: 'XPS',\n          boards: boardsNeeded,\n          boardSize: \"4' x 8'\",\n          thickness: selectedThickness,\n          totalCoverage: boardsNeeded * boardArea\n        }\n      },\n      thickness: selectedThickness,\n      actualR: selectedThickness * rPerInch,\n      area: area,\n      specifications: {\n        material: 'XPS Rigid Board',\n        thickness: `${selectedThickness}\"`,\n        rValuePerInch: rPerInch,\n        boardDimensions: \"4' x 8'\"\n      }\n    };\n  }\n\n  calculateSprayInsulation(area, targetR, cavityDepth) {\n    // Default to closed cell spray foam\n    const rPerInch = this.rValuePerInch.spray.closed_cell;\n    const requiredThickness = Math.min(targetR / rPerInch, cavityDepth);\n\n    // Board feet calculation (thickness in inches × area in sq ft)\n    const boardFeet = (requiredThickness / 12) * area * 12; // Convert to board feet\n\n    // Spray foam is typically sold by board feet or by kits\n    // Professional application typically ranges from 600-1200 board feet per kit\n    const kitsNeeded = Math.ceil(boardFeet / 600); // Conservative estimate\n\n    return {\n      materials: {\n        sprayFoam: {\n          type: 'Closed Cell',\n          boardFeet: boardFeet,\n          kits: kitsNeeded,\n          coverage: area\n        }\n      },\n      thickness: requiredThickness,\n      actualR: requiredThickness * rPerInch,\n      area: area,\n      specifications: {\n        material: 'Closed Cell Spray Foam',\n        thickness: `${requiredThickness.toFixed(1)}\"`,\n        rValuePerInch: rPerInch,\n        applicationMethod: 'Professional spray application recommended'\n      }\n    };\n  }\n\n  calculateCosts(results) {\n    const pricing = Pricing.getRegionalPricing(this.state.region);\n    const insulationPricing = pricing.insulation || {};\n\n    let materialCosts = 0;\n    let laborCosts = 0;\n\n    // Wall insulation costs\n    materialCosts += this.calculateMaterialCost(results.walls, insulationPricing);\n    laborCosts += this.calculateLaborCost(results.walls, insulationPricing, 'walls');\n\n    // Ceiling insulation costs\n    materialCosts += this.calculateMaterialCost(results.ceiling, insulationPricing);\n    laborCosts += this.calculateLaborCost(results.ceiling, insulationPricing, 'ceiling');\n\n    // Floor insulation costs\n    materialCosts += this.calculateMaterialCost(results.floor, insulationPricing);\n    laborCosts += this.calculateLaborCost(results.floor, insulationPricing, 'floor');\n\n    const subtotal = materialCosts + laborCosts;\n    const overhead = subtotal * 0.15; // 15% overhead\n    const profit = subtotal * 0.10; // 10% profit\n    const total = subtotal + overhead + profit;\n\n    const totalArea = this.state.wallArea + this.state.ceilingArea + this.state.floorArea;\n\n    return {\n      materials: materialCosts,\n      labor: laborCosts,\n      subtotal,\n      overhead,\n      profit,\n      total,\n      region: this.state.region,\n      pricePerSqFt: total / totalArea\n    };\n  }\n\n  calculateMaterialCost(insulationData, pricing) {\n    if (!insulationData.materials) return 0;\n\n    let cost = 0;\n\n    if (insulationData.materials.battInsulation) {\n      const batts = insulationData.materials.battInsulation;\n      cost += (pricing.battInsulation?.price || 45) * batts.bundles;\n    }\n\n    if (insulationData.materials.blownInsulation) {\n      const blown = insulationData.materials.blownInsulation;\n      cost += (pricing.blownInsulation?.price || 12) * blown.bags;\n    }\n\n    if (insulationData.materials.rigidInsulation) {\n      const rigid = insulationData.materials.rigidInsulation;\n      cost += (pricing.rigidInsulation?.price || 25) * rigid.boards;\n    }\n\n    if (insulationData.materials.sprayFoam) {\n      const spray = insulationData.materials.sprayFoam;\n      cost += (pricing.sprayFoam?.price || 1.50) * spray.boardFeet;\n    }\n\n    return cost;\n  }\n\n  calculateLaborCost(insulationData, pricing, location) {\n    if (!insulationData.area) return 0;\n\n    const area = insulationData.area;\n    let laborRate = 0;\n\n    // Different labor rates by insulation type and location\n    if (insulationData.materials.battInsulation) {\n      laborRate = pricing.battInstallation?.price || 1.25;\n    } else if (insulationData.materials.blownInsulation) {\n      laborRate = pricing.blownInstallation?.price || 0.85;\n    } else if (insulationData.materials.rigidInsulation) {\n      laborRate = pricing.rigidInstallation?.price || 2.00;\n    } else if (insulationData.materials.sprayFoam) {\n      laborRate = pricing.sprayInstallation?.price || 1.00; // Usually included in material cost\n    }\n\n    // Location multipliers\n    const locationMultipliers = {\n      walls: 1.0,\n      ceiling: 0.8, // Easier access usually\n      floor: 1.2    // More difficult access\n    };\n\n    return area * laborRate * (locationMultipliers[location] || 1.0);\n  }\n\n  applyWasteFactor(results) {\n    const wasteFactor = 1 + (this.state.wastePercent / 100);\n\n    const withWaste = {\n      walls: this.applyWasteToInsulation(results.walls, wasteFactor),\n      ceiling: this.applyWasteToInsulation(results.ceiling, wasteFactor),\n      floor: this.applyWasteToInsulation(results.floor, wasteFactor)\n    };\n\n    return withWaste;\n  }\n\n  applyWasteToInsulation(insulationData, wasteFactor) {\n    if (!insulationData.materials) return insulationData;\n\n    const withWaste = { ...insulationData, materials: {} };\n\n    Object.keys(insulationData.materials).forEach(key => {\n      const material = { ...insulationData.materials[key] };\n\n      if (material.bundles) {\n        material.bundles = Math.ceil(material.bundles * wasteFactor);\n      }\n      if (material.bags) {\n        material.bags = Math.ceil(material.bags * wasteFactor);\n      }\n      if (material.boards) {\n        material.boards = Math.ceil(material.boards * wasteFactor);\n      }\n      if (material.kits) {\n        material.kits = Math.ceil(material.kits * wasteFactor);\n      }\n\n      withWaste.materials[key] = material;\n    });\n\n    return withWaste;\n  }\n\n  displayResults() {\n    if (!this.state.results || !this.elements.resultsContainer) return;\n\n    const results = this.state.results;\n    const withWaste = results.materialsWithWaste;\n\n    let resultsHtml = '';\n\n    // Wall insulation section\n    resultsHtml += this.formatInsulationSection('Walls', results.walls, withWaste.walls);\n\n    // Ceiling insulation section\n    resultsHtml += this.formatInsulationSection('Ceiling', results.ceiling, withWaste.ceiling);\n\n    // Floor insulation section\n    resultsHtml += this.formatInsulationSection('Floor', results.floor, withWaste.floor);\n\n    this.elements.resultsContainer.innerHTML = resultsHtml;\n\n    // Display cost summary\n    if (this.elements.summaryContainer) {\n      this.elements.summaryContainer.innerHTML = `\n        <div class=\"cost-summary\">\n          <h3>Cost Summary (${results.costs.region})</h3>\n          <div class=\"cost-item\">\n            <span>Materials:</span>\n            <span>$${results.costs.materials.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Labor:</span>\n            <span>$${results.costs.labor.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Overhead (15%):</span>\n            <span>$${results.costs.overhead.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Profit (10%):</span>\n            <span>$${results.costs.profit.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-total\">\n            <span>Total Cost:</span>\n            <span>$${results.costs.total.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-detail\">\n            <small>$${results.costs.pricePerSqFt.toFixed(2)} per sq ft</small>\n          </div>\n        </div>\n      `;\n    }\n\n    // Show export options\n    if (this.elements.exportContainer) {\n      this.elements.exportContainer.style.display = 'block';\n    }\n  }\n\n  formatInsulationSection(title, data, dataWithWaste) {\n    if (!data.materials || Object.keys(data.materials).length === 0) {\n      return `\n        <div class=\"result-group\">\n          <h3>${title}</h3>\n          <div class=\"result-item\">\n            <span>No insulation calculated</span>\n          </div>\n        </div>\n      `;\n    }\n\n    let html = `\n      <div class=\"result-group\">\n        <h3>${title} (${data.area.toLocaleString()} sq ft)</h3>\n        <div class=\"result-item\">\n          <span>Target R-value:</span>\n          <span>R-${data.actualR.toFixed(1)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span>Thickness:</span>\n          <span>${data.thickness.toFixed(1)}\"</span>\n        </div>\n    `;\n\n    // Add material-specific details\n    Object.keys(data.materials).forEach(materialType => {\n      const material = data.materials[materialType];\n      const materialWithWaste = dataWithWaste.materials[materialType];\n\n      if (material.bundles) {\n        html += `\n          <div class=\"result-item\">\n            <span>${material.type} bundles:</span>\n            <span>${material.bundles} (${materialWithWaste.bundles} with waste)</span>\n          </div>\n        `;\n      }\n\n      if (material.bags) {\n        html += `\n          <div class=\"result-item\">\n            <span>${material.type} bags:</span>\n            <span>${material.bags} (${materialWithWaste.bags} with waste)</span>\n          </div>\n        `;\n      }\n\n      if (material.boards) {\n        html += `\n          <div class=\"result-item\">\n            <span>${material.type} boards:</span>\n            <span>${material.boards} (${materialWithWaste.boards} with waste)</span>\n          </div>\n        `;\n      }\n\n      if (material.boardFeet) {\n        html += `\n          <div class=\"result-item\">\n            <span>Board feet:</span>\n            <span>${material.boardFeet.toFixed(1)} bf</span>\n          </div>\n        `;\n      }\n    });\n\n    html += `\n        <div class=\"result-detail\">\n          <small>${data.specifications ? Object.values(data.specifications).join(', ') : ''}</small>\n        </div>\n      </div>\n    `;\n\n    return html;\n  }\n\n  exportResults(format) {\n    if (!this.state.results) {\n      UI.showError('No results to export');\n      return;\n    }\n\n    const results = this.state.results;\n\n    const exportData = {\n      project: 'Insulation Calculator Results',\n      date: new Date().toLocaleDateString(),\n      inputs: {\n        'Wall Area': `${this.state.wallArea} sq ft`,\n        'Ceiling Area': `${this.state.ceilingArea} sq ft`,\n        'Floor Area': `${this.state.floorArea} sq ft`,\n        'Wall R-Value': `R-${this.state.wallRValue}`,\n        'Ceiling R-Value': `R-${this.state.ceilingRValue}`,\n        'Floor R-Value': `R-${this.state.floorRValue}`,\n        'Waste Factor': `${this.state.wastePercent}%`,\n        'Region': this.state.region\n      },\n      walls: this.formatExportSection(results.walls),\n      ceiling: this.formatExportSection(results.ceiling),\n      floor: this.formatExportSection(results.floor),\n      costs: {\n        'Material Cost': `$${results.costs.materials.toLocaleString()}`,\n        'Labor Cost': `$${results.costs.labor.toLocaleString()}`,\n        'Overhead': `$${results.costs.overhead.toLocaleString()}`,\n        'Profit': `$${results.costs.profit.toLocaleString()}`,\n        'Total Cost': `$${results.costs.total.toLocaleString()}`,\n        'Cost per Sq Ft': `$${results.costs.pricePerSqFt.toFixed(2)}`\n      }\n    };\n\n    Export.exportData(exportData, `insulation-calculation-${Date.now()}`, format);\n  }\n\n  formatExportSection(data) {\n    const section = {\n      'Area': `${data.area} sq ft`,\n      'R-Value': `R-${data.actualR.toFixed(1)}`,\n      'Thickness': `${data.thickness.toFixed(1)}\"`\n    };\n\n    if (data.materials) {\n      Object.keys(data.materials).forEach(materialType => {\n        const material = data.materials[materialType];\n\n        if (material.bundles) {\n          section[`${material.type} Bundles`] = `${material.bundles}`;\n        }\n        if (material.bags) {\n          section[`${material.type} Bags`] = `${material.bags}`;\n        }\n        if (material.boards) {\n          section[`${material.type} Boards`] = `${material.boards}`;\n        }\n        if (material.boardFeet) {\n          section['Board Feet'] = `${material.boardFeet.toFixed(1)} bf`;\n        }\n      });\n    }\n\n    return section;\n  }\n\n  // Legacy compute function for testing\n  compute() {\n    if (!this.state.results) return null;\n\n    const results = this.state.results;\n    const totalArea = this.state.wallArea + this.state.ceilingArea + this.state.floorArea;\n\n    return {\n      totalArea: totalArea,\n      wallRValue: results.walls.actualR,\n      ceilingRValue: results.ceiling.actualR,\n      floorRValue: results.floor.actualR,\n      totalCost: results.costs.total\n    };\n  }\n}\n\n// Initialize calculator when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.insulationCalc = new InsulationCalculator();\n});\n\n// Legacy exports for compatibility\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n  window.insulationCalc = new InsulationCalculator();\n}\n\nexport function compute(state) {\n  // Legacy compute for testing: 1000 sq ft R-19 should return reasonable batt count\n  const area = state?.area || 1000;\n  const targetR = state?.rValue || 19;\n\n  // Simulate batt calculation\n  const coveragePerBundle = 64; // sq ft typical for R-19\n  const bundles = Math.ceil(area / coveragePerBundle);\n\n  return {\n    ok: true,\n    bundles: bundles,\n    rValue: targetR,\n    area: area\n  };\n}\n\nexport function explain(state) {\n  return \"Calculates batt, blown, rigid, and spray foam insulation materials with R-value optimization for walls, ceilings, and floors.\";\n}\n\nexport function meta() {\n  return {\n    id: \"insulation\",\n    title: \"Insulation Calculator\",\n    category: \"thermal\"\n  };\n}\n\nexport { InsulationCalculator };","size_bytes":26504},"assets/js/calculators/masonry.js":{"content":"import { Bus } from '../core/bus.js';\nimport { Units } from '../core/units.js';\nimport { Validate } from '../core/validate.js';\nimport { Pricing } from '../core/pricing.js';\nimport { Export } from '../core/export.js';\nimport { Store } from '../core/store.js';\nimport { UI } from '../core/ui.js';\n\nclass MasonryCalculator {\n  constructor() {\n    this.id = 'masonry';\n    this.name = 'Masonry Calculator';\n    this.description = 'Calculate CMU blocks, bricks, mortar bags, and rebar requirements for masonry construction';\n\n    this.state = {\n      // Wall dimensions\n      wallLength: 100,\n      wallHeight: 8,\n      wallThickness: 8,\n\n      // CMU specifications\n      cmuLength: 16,\n      cmuHeight: 8,\n      cmuThickness: 8,\n      mortarJoint: 0.375,\n\n      // Brick specifications\n      brickLength: 8,\n      brickHeight: 2.25,\n      brickThickness: 4,\n\n      // Reinforcement\n      verticalRebar: true,\n      verticalSpacing: 32,\n      rebarSize: '#4',\n      horizontalRebar: false,\n      horizontalSpacing: 16,\n\n      // Openings\n      doors: [],\n      windows: [],\n\n      // Material type\n      materialType: 'cmu', // 'cmu' or 'brick'\n\n      // Regional settings\n      region: 'national',\n      wastePercent: 10,\n\n      // Output\n      results: null\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.bindFormElements();\n    this.setupEventListeners();\n    this.loadStoredData();\n    this.calculate();\n  }\n\n  bindFormElements() {\n    // Wall dimensions\n    this.elements = {\n      wallLength: document.getElementById('wall-length'),\n      wallHeight: document.getElementById('wall-height'),\n      wallThickness: document.getElementById('wall-thickness'),\n\n      // CMU specifications\n      cmuLength: document.getElementById('cmu-length'),\n      cmuHeight: document.getElementById('cmu-height'),\n      cmuThickness: document.getElementById('cmu-thickness'),\n      mortarJoint: document.getElementById('mortar-joint'),\n\n      // Brick specifications\n      brickLength: document.getElementById('brick-length'),\n      brickHeight: document.getElementById('brick-height'),\n      brickThickness: document.getElementById('brick-thickness'),\n\n      // Reinforcement\n      verticalRebar: document.getElementById('vertical-rebar'),\n      verticalSpacing: document.getElementById('vertical-spacing'),\n      rebarSize: document.getElementById('rebar-size'),\n      horizontalRebar: document.getElementById('horizontal-rebar'),\n      horizontalSpacing: document.getElementById('horizontal-spacing'),\n\n      // Material type\n      materialType: document.querySelector('input[name=\"material-type\"]:checked'),\n\n      // Regional settings\n      region: document.getElementById('region'),\n      wastePercent: document.getElementById('waste-percent'),\n\n      // Output elements\n      resultsContainer: document.getElementById('results'),\n      summaryContainer: document.getElementById('summary'),\n      exportContainer: document.getElementById('export-options')\n    };\n\n    // Set initial values\n    Object.keys(this.state).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        if (this.elements[key].type === 'checkbox') {\n          this.elements[key].checked = this.state[key];\n        } else {\n          this.elements[key].value = this.state[key];\n        }\n      }\n    });\n  }\n\n  setupEventListeners() {\n    // Form change events\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && this.elements[key].addEventListener) {\n        this.elements[key].addEventListener('change', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n\n        this.elements[key].addEventListener('input', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n      }\n    });\n\n    // Material type radio buttons\n    document.querySelectorAll('input[name=\"material-type\"]').forEach(radio => {\n      radio.addEventListener('change', () => {\n        this.updateStateFromForm();\n        this.toggleMaterialInputs();\n        this.calculate();\n      });\n    });\n\n    // Export buttons\n    Bus.on('export:csv', () => this.exportResults('csv'));\n    Bus.on('export:excel', () => this.exportResults('excel'));\n    Bus.on('export:pdf', () => this.exportResults('pdf'));\n\n    // Add opening buttons\n    const addDoorBtn = document.getElementById('add-door');\n    const addWindowBtn = document.getElementById('add-window');\n\n    if (addDoorBtn) {\n      addDoorBtn.addEventListener('click', () => this.addOpening('door'));\n    }\n\n    if (addWindowBtn) {\n      addWindowBtn.addEventListener('click', () => this.addOpening('window'));\n    }\n  }\n\n  updateStateFromForm() {\n    // Update state from form elements\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        if (this.elements[key].type === 'checkbox') {\n          this.state[key] = this.elements[key].checked;\n        } else if (this.elements[key].type === 'radio') {\n          if (this.elements[key].checked) {\n            this.state[key] = this.elements[key].value;\n          }\n        } else {\n          const value = parseFloat(this.elements[key].value) || 0;\n          this.state[key] = value;\n        }\n      }\n    });\n\n    // Update material type from radio buttons\n    const checkedMaterial = document.querySelector('input[name=\"material-type\"]:checked');\n    if (checkedMaterial) {\n      this.state.materialType = checkedMaterial.value;\n    }\n\n    // Store state\n    Store.set(`calc-${this.id}-state`, this.state);\n  }\n\n  loadStoredData() {\n    const stored = Store.get(`calc-${this.id}-state`);\n    if (stored) {\n      Object.assign(this.state, stored);\n      this.bindFormElements();\n      this.toggleMaterialInputs();\n    }\n  }\n\n  toggleMaterialInputs() {\n    const cmuInputs = document.querySelector('.cmu-inputs');\n    const brickInputs = document.querySelector('.brick-inputs');\n\n    if (cmuInputs && brickInputs) {\n      if (this.state.materialType === 'cmu') {\n        cmuInputs.style.display = 'block';\n        brickInputs.style.display = 'none';\n      } else {\n        cmuInputs.style.display = 'none';\n        brickInputs.style.display = 'block';\n      }\n    }\n  }\n\n  addOpening(type) {\n    const container = document.getElementById(`${type}s-container`);\n    if (!container) return;\n\n    const openingId = `${type}-${Date.now()}`;\n    const openingHtml = `\n      <div class=\"opening-item\" data-opening-id=\"${openingId}\">\n        <label>\n          ${type.charAt(0).toUpperCase() + type.slice(1)} Width (ft):\n          <input type=\"number\" class=\"opening-width\" value=\"3\" step=\"0.1\" min=\"0\">\n        </label>\n        <label>\n          Height (ft):\n          <input type=\"number\" class=\"opening-height\" value=\"${type === 'door' ? '7' : '4'}\" step=\"0.1\" min=\"0\">\n        </label>\n        <button type=\"button\" class=\"remove-opening\" onclick=\"this.parentElement.remove(); window.masonryCalc.calculate();\">Remove</button>\n      </div>\n    `;\n\n    container.insertAdjacentHTML('beforeend', openingHtml);\n\n    // Add event listeners to new inputs\n    const newItem = container.lastElementChild;\n    newItem.querySelectorAll('input').forEach(input => {\n      input.addEventListener('change', () => this.calculate());\n      input.addEventListener('input', () => this.calculate());\n    });\n\n    this.calculate();\n  }\n\n  getOpeningsArea() {\n    let totalArea = 0;\n\n    // Get doors\n    document.querySelectorAll('#doors-container .opening-item').forEach(item => {\n      const width = parseFloat(item.querySelector('.opening-width').value) || 0;\n      const height = parseFloat(item.querySelector('.opening-height').value) || 0;\n      totalArea += width * height;\n    });\n\n    // Get windows\n    document.querySelectorAll('#windows-container .opening-item').forEach(item => {\n      const width = parseFloat(item.querySelector('.opening-width').value) || 0;\n      const height = parseFloat(item.querySelector('.opening-height').value) || 0;\n      totalArea += width * height;\n    });\n\n    return totalArea;\n  }\n\n  calculate() {\n    try {\n      // Calculate wall area\n      const grossWallArea = this.state.wallLength * this.state.wallHeight;\n      const openingsArea = this.getOpeningsArea();\n      const netWallArea = Math.max(0, grossWallArea - openingsArea);\n\n      let results = {\n        dimensions: {\n          grossWallArea,\n          openingsArea,\n          netWallArea,\n          wallVolume: netWallArea * (this.state.wallThickness / 12) // cubic feet\n        }\n      };\n\n      if (this.state.materialType === 'cmu') {\n        results = { ...results, ...this.calculateCMU(netWallArea) };\n      } else {\n        results = { ...results, ...this.calculateBrick(netWallArea) };\n      }\n\n      // Calculate reinforcement\n      results.reinforcement = this.calculateReinforcement();\n\n      // Calculate costs\n      results.costs = this.calculateCosts(results);\n\n      // Apply waste factor\n      results.materialsWithWaste = this.applyWasteFactor(results);\n\n      this.state.results = results;\n      this.displayResults();\n\n      Bus.emit('calculation:complete', {\n        calculator: this.id,\n        results: this.state.results\n      });\n\n    } catch (error) {\n      console.error('Calculation error:', error);\n      UI.showError('Calculation failed. Please check your inputs.');\n    }\n  }\n\n  calculateCMU(wallArea) {\n    const cmuArea = (this.state.cmuLength / 12) * (this.state.cmuHeight / 12); // sq ft per block\n    const blocksNeeded = Math.ceil(wallArea / cmuArea);\n\n    // Mortar calculation\n    const mortarBedArea = wallArea * (this.state.mortarJoint / 12); // bed joints\n    const mortarHeadJoints = blocksNeeded * (this.state.cmuHeight / 12) * (this.state.mortarJoint / 12);\n    const totalMortarVolume = (mortarBedArea + mortarHeadJoints) * (this.state.wallThickness / 12); // cubic feet\n\n    // Mortar bags (typically 80 lb bags yield ~0.67 cubic feet)\n    const mortarBags = Math.ceil(totalMortarVolume / 0.67);\n\n    return {\n      masonry: {\n        type: 'CMU',\n        blocks: blocksNeeded,\n        mortarVolume: totalMortarVolume,\n        mortarBags: mortarBags,\n        specifications: {\n          blockSize: `${this.state.cmuLength}\"L x ${this.state.cmuHeight}\"H x ${this.state.cmuThickness}\"W`,\n          mortarJoint: this.state.mortarJoint,\n          blockArea: cmuArea\n        }\n      }\n    };\n  }\n\n  calculateBrick(wallArea) {\n    const brickArea = (this.state.brickLength / 12) * (this.state.brickHeight / 12); // sq ft per brick\n    const bricksNeeded = Math.ceil(wallArea / brickArea);\n\n    // Mortar calculation for brick (more complex due to smaller units)\n    const mortarBedArea = wallArea * (this.state.mortarJoint / 12);\n    const mortarHeadJoints = bricksNeeded * (this.state.brickHeight / 12) * (this.state.mortarJoint / 12);\n    const totalMortarVolume = (mortarBedArea + mortarHeadJoints) * (this.state.brickThickness / 12);\n\n    const mortarBags = Math.ceil(totalMortarVolume / 0.67);\n\n    return {\n      masonry: {\n        type: 'Brick',\n        bricks: bricksNeeded,\n        mortarVolume: totalMortarVolume,\n        mortarBags: mortarBags,\n        specifications: {\n          brickSize: `${this.state.brickLength}\"L x ${this.state.brickHeight}\"H x ${this.state.brickThickness}\"W`,\n          mortarJoint: this.state.mortarJoint,\n          brickArea: brickArea\n        }\n      }\n    };\n  }\n\n  calculateReinforcement() {\n    let verticalBars = 0;\n    let horizontalBars = 0;\n\n    if (this.state.verticalRebar) {\n      const spacing = this.state.verticalSpacing / 12; // convert to feet\n      verticalBars = Math.ceil(this.state.wallLength / spacing) + 1; // +1 for end bar\n    }\n\n    if (this.state.horizontalRebar) {\n      const spacing = this.state.horizontalSpacing / 12; // convert to feet\n      horizontalBars = Math.ceil(this.state.wallHeight / spacing) + 1; // +1 for end bar\n    }\n\n    const verticalLength = verticalBars * this.state.wallHeight;\n    const horizontalLength = horizontalBars * this.state.wallLength;\n    const totalLength = verticalLength + horizontalLength;\n\n    // Convert to standard rebar lengths (20 ft bars)\n    const standardBars = Math.ceil(totalLength / 20);\n\n    return {\n      verticalBars,\n      horizontalBars,\n      verticalLength,\n      horizontalLength,\n      totalLength,\n      standardBars: standardBars,\n      rebarSize: this.state.rebarSize,\n      spacing: {\n        vertical: this.state.verticalSpacing,\n        horizontal: this.state.horizontalSpacing\n      }\n    };\n  }\n\n  calculateCosts(results) {\n    const pricing = Pricing.getRegionalPricing(this.state.region);\n    const masonryPricing = pricing.masonry || {};\n\n    let materialCosts = 0;\n    let laborCosts = 0;\n\n    if (this.state.materialType === 'cmu') {\n      const blockCost = (masonryPricing.cmuBlock?.price || 2.50) * results.masonry.blocks;\n      const mortarCost = (masonryPricing.mortarBag?.price || 12.00) * results.masonry.mortarBags;\n      materialCosts = blockCost + mortarCost;\n\n      // CMU labor (per block)\n      laborCosts = (masonryPricing.cmuInstallation?.price || 3.50) * results.masonry.blocks;\n    } else {\n      const brickCost = (masonryPricing.brick?.price || 0.35) * results.masonry.bricks;\n      const mortarCost = (masonryPricing.mortarBag?.price || 12.00) * results.masonry.mortarBags;\n      materialCosts = brickCost + mortarCost;\n\n      // Brick labor (per brick)\n      laborCosts = (masonryPricing.brickInstallation?.price || 0.75) * results.masonry.bricks;\n    }\n\n    // Reinforcement costs\n    if (results.reinforcement.totalLength > 0) {\n      const rebarCost = (masonryPricing.rebar?.price || 0.85) * results.reinforcement.totalLength;\n      const rebarLaborCost = (masonryPricing.rebarInstallation?.price || 0.45) * results.reinforcement.totalLength;\n\n      materialCosts += rebarCost;\n      laborCosts += rebarLaborCost;\n    }\n\n    const subtotal = materialCosts + laborCosts;\n    const overhead = subtotal * 0.15; // 15% overhead\n    const profit = subtotal * 0.10; // 10% profit\n    const total = subtotal + overhead + profit;\n\n    return {\n      materials: materialCosts,\n      labor: laborCosts,\n      subtotal,\n      overhead,\n      profit,\n      total,\n      region: this.state.region,\n      pricePerSqFt: total / results.dimensions.netWallArea\n    };\n  }\n\n  applyWasteFactor(results) {\n    const wasteFactor = 1 + (this.state.wastePercent / 100);\n\n    const withWaste = {\n      masonry: { ...results.masonry }\n    };\n\n    if (this.state.materialType === 'cmu') {\n      withWaste.masonry.blocks = Math.ceil(results.masonry.blocks * wasteFactor);\n    } else {\n      withWaste.masonry.bricks = Math.ceil(results.masonry.bricks * wasteFactor);\n    }\n\n    withWaste.masonry.mortarBags = Math.ceil(results.masonry.mortarBags * wasteFactor);\n\n    if (results.reinforcement.totalLength > 0) {\n      withWaste.reinforcement = {\n        ...results.reinforcement,\n        standardBars: Math.ceil(results.reinforcement.standardBars * wasteFactor)\n      };\n    }\n\n    return withWaste;\n  }\n\n  displayResults() {\n    if (!this.state.results || !this.elements.resultsContainer) return;\n\n    const results = this.state.results;\n    const withWaste = results.materialsWithWaste;\n\n    let materialsHtml = '';\n\n    if (this.state.materialType === 'cmu') {\n      materialsHtml = `\n        <div class=\"result-group\">\n          <h3>CMU Blocks</h3>\n          <div class=\"result-item\">\n            <span>Blocks needed:</span>\n            <span>${results.masonry.blocks.toLocaleString()} blocks</span>\n          </div>\n          <div class=\"result-item\">\n            <span>With ${this.state.wastePercent}% waste:</span>\n            <span>${withWaste.masonry.blocks.toLocaleString()} blocks</span>\n          </div>\n          <div class=\"result-detail\">\n            <small>Block size: ${results.masonry.specifications.blockSize}</small>\n          </div>\n        </div>\n      `;\n    } else {\n      materialsHtml = `\n        <div class=\"result-group\">\n          <h3>Bricks</h3>\n          <div class=\"result-item\">\n            <span>Bricks needed:</span>\n            <span>${results.masonry.bricks.toLocaleString()} bricks</span>\n          </div>\n          <div class=\"result-item\">\n            <span>With ${this.state.wastePercent}% waste:</span>\n            <span>${withWaste.masonry.bricks.toLocaleString()} bricks</span>\n          </div>\n          <div class=\"result-detail\">\n            <small>Brick size: ${results.masonry.specifications.brickSize}</small>\n          </div>\n        </div>\n      `;\n    }\n\n    // Mortar section\n    materialsHtml += `\n      <div class=\"result-group\">\n        <h3>Mortar</h3>\n        <div class=\"result-item\">\n          <span>Mortar volume:</span>\n          <span>${results.masonry.mortarVolume.toFixed(2)} cu ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span>Mortar bags (80 lb):</span>\n          <span>${results.masonry.mortarBags} bags</span>\n        </div>\n        <div class=\"result-item\">\n          <span>With ${this.state.wastePercent}% waste:</span>\n          <span>${withWaste.masonry.mortarBags} bags</span>\n        </div>\n      </div>\n    `;\n\n    // Reinforcement section\n    if (results.reinforcement.totalLength > 0) {\n      materialsHtml += `\n        <div class=\"result-group\">\n          <h3>Reinforcement</h3>\n          <div class=\"result-item\">\n            <span>Total rebar length:</span>\n            <span>${results.reinforcement.totalLength.toFixed(1)} ft</span>\n          </div>\n          <div class=\"result-item\">\n            <span>Standard bars (20 ft):</span>\n            <span>${results.reinforcement.standardBars} bars</span>\n          </div>\n          <div class=\"result-item\">\n            <span>With ${this.state.wastePercent}% waste:</span>\n            <span>${withWaste.reinforcement ? withWaste.reinforcement.standardBars : results.reinforcement.standardBars} bars</span>\n          </div>\n          <div class=\"result-detail\">\n            <small>Rebar size: ${results.reinforcement.rebarSize}</small>\n          </div>\n        </div>\n      `;\n    }\n\n    this.elements.resultsContainer.innerHTML = materialsHtml;\n\n    // Display cost summary\n    if (this.elements.summaryContainer) {\n      this.elements.summaryContainer.innerHTML = `\n        <div class=\"cost-summary\">\n          <h3>Cost Summary (${results.costs.region})</h3>\n          <div class=\"cost-item\">\n            <span>Materials:</span>\n            <span>$${results.costs.materials.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Labor:</span>\n            <span>$${results.costs.labor.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Overhead (15%):</span>\n            <span>$${results.costs.overhead.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Profit (10%):</span>\n            <span>$${results.costs.profit.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-total\">\n            <span>Total Cost:</span>\n            <span>$${results.costs.total.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-detail\">\n            <small>$${results.costs.pricePerSqFt.toFixed(2)} per sq ft</small>\n          </div>\n        </div>\n      `;\n    }\n\n    // Show export options\n    if (this.elements.exportContainer) {\n      this.elements.exportContainer.style.display = 'block';\n    }\n  }\n\n  exportResults(format) {\n    if (!this.state.results) {\n      UI.showError('No results to export');\n      return;\n    }\n\n    const results = this.state.results;\n    const withWaste = results.materialsWithWaste;\n\n    const exportData = {\n      project: 'Masonry Calculator Results',\n      date: new Date().toLocaleDateString(),\n      inputs: {\n        'Wall Length': `${this.state.wallLength} ft`,\n        'Wall Height': `${this.state.wallHeight} ft`,\n        'Wall Thickness': `${this.state.wallThickness} in`,\n        'Material Type': this.state.materialType.toUpperCase(),\n        'Mortar Joint': `${this.state.mortarJoint} in`,\n        'Waste Factor': `${this.state.wastePercent}%`,\n        'Region': this.state.region\n      },\n      dimensions: {\n        'Gross Wall Area': `${results.dimensions.grossWallArea.toFixed(1)} sq ft`,\n        'Openings Area': `${results.dimensions.openingsArea.toFixed(1)} sq ft`,\n        'Net Wall Area': `${results.dimensions.netWallArea.toFixed(1)} sq ft`,\n        'Wall Volume': `${results.dimensions.wallVolume.toFixed(1)} cu ft`\n      },\n      materials: {},\n      costs: {\n        'Material Cost': `$${results.costs.materials.toLocaleString()}`,\n        'Labor Cost': `$${results.costs.labor.toLocaleString()}`,\n        'Overhead': `$${results.costs.overhead.toLocaleString()}`,\n        'Profit': `$${results.costs.profit.toLocaleString()}`,\n        'Total Cost': `$${results.costs.total.toLocaleString()}`,\n        'Cost per Sq Ft': `$${results.costs.pricePerSqFt.toFixed(2)}`\n      }\n    };\n\n    // Add material-specific data\n    if (this.state.materialType === 'cmu') {\n      exportData.materials = {\n        'CMU Blocks': `${results.masonry.blocks.toLocaleString()} blocks`,\n        'CMU Blocks (with waste)': `${withWaste.masonry.blocks.toLocaleString()} blocks`,\n        'Mortar Bags': `${results.masonry.mortarBags} bags`,\n        'Mortar Bags (with waste)': `${withWaste.masonry.mortarBags} bags`\n      };\n    } else {\n      exportData.materials = {\n        'Bricks': `${results.masonry.bricks.toLocaleString()} bricks`,\n        'Bricks (with waste)': `${withWaste.masonry.bricks.toLocaleString()} bricks`,\n        'Mortar Bags': `${results.masonry.mortarBags} bags`,\n        'Mortar Bags (with waste)': `${withWaste.masonry.mortarBags} bags`\n      };\n    }\n\n    // Add reinforcement if present\n    if (results.reinforcement.totalLength > 0) {\n      exportData.reinforcement = {\n        'Rebar Size': results.reinforcement.rebarSize,\n        'Total Length': `${results.reinforcement.totalLength.toFixed(1)} ft`,\n        'Standard Bars': `${results.reinforcement.standardBars} bars`,\n        'Standard Bars (with waste)': `${withWaste.reinforcement ? withWaste.reinforcement.standardBars : results.reinforcement.standardBars} bars`\n      };\n    }\n\n    Export.exportData(exportData, `masonry-calculation-${Date.now()}`, format);\n  }\n\n  // Legacy compute function for testing\n  compute() {\n    if (!this.state.results) return null;\n\n    const results = this.state.results;\n    const output = {\n      wallArea: results.dimensions.netWallArea,\n      blocks: this.state.materialType === 'cmu' ? results.masonry.blocks : results.masonry.bricks,\n      mortarBags: results.masonry.mortarBags,\n      totalCost: results.costs.total\n    };\n\n    return output;\n  }\n}\n\n// Initialize calculator when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.masonryCalc = new MasonryCalculator();\n});\n\n// Legacy exports for compatibility\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n  window.masonryCalc = new MasonryCalculator();\n}\n\nexport function compute(state) {\n  // Legacy compute for testing: 100 sq ft CMU wall should return reasonable values\n  const wallArea = state?.wallArea || 800; // 100 ft x 8 ft = 800 sq ft\n  const cmuArea = (16/12) * (8/12); // Standard 16\"x8\" CMU in sq ft\n  const blocks = Math.ceil(wallArea / cmuArea);\n  const mortarBags = Math.ceil(blocks * 0.1); // Rough estimate\n\n  return {\n    ok: true,\n    blocks: blocks,\n    mortarBags: mortarBags,\n    wallArea: wallArea\n  };\n}\n\nexport function explain(state) {\n  return \"Calculates CMU blocks, bricks, mortar bags, and reinforcement for masonry walls with openings, waste factors, and regional pricing.\";\n}\n\nexport function meta() {\n  return {\n    id: \"masonry\",\n    title: \"Masonry Calculator\",\n    category: \"structural\"\n  };\n}\n\nexport { MasonryCalculator };","size_bytes":23815},"assets/js/calculators/paint.js":{"content":"// Paint & Coatings Calculator\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('paint') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Paint & Coatings Calculator</h2>\n        <p>Calculate paint quantities for interior and exterior surfaces</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Surface Area</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"surface-area\">Surface Area (sq ft)</label>\n            <input type=\"number\" id=\"surface-area\" step=\"0.1\" min=\"0\" value=\"${savedState.surfaceArea || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"num-coats\">Number of Coats</label>\n            <input type=\"number\" id=\"num-coats\" min=\"1\" max=\"5\" value=\"${savedState.numCoats || '2'}\" />\n          </div>\n        </div>\n\n        <h3>Substrate & Coverage</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"substrate-type\">Substrate Type</label>\n            <select id=\"substrate-type\">\n              <option value=\"drywall\" ${savedState.substrateType === 'drywall' ? 'selected' : ''}>Drywall (400 sq ft/gal)</option>\n              <option value=\"wood\" ${savedState.substrateType === 'wood' ? 'selected' : ''}>Wood (350 sq ft/gal)</option>\n              <option value=\"concrete\" ${savedState.substrateType === 'concrete' ? 'selected' : ''}>Concrete (300 sq ft/gal)</option>\n              <option value=\"metal\" ${savedState.substrateType === 'metal' ? 'selected' : ''}>Metal (450 sq ft/gal)</option>\n              <option value=\"custom\" ${savedState.substrateType === 'custom' ? 'selected' : ''}>Custom Coverage</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"coverage-sqft\">Coverage (sq ft/gal)</label>\n            <input type=\"number\" id=\"coverage-sqft\" step=\"1\" min=\"0\" value=\"${savedState.coverageSqft || '400'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"waste-percent\">Waste % (typical 5%)</label>\n            <input type=\"number\" id=\"waste-percent\" step=\"0.1\" min=\"0\" max=\"25\" value=\"${savedState.wastePercent || '5'}\" />\n          </div>\n        </div>\n\n        <h3>Primer & Preparation</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"primer-needed\">Primer Required?</label>\n            <select id=\"primer-needed\">\n              <option value=\"yes\" ${savedState.primerNeeded === 'yes' ? 'selected' : ''}>Yes</option>\n              <option value=\"no\" ${savedState.primerNeeded === 'no' ? 'selected' : ''}>No</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"primer-coverage\">Primer Coverage (sq ft/gal)</label>\n            <input type=\"number\" id=\"primer-coverage\" step=\"1\" min=\"0\" value=\"${savedState.primerCoverage || '350'}\" />\n          </div>\n        </div>\n\n        <h3>Pricing (Optional)</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"paint-price\">Paint Price ($/gal)</label>\n            <input type=\"number\" id=\"paint-price\" step=\"0.01\" min=\"0\" value=\"${savedState.paintPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"primer-price\">Primer Price ($/gal)</label>\n            <input type=\"number\" id=\"primer-price\" step=\"0.01\" min=\"0\" value=\"${savedState.primerPrice || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"labor-rate\">Labor Rate ($/hr)</label>\n            <input type=\"number\" id=\"labor-rate\" step=\"0.01\" min=\"0\" value=\"${savedState.laborRate || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"productivity\">Productivity (sq ft/hr)</label>\n            <input type=\"number\" id=\"productivity\" step=\"0.1\" min=\"0\" value=\"${savedState.productivity || '150'}\" />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\" disabled>Calculate</button>\n        <button id=\"clear-btn\" class=\"btn-secondary\">Clear</button>\n      </div>\n\n      <div id=\"results-section\" class=\"results-section\" style=\"display: none;\">\n        <h3>Results</h3>\n        <div id=\"results-content\"></div>\n\n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <div class=\"export-buttons\">\n            <button id=\"export-csv\" class=\"btn-export\">CSV</button>\n            <button id=\"export-xlsx\" class=\"btn-export\">XLSX</button>\n            <button id=\"export-pdf\" class=\"btn-export\">PDF</button>\n            <button id=\"print-btn\" class=\"btn-export\">Print</button>\n          </div>\n        </div>\n\n        <div class=\"math-section\">\n          <button id=\"show-math-btn\" class=\"btn-secondary\">Show Math</button>\n          <div id=\"math-details\" class=\"math-details\" style=\"display: none;\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  setupEventListeners();\n}\n\nfunction setupEventListeners() {\n  const inputs = document.querySelectorAll('#surface-area, #num-coats, #substrate-type, #coverage-sqft, #waste-percent, #primer-needed, #primer-coverage');\n  inputs.forEach(input => {\n    input.addEventListener('input', validateAndCalculate);\n  });\n\n  // Update coverage when substrate type changes\n  document.getElementById('substrate-type').addEventListener('change', updateCoverage);\n\n  document.getElementById('calculate-btn').addEventListener('click', calculatePaint);\n  document.getElementById('clear-btn').addEventListener('click', clearInputs);\n  document.getElementById('show-math-btn')?.addEventListener('click', toggleMath);\n\n  document.getElementById('export-csv')?.addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx')?.addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf')?.addEventListener('click', () => exportResults('pdf'));\n  document.getElementById('print-btn')?.addEventListener('click', () => window.print());\n\n  validateAndCalculate();\n}\n\nfunction updateCoverage() {\n  const substrateType = document.getElementById('substrate-type').value;\n  const coverageInput = document.getElementById('coverage-sqft');\n\n  const coverageValues = {\n    'drywall': 400,\n    'wood': 350,\n    'concrete': 300,\n    'metal': 450,\n    'custom': coverageInput.value || 400\n  };\n\n  if (substrateType !== 'custom') {\n    coverageInput.value = coverageValues[substrateType];\n  }\n\n  validateAndCalculate();\n}\n\nfunction validateAndCalculate() {\n  const state = getCurrentState();\n  const isValid = validateInputs(state);\n\n  document.getElementById('calculate-btn').disabled = !isValid;\n\n  if (isValid) {\n    calculatePaint();\n  }\n\n  saveState('paint', state);\n}\n\nfunction getCurrentState() {\n  return {\n    surfaceArea: parseFloat(document.getElementById('surface-area').value) || 0,\n    numCoats: parseInt(document.getElementById('num-coats').value) || 2,\n    substrateType: document.getElementById('substrate-type').value,\n    coverageSqft: parseFloat(document.getElementById('coverage-sqft').value) || 400,\n    wastePercent: parseFloat(document.getElementById('waste-percent').value) || 5,\n    primerNeeded: document.getElementById('primer-needed').value === 'yes',\n    primerCoverage: parseFloat(document.getElementById('primer-coverage').value) || 350,\n    paintPrice: parseFloat(document.getElementById('paint-price').value) || 0,\n    primerPrice: parseFloat(document.getElementById('primer-price').value) || 0,\n    laborRate: parseFloat(document.getElementById('labor-rate').value) || 0,\n    productivity: parseFloat(document.getElementById('productivity').value) || 150\n  };\n}\n\nfunction validateInputs(state) {\n  return state.surfaceArea > 0 && state.numCoats > 0;\n}\n\nfunction calculatePaint() {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (result.ok) {\n    displayResults(result.data, state);\n    document.getElementById('results-section').style.display = 'block';\n  }\n}\n\nfunction displayResults(data, state) {\n  const resultsContent = document.getElementById('results-content');\n\n  resultsContent.innerHTML = `\n    <div class=\"results-table\">\n      <table>\n        <tr><th colspan=\"2\">Paint Requirements</th></tr>\n        <tr><td>Surface Area</td><td>${formatNumber(state.surfaceArea)} sq ft</td></tr>\n        <tr><td>Number of Coats</td><td>${state.numCoats}</td></tr>\n        <tr><td>Total Coverage Needed</td><td>${formatNumber(data.totalCoverage)} sq ft</td></tr>\n        <tr><td><strong>Paint Required</strong></td><td><strong>${formatNumber(data.paintGallons)} gallons</strong></td></tr>\n\n        ${state.primerNeeded ? `\n        <tr><th colspan=\"2\">Primer Requirements</th></tr>\n        <tr><td>Primer Required</td><td>${formatNumber(data.primerGallons)} gallons</td></tr>\n        ` : ''}\n\n        ${data.materialCost > 0 ? `\n        <tr><th colspan=\"2\">Material Costs</th></tr>\n        <tr><td>Paint Cost</td><td>${formatCurrency(data.paintCost)}</td></tr>\n        ${state.primerNeeded ? `<tr><td>Primer Cost</td><td>${formatCurrency(data.primerCost)}</td></tr>` : ''}\n        <tr><td><strong>Total Material</strong></td><td><strong>${formatCurrency(data.materialCost)}</strong></td></tr>\n        ` : ''}\n\n        ${data.laborCost > 0 ? `\n        <tr><th colspan=\"2\">Labor</th></tr>\n        <tr><td>Labor Hours</td><td>${formatNumber(data.laborHours)} hrs</td></tr>\n        <tr><td>Labor Cost</td><td>${formatCurrency(data.laborCost)}</td></tr>\n        ` : ''}\n\n        ${data.totalCost > 0 ? `\n        <tr><th colspan=\"2\">Total Project</th></tr>\n        <tr><td><strong>Total Cost</strong></td><td><strong>${formatCurrency(data.totalCost)}</strong></td></tr>\n        ` : ''}\n      </table>\n    </div>\n\n    <div class=\"assumptions\">\n      <h4>Assumptions</h4>\n      <ul>\n        <li>Substrate: ${state.substrateType} (${state.coverageSqft} sq ft/gal)</li>\n        <li>Waste factor: ${state.wastePercent}%</li>\n        <li>Primer: ${state.primerNeeded ? 'Required' : 'Not required'}</li>\n        ${state.primerNeeded ? `<li>Primer coverage: ${state.primerCoverage} sq ft/gal</li>` : ''}\n        <li>Productivity: ${state.productivity} sq ft/hour</li>\n      </ul>\n    </div>\n  `;\n}\n\nfunction clearInputs() {\n  document.querySelectorAll('input, select').forEach(input => {\n    if (input.type === 'number') {\n      input.value = '';\n    } else {\n      input.selectedIndex = 0;\n    }\n  });\n\n  // Reset to defaults\n  document.getElementById('num-coats').value = '2';\n  document.getElementById('coverage-sqft').value = '400';\n  document.getElementById('waste-percent').value = '5';\n  document.getElementById('primer-coverage').value = '350';\n  document.getElementById('productivity').value = '150';\n\n  document.getElementById('results-section').style.display = 'none';\n  saveState('paint', {});\n}\n\nfunction toggleMath() {\n  const mathDetails = document.getElementById('math-details');\n  const isVisible = mathDetails.style.display !== 'none';\n\n  if (isVisible) {\n    mathDetails.style.display = 'none';\n    document.getElementById('show-math-btn').textContent = 'Show Math';\n  } else {\n    const state = getCurrentState();\n    const explanation = explain(state);\n    mathDetails.innerHTML = explanation;\n    mathDetails.style.display = 'block';\n    document.getElementById('show-math-btn').textContent = 'Hide Math';\n  }\n}\n\nfunction exportResults(format) {\n  const state = getCurrentState();\n  const result = compute(state);\n\n  if (!result.ok) return;\n\n  const data = result.data;\n  const exportData = [\n    ['Paint Calculator Results', ''],\n    ['Surface Area', `${state.surfaceArea} sq ft`],\n    ['Number of Coats', state.numCoats],\n    ['Substrate Type', state.substrateType],\n    ['Coverage', `${state.coverageSqft} sq ft/gal`],\n    [''],\n    ['Paint Required', `${formatNumber(data.paintGallons)} gallons`],\n    ['Primer Required', state.primerNeeded ? `${formatNumber(data.primerGallons)} gallons` : 'None'],\n    [''],\n    ['Material Cost', formatCurrency(data.materialCost)],\n    ['Labor Cost', formatCurrency(data.laborCost)],\n    ['Total Cost', formatCurrency(data.totalCost)]\n  ];\n\n  switch (format) {\n    case 'csv':\n      exportToCsv(exportData, 'paint-calculation.csv');\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, 'paint-calculation.xlsx');\n      break;\n    case 'pdf':\n      exportToPdf(exportData, 'Paint Calculator Results', 'paint-calculation.pdf');\n      break;\n  }\n}\n\nexport function compute(state) {\n  try {\n    const { surfaceArea, numCoats, coverageSqft, wastePercent, primerNeeded, primerCoverage, paintPrice, primerPrice, laborRate, productivity } = state;\n\n    if (!surfaceArea || !numCoats) {\n      return { ok: false, msg: \"Missing required inputs\" };\n    }\n\n    // Calculate total coverage needed\n    const totalCoverage = surfaceArea * numCoats;\n\n    // Calculate paint gallons with waste\n    const paintGallonsBase = totalCoverage / coverageSqft;\n    const paintGallons = Math.ceil(paintGallonsBase * (1 + wastePercent / 100));\n\n    // Calculate primer gallons if needed\n    let primerGallons = 0;\n    if (primerNeeded) {\n      const primerGallonsBase = surfaceArea / primerCoverage;\n      primerGallons = Math.ceil(primerGallonsBase * (1 + wastePercent / 100));\n    }\n\n    // Cost calculations\n    const paintCost = paintPrice > 0 ? paintGallons * paintPrice : 0;\n    const primerCost = primerPrice > 0 && primerNeeded ? primerGallons * primerPrice : 0;\n    const materialCost = paintCost + primerCost;\n\n    // Labor calculations (include primer application if needed)\n    const totalAreaToApply = primerNeeded ? surfaceArea + totalCoverage : totalCoverage;\n    const laborHours = productivity > 0 ? totalAreaToApply / productivity : 0;\n    const laborCost = laborRate > 0 && laborHours > 0 ? laborHours * laborRate : 0;\n\n    const totalCost = materialCost + laborCost;\n\n    return {\n      ok: true,\n      data: {\n        totalCoverage,\n        paintGallons,\n        primerGallons,\n        paintCost,\n        primerCost,\n        materialCost,\n        laborHours,\n        laborCost,\n        totalCost\n      }\n    };\n  } catch (error) {\n    return { ok: false, msg: error.message };\n  }\n}\n\nexport function explain(state) {\n  const result = compute(state);\n  if (!result.ok) return \"Invalid inputs\";\n\n  const { surfaceArea, numCoats, coverageSqft, wastePercent, primerNeeded, primerCoverage } = state;\n  const data = result.data;\n\n  return `\n    <div class=\"math-explanation\">\n      <h4>Calculation Steps</h4>\n\n      <div class=\"step\">\n        <h5>1. Total Coverage Needed</h5>\n        <p>Surface area: ${surfaceArea} sq ft</p>\n        <p>Number of coats: ${numCoats}</p>\n        <p><strong>Total coverage: ${surfaceArea} × ${numCoats} = ${data.totalCoverage} sq ft</strong></p>\n      </div>\n\n      <div class=\"step\">\n        <h5>2. Paint Required</h5>\n        <p>Coverage per gallon: ${coverageSqft} sq ft/gal</p>\n        <p>Base gallons needed: ${data.totalCoverage} ÷ ${coverageSqft} = ${formatNumber(data.totalCoverage / coverageSqft)} gal</p>\n        <p>With ${wastePercent}% waste: ${formatNumber(data.totalCoverage / coverageSqft)} × 1.${wastePercent.toString().padStart(2, '0')} = ${data.paintGallons} gallons</p>\n      </div>\n\n      ${primerNeeded ? `\n      <div class=\"step\">\n        <h5>3. Primer Required</h5>\n        <p>Primer coverage: ${primerCoverage} sq ft/gal</p>\n        <p>Base primer needed: ${surfaceArea} ÷ ${primerCoverage} = ${formatNumber(surfaceArea / primerCoverage)} gal</p>\n        <p>With ${wastePercent}% waste: ${formatNumber(surfaceArea / primerCoverage)} × 1.${wastePercent.toString().padStart(2, '0')} = ${data.primerGallons} gallons</p>\n      </div>\n      ` : ''}\n\n      <div class=\"step\">\n        <h5>${primerNeeded ? '4' : '3'}. Labor Hours</h5>\n        <p>Total area to apply: ${primerNeeded ? `${surfaceArea} (primer) + ${data.totalCoverage} (paint) = ${surfaceArea + data.totalCoverage}` : data.totalCoverage} sq ft</p>\n        <p>Productivity: ${state.productivity} sq ft/hr</p>\n        <p>Labor hours: ${formatNumber(surfaceArea + data.totalCoverage)} ÷ ${state.productivity} = ${formatNumber(data.laborHours)} hours</p>\n      </div>\n    </div>\n  `;\n}\n\nexport function meta() {\n  return {\n    id: \"paint\",\n    title: \"Paint Calculator\",\n    category: \"finishing\"\n  };\n}","size_bytes":16634},"assets/js/calculators/plumbing.js":{"content":"// Professional Plumbing Calculator\n// Comprehensive plumbing materials calculation with hydraulic engineering\n\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('plumbing') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Professional Plumbing Calculator</h2>\n        <p>Calculate plumbing materials including pipe sizing, fittings, fixtures with hydraulic engineering principles</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Project Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"building-type\">Building Type</label>\n            <select id=\"building-type\">\n              <option value=\"residential\" ${savedState.buildingType === 'residential' ? 'selected' : ''}>Residential</option>\n              <option value=\"office\" ${savedState.buildingType === 'office' ? 'selected' : ''}>Office/Commercial</option>\n              <option value=\"restaurant\" ${savedState.buildingType === 'restaurant' ? 'selected' : ''}>Restaurant</option>\n              <option value=\"hospital\" ${savedState.buildingType === 'hospital' ? 'selected' : ''}>Hospital/Healthcare</option>\n              <option value=\"hotel\" ${savedState.buildingType === 'hotel' ? 'selected' : ''}>Hotel</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"floors\">Number of Floors</label>\n            <input type=\"number\" id=\"floors\" min=\"1\" max=\"50\" value=\"${savedState.floors || '1'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"building-sqft\">Building Area (sq ft)</label>\n            <input type=\"number\" id=\"building-sqft\" step=\"1\" min=\"0\" value=\"${savedState.buildingSqft || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"water-pressure\">Available Water Pressure (PSI)</label>\n            <input type=\"number\" id=\"water-pressure\" step=\"1\" min=\"20\" max=\"100\" value=\"${savedState.waterPressure || '50'}\" />\n          </div>\n        </div>\n\n        <h3>Fixture Count & Load</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"toilets\">Water Closets</label>\n            <input type=\"number\" id=\"toilets\" min=\"0\" value=\"${savedState.toilets || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"sinks\">Lavatories/Sinks</label>\n            <input type=\"number\" id=\"sinks\" min=\"0\" value=\"${savedState.sinks || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"showers\">Showers</label>\n            <input type=\"number\" id=\"showers\" min=\"0\" value=\"${savedState.showers || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"bathtubs\">Bathtubs</label>\n            <input type=\"number\" id=\"bathtubs\" min=\"0\" value=\"${savedState.bathtubs || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"kitchen-sinks\">Kitchen Sinks</label>\n            <input type=\"number\" id=\"kitchen-sinks\" min=\"0\" value=\"${savedState.kitchenSinks || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"washing-machines\">Washing Machines</label>\n            <input type=\"number\" id=\"washing-machines\" min=\"0\" value=\"${savedState.washingMachines || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"dishwashers\">Dishwashers</label>\n            <input type=\"number\" id=\"dishwashers\" min=\"0\" value=\"${savedState.dishwashers || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"water-heaters\">Water Heaters (qty)</label>\n            <input type=\"number\" id=\"water-heaters\" min=\"0\" value=\"${savedState.waterHeaters || '1'}\" />\n          </div>\n        </div>\n\n        <h3>Pipe Distribution System</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"supply-material\">Supply Pipe Material</label>\n            <select id=\"supply-material\">\n              <option value=\"copper\" ${savedState.supplyMaterial === 'copper' ? 'selected' : ''}>Copper Type L</option>\n              <option value=\"pex\" ${savedState.supplyMaterial === 'pex' ? 'selected' : ''}>PEX</option>\n              <option value=\"cpvc\" ${savedState.supplyMaterial === 'cpvc' ? 'selected' : ''}>CPVC</option>\n              <option value=\"galvanized\" ${savedState.supplyMaterial === 'galvanized' ? 'selected' : ''}>Galvanized Steel</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"drainage-material\">Drainage Pipe Material</label>\n            <select id=\"drainage-material\">\n              <option value=\"pvc\" ${savedState.drainageMaterial === 'pvc' ? 'selected' : ''}>PVC Schedule 40</option>\n              <option value=\"abs\" ${savedState.drainageMaterial === 'abs' ? 'selected' : ''}>ABS</option>\n              <option value=\"cast-iron\" ${savedState.drainageMaterial === 'cast-iron' ? 'selected' : ''}>Cast Iron</option>\n              <option value=\"galvanized\" ${savedState.drainageMaterial === 'galvanized' ? 'selected' : ''}>Galvanized Steel</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"main-supply-size\">Main Supply Size</label>\n            <select id=\"main-supply-size\">\n              <option value=\"3/4\" ${savedState.mainSupplySize === '3/4' ? 'selected' : ''}>3/4\"</option>\n              <option value=\"1\" ${savedState.mainSupplySize === '1' ? 'selected' : ''}>1\"</option>\n              <option value=\"1.25\" ${savedState.mainSupplySize === '1.25' ? 'selected' : ''}>1-1/4\"</option>\n              <option value=\"1.5\" ${savedState.mainSupplySize === '1.5' ? 'selected' : ''}>1-1/2\"</option>\n              <option value=\"2\" ${savedState.mainSupplySize === '2' ? 'selected' : ''}>2\"</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"main-drain-size\">Main Drain Size</label>\n            <select id=\"main-drain-size\">\n              <option value=\"3\" ${savedState.mainDrainSize === '3' ? 'selected' : ''}>3\"</option>\n              <option value=\"4\" ${savedState.mainDrainSize === '4' ? 'selected' : ''}>4\"</option>\n              <option value=\"6\" ${savedState.mainDrainSize === '6' ? 'selected' : ''}>6\"</option>\n              <option value=\"8\" ${savedState.mainDrainSize === '8' ? 'selected' : ''}>8\"</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Pipe Runs & Layout</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"hot-water-runs\">Hot Water Lines (ft)</label>\n            <input type=\"number\" id=\"hot-water-runs\" step=\"1\" min=\"0\" value=\"${savedState.hotWaterRuns || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"cold-water-runs\">Cold Water Lines (ft)</label>\n            <input type=\"number\" id=\"cold-water-runs\" step=\"1\" min=\"0\" value=\"${savedState.coldWaterRuns || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"waste-lines\">Waste Lines (ft)</label>\n            <input type=\"number\" id=\"waste-lines\" step=\"1\" min=\"0\" value=\"${savedState.wasteLines || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"vent-lines\">Vent Lines (ft)</label>\n            <input type=\"number\" id=\"vent-lines\" step=\"1\" min=\"0\" value=\"${savedState.ventLines || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"main-line-length\">Main Line to Street (ft)</label>\n            <input type=\"number\" id=\"main-line-length\" step=\"1\" min=\"0\" value=\"${savedState.mainLineLength || '50'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"pipe-insulation\">Pipe Insulation</label>\n            <select id=\"pipe-insulation\">\n              <option value=\"none\" ${savedState.pipeInsulation === 'none' ? 'selected' : ''}>None</option>\n              <option value=\"hot-only\" ${savedState.pipeInsulation === 'hot-only' ? 'selected' : ''}>Hot Water Only</option>\n              <option value=\"all-pipes\" ${savedState.pipeInsulation === 'all-pipes' ? 'selected' : ''}>All Supply Lines</option>\n            </select>\n          </div>\n        </div>\n\n        <h3>Regional Pricing</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"region\">Region</label>\n            <select id=\"region\">\n              <option value=\"southeast\" ${savedState.region === 'southeast' ? 'selected' : ''}>Southeast US</option>\n              <option value=\"northeast\" ${savedState.region === 'northeast' ? 'selected' : ''}>Northeast US</option>\n              <option value=\"midwest\" ${savedState.region === 'midwest' ? 'selected' : ''}>Midwest US</option>\n              <option value=\"southwest\" ${savedState.region === 'southwest' ? 'selected' : ''}>Southwest US</option>\n              <option value=\"west\" ${savedState.region === 'west' ? 'selected' : ''}>West Coast</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"include-labor\">Include Labor Costs</label>\n            <select id=\"include-labor\">\n              <option value=\"no\" ${savedState.includeLabor === 'no' ? 'selected' : ''}>Materials Only</option>\n              <option value=\"yes\" ${savedState.includeLabor === 'yes' ? 'selected' : ''}>Materials + Labor</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\">Calculate Plumbing Materials</button>\n        <button id=\"reset-btn\" class=\"btn-secondary\">Reset Form</button>\n      </div>\n\n      <div id=\"results\" class=\"results-section\" style=\"display: none;\">\n        <h3>Plumbing Materials Calculation</h3>\n        <div id=\"results-content\"></div>\n        \n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <button id=\"export-csv\" class=\"btn-secondary\">Export CSV</button>\n          <button id=\"export-xlsx\" class=\"btn-secondary\">Export Excel</button>\n          <button id=\"export-pdf\" class=\"btn-secondary\">Export PDF</button>\n        </div>\n      </div>\n\n      <div id=\"explanation\" class=\"explanation-section\" style=\"display: none;\">\n        <h3>Calculation Methodology</h3>\n        <div id=\"explanation-content\"></div>\n      </div>\n    </div>\n  `;\n\n  // Initialize calculator\n  setupEventListeners();\n  \n  // Auto-populate fixtures based on building type\n  updateFixtureRecommendations();\n}\n\nfunction setupEventListeners() {\n  const calculateBtn = document.getElementById('calculate-btn');\n  const resetBtn = document.getElementById('reset-btn');\n  \n  calculateBtn.addEventListener('click', calculatePlumbing);\n  resetBtn.addEventListener('click', resetForm);\n  \n  // Auto-save form data\n  const inputs = document.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    input.addEventListener('change', saveFormState);\n  });\n  \n  // Export handlers\n  document.getElementById('export-csv').addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx').addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf').addEventListener('click', () => exportResults('pdf'));\n  \n  // Update fixture recommendations when building type changes\n  document.getElementById('building-type').addEventListener('change', updateFixtureRecommendations);\n  \n  // Auto-calculate pipe runs based on square footage\n  document.getElementById('building-sqft').addEventListener('input', updatePipeRunEstimates);\n}\n\nfunction updateFixtureRecommendations() {\n  const buildingType = document.getElementById('building-type').value;\n  const sqft = parseFloat(document.getElementById('building-sqft').value) || 1000;\n  \n  // Rough fixture estimates based on building type and square footage\n  const fixtureRatios = {\n    'residential': {\n      toiletsPerSqft: 1/500,\n      sinksPerSqft: 1/400,\n      showersPerSqft: 1/600,\n      bathtubsPerSqft: 1/800,\n      kitchenSinksPerSqft: 1/1000,\n      washingMachinesPerSqft: 1/1000\n    },\n    'office': {\n      toiletsPerSqft: 1/300,\n      sinksPerSqft: 1/250,\n      showersPerSqft: 1/2000,\n      bathtubsPerSqft: 0,\n      kitchenSinksPerSqft: 1/2000,\n      washingMachinesPerSqft: 0\n    },\n    'restaurant': {\n      toiletsPerSqft: 1/200,\n      sinksPerSqft: 1/150,\n      showersPerSqft: 0,\n      bathtubsPerSqft: 0,\n      kitchenSinksPerSqft: 1/300,\n      washingMachinesPerSqft: 0\n    }\n  };\n  \n  const ratios = fixtureRatios[buildingType] || fixtureRatios['residential'];\n  \n  // Only populate if fields are empty\n  if (!document.getElementById('toilets').value) {\n    document.getElementById('toilets').value = Math.max(1, Math.ceil(sqft * ratios.toiletsPerSqft));\n  }\n  if (!document.getElementById('sinks').value) {\n    document.getElementById('sinks').value = Math.max(1, Math.ceil(sqft * ratios.sinksPerSqft));\n  }\n  if (!document.getElementById('kitchen-sinks').value && ratios.kitchenSinksPerSqft > 0) {\n    document.getElementById('kitchen-sinks').value = Math.max(1, Math.ceil(sqft * ratios.kitchenSinksPerSqft));\n  }\n}\n\nfunction updatePipeRunEstimates() {\n  const sqft = parseFloat(document.getElementById('building-sqft').value) || 0;\n  const floors = parseInt(document.getElementById('floors').value) || 1;\n  \n  if (sqft > 0) {\n    // Rough estimates based on square footage and floors\n    const avgSqftPerFloor = sqft / floors;\n    const baseLength = Math.sqrt(avgSqftPerFloor) * 4; // Perimeter-based estimate\n    \n    if (!document.getElementById('hot-water-runs').value) {\n      document.getElementById('hot-water-runs').value = Math.ceil(baseLength * floors * 1.2);\n    }\n    if (!document.getElementById('cold-water-runs').value) {\n      document.getElementById('cold-water-runs').value = Math.ceil(baseLength * floors * 1.5);\n    }\n    if (!document.getElementById('waste-lines').value) {\n      document.getElementById('waste-lines').value = Math.ceil(baseLength * floors * 0.8);\n    }\n    if (!document.getElementById('vent-lines').value) {\n      document.getElementById('vent-lines').value = Math.ceil(baseLength * floors * 0.6);\n    }\n  }\n}\n\nfunction calculatePlumbing() {\n  const data = collectFormData();\n  const validation = validateInputs(data);\n  \n  if (!validation.isValid) {\n    alert('Please fix the following errors:\\n' + validation.errors.join('\\n'));\n    return;\n  }\n  \n  const results = compute(data);\n  displayResults(results);\n  displayExplanation(results, data);\n  \n  document.getElementById('results').style.display = 'block';\n  document.getElementById('explanation').style.display = 'block';\n  \n  // Emit calculator usage event for analytics\n  document.dispatchEvent(new CustomEvent('calculator:used', {\n    detail: {\n      type: 'plumbing',\n      buildingType: data.buildingType,\n      fixtures: data.toilets + data.sinks + data.showers\n    }\n  }));\n}\n\nfunction collectFormData() {\n  return {\n    buildingType: document.getElementById('building-type').value,\n    floors: parseInt(document.getElementById('floors').value) || 1,\n    buildingSqft: parseFloat(document.getElementById('building-sqft').value) || 0,\n    waterPressure: parseFloat(document.getElementById('water-pressure').value) || 50,\n    toilets: parseInt(document.getElementById('toilets').value) || 0,\n    sinks: parseInt(document.getElementById('sinks').value) || 0,\n    showers: parseInt(document.getElementById('showers').value) || 0,\n    bathtubs: parseInt(document.getElementById('bathtubs').value) || 0,\n    kitchenSinks: parseInt(document.getElementById('kitchen-sinks').value) || 0,\n    washingMachines: parseInt(document.getElementById('washing-machines').value) || 0,\n    dishwashers: parseInt(document.getElementById('dishwashers').value) || 0,\n    waterHeaters: parseInt(document.getElementById('water-heaters').value) || 1,\n    supplyMaterial: document.getElementById('supply-material').value,\n    drainageMaterial: document.getElementById('drainage-material').value,\n    mainSupplySize: parseFloat(document.getElementById('main-supply-size').value),\n    mainDrainSize: parseFloat(document.getElementById('main-drain-size').value),\n    hotWaterRuns: parseFloat(document.getElementById('hot-water-runs').value) || 0,\n    coldWaterRuns: parseFloat(document.getElementById('cold-water-runs').value) || 0,\n    wasteLines: parseFloat(document.getElementById('waste-lines').value) || 0,\n    ventLines: parseFloat(document.getElementById('vent-lines').value) || 0,\n    mainLineLength: parseFloat(document.getElementById('main-line-length').value) || 50,\n    pipeInsulation: document.getElementById('pipe-insulation').value,\n    region: document.getElementById('region').value,\n    includeLabor: document.getElementById('include-labor').value === 'yes'\n  };\n}\n\nfunction validateInputs(data) {\n  const errors = [];\n  \n  if (data.buildingSqft <= 0) errors.push('Building area must be greater than 0');\n  if (data.toilets + data.sinks + data.showers + data.bathtubs <= 0) {\n    errors.push('Must have at least one fixture');\n  }\n  if (data.hotWaterRuns + data.coldWaterRuns <= 0) {\n    errors.push('Must specify water supply pipe runs');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n}\n\nexport function compute(data) {\n  // Calculate fixture units (IPC Table E103.3)\n  const fixtureUnits = calculateFixtureUnits(data);\n  \n  // Determine required water service size\n  const waterServiceSize = determineWaterServiceSize(fixtureUnits.total, data.waterPressure);\n  \n  // Calculate drainage fixture units\n  const drainageUnits = calculateDrainageUnits(data);\n  \n  // Determine required drain sizes\n  const drainSizes = determineDrainSizes(drainageUnits);\n  \n  // Material calculations\n  const supplyPipeLengths = calculateSupplyPipe(data);\n  const drainagePipeLengths = calculateDrainagePipe(data);\n  const fittingsCount = calculateFittings(data);\n  \n  // Regional pricing\n  const pricing = getRegionalPricing(data.region);\n  \n  // Cost calculations\n  const costs = {\n    supplyPipe: calculatePipeCost(supplyPipeLengths, data.supplyMaterial, pricing),\n    drainagePipe: calculatePipeCost(drainagePipeLengths, data.drainageMaterial, pricing),\n    fittings: fittingsCount.total * pricing.averageFitting,\n    fixtures: calculateFixtureCosts(data, pricing),\n    waterHeater: data.waterHeaters * pricing.waterHeater[data.buildingType] || 0,\n    insulation: data.pipeInsulation !== 'none' ? calculateInsulationCost(data, pricing) : 0,\n    valves: calculateValveCost(data, pricing)\n  };\n  \n  const materialCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n  const laborCost = data.includeLabor ? materialCost * pricing.laborMultiplier : 0;\n  const totalCost = materialCost + laborCost;\n  \n  return {\n    // Fixture Analysis\n    fixtureUnits: fixtureUnits,\n    drainageUnits: drainageUnits,\n    waterServiceSize: waterServiceSize,\n    drainSizes: drainSizes,\n    \n    // Material Quantities\n    supplyPipe: supplyPipeLengths,\n    drainagePipe: drainagePipeLengths,\n    fittings: fittingsCount,\n    \n    // Cost Analysis\n    costs: costs,\n    materialCost: materialCost,\n    laborCost: laborCost,\n    totalCost: totalCost,\n    \n    pricing: pricing\n  };\n}\n\nfunction calculateFixtureUnits(data) {\n  // Fixture units based on IPC Table E103.3\n  const units = {\n    toilet: 4,\n    sink: 1,\n    shower: 2,\n    bathtub: 2,\n    kitchenSink: 2,\n    washingMachine: 3,\n    dishwasher: 1.5\n  };\n  \n  const fixtureUnits = {\n    toilets: data.toilets * units.toilet,\n    sinks: data.sinks * units.sink,\n    showers: data.showers * units.shower,\n    bathtubs: data.bathtubs * units.bathtub,\n    kitchenSinks: data.kitchenSinks * units.kitchenSink,\n    washingMachines: data.washingMachines * units.washingMachine,\n    dishwashers: data.dishwashers * units.dishwasher\n  };\n  \n  fixtureUnits.total = Object.values(fixtureUnits).reduce((sum, units) => sum + units, 0);\n  \n  return fixtureUnits;\n}\n\nfunction determineWaterServiceSize(totalFixtureUnits, waterPressure) {\n  // Simplified water service sizing (would need full IPC tables for precision)\n  if (totalFixtureUnits <= 15) return \"3/4\\\"\";\n  if (totalFixtureUnits <= 25) return \"1\\\"\";\n  if (totalFixtureUnits <= 40) return \"1-1/4\\\"\";\n  if (totalFixtureUnits <= 60) return \"1-1/2\\\"\";\n  return \"2\\\"\";\n}\n\nfunction calculateDrainageUnits(data) {\n  // Drainage fixture units (different from supply)\n  const drainUnits = {\n    toilet: 4,\n    sink: 1,\n    shower: 2,\n    bathtub: 2,\n    kitchenSink: 2,\n    washingMachine: 3,\n    dishwasher: 2\n  };\n  \n  const drainageUnits = {\n    toilets: data.toilets * drainUnits.toilet,\n    sinks: data.sinks * drainUnits.sink,\n    showers: data.showers * drainUnits.shower,\n    bathtubs: data.bathtubs * drainUnits.bathtub,\n    kitchenSinks: data.kitchenSinks * drainUnits.kitchenSink,\n    washingMachines: data.washingMachines * drainUnits.washingMachine,\n    dishwashers: data.dishwashers * drainUnits.dishwasher\n  };\n  \n  drainageUnits.total = Object.values(drainageUnits).reduce((sum, units) => sum + units, 0);\n  \n  return drainageUnits;\n}\n\nfunction determineDrainSizes(drainageUnits) {\n  // Simplified drain sizing\n  const mainDrainSize = drainageUnits.total <= 20 ? \"3\\\"\" : \n                       drainageUnits.total <= 50 ? \"4\\\"\" : \n                       drainageUnits.total <= 100 ? \"6\\\"\" : \"8\\\"\";\n  \n  return {\n    main: mainDrainSize,\n    branch: \"2\\\"\",\n    fixture: \"1-1/2\\\"\"\n  };\n}\n\nfunction calculateSupplyPipe(data) {\n  return {\n    main: data.mainLineLength,\n    hot: data.hotWaterRuns,\n    cold: data.coldWaterRuns,\n    totalSupply: data.mainLineLength + data.hotWaterRuns + data.coldWaterRuns\n  };\n}\n\nfunction calculateDrainagePipe(data) {\n  return {\n    waste: data.wasteLines,\n    vent: data.ventLines,\n    totalDrainage: data.wasteLines + data.ventLines\n  };\n}\n\nfunction calculateFittings(data) {\n  // Estimate fittings based on pipe runs (rough rule: 1 fitting per 8 ft of pipe)\n  const totalPipe = data.hotWaterRuns + data.coldWaterRuns + data.wasteLines + data.ventLines;\n  const fittingsPerFoot = 0.125; // 1 fitting per 8 feet\n  \n  return {\n    total: Math.ceil(totalPipe * fittingsPerFoot),\n    elbows: Math.ceil(totalPipe * 0.08),\n    tees: Math.ceil(totalPipe * 0.03),\n    couplings: Math.ceil(totalPipe * 0.02)\n  };\n}\n\nfunction calculatePipeCost(lengths, material, pricing) {\n  const pipePricing = pricing.pipe[material] || pricing.pipe.copper;\n  let totalCost = 0;\n  \n  if (typeof lengths === 'object') {\n    Object.values(lengths).forEach(length => {\n      if (typeof length === 'number') {\n        totalCost += length * pipePricing.perFoot;\n      }\n    });\n  } else {\n    totalCost = lengths * pipePricing.perFoot;\n  }\n  \n  return totalCost;\n}\n\nfunction calculateFixtureCosts(data, pricing) {\n  return (\n    data.toilets * pricing.fixtures.toilet +\n    data.sinks * pricing.fixtures.sink +\n    data.showers * pricing.fixtures.shower +\n    data.bathtubs * pricing.fixtures.bathtub +\n    data.kitchenSinks * pricing.fixtures.kitchenSink +\n    data.washingMachines * pricing.fixtures.washingMachine +\n    data.dishwashers * pricing.fixtures.dishwasher\n  );\n}\n\nfunction calculateInsulationCost(data, pricing) {\n  const pipesToInsulate = data.pipeInsulation === 'all-pipes' ? \n    (data.hotWaterRuns + data.coldWaterRuns) : data.hotWaterRuns;\n  \n  return pipesToInsulate * pricing.pipeInsulation;\n}\n\nfunction calculateValveCost(data, pricing) {\n  // Estimate valves: 1 shutoff per 3 fixtures + main shutoffs\n  const totalFixtures = data.toilets + data.sinks + data.showers + data.bathtubs + data.kitchenSinks;\n  const valveCount = Math.ceil(totalFixtures / 3) + 2; // +2 for main water and main drain\n  \n  return valveCount * pricing.averageValve;\n}\n\nfunction getRegionalPricing(region) {\n  const basePricing = {\n    'southeast': {\n      pipe: {\n        copper: { perFoot: 4.50 },\n        pex: { perFoot: 1.25 },\n        cpvc: { perFoot: 1.50 },\n        pvc: { perFoot: 1.20 },\n        abs: { perFoot: 1.30 },\n        'cast-iron': { perFoot: 8.50 }\n      },\n      fixtures: {\n        toilet: 185,\n        sink: 120,\n        shower: 250,\n        bathtub: 450,\n        kitchenSink: 280,\n        washingMachine: 0, // Customer supplied\n        dishwasher: 0 // Customer supplied\n      },\n      waterHeater: {\n        residential: 850,\n        office: 1200,\n        restaurant: 2500,\n        hospital: 3500,\n        hotel: 1800\n      },\n      averageFitting: 12,\n      averageValve: 35,\n      pipeInsulation: 2.50,\n      laborMultiplier: 2.8\n    },\n    'northeast': {\n      pipe: {\n        copper: { perFoot: 5.20 },\n        pex: { perFoot: 1.45 },\n        cpvc: { perFoot: 1.75 },\n        pvc: { perFoot: 1.40 },\n        abs: { perFoot: 1.50 },\n        'cast-iron': { perFoot: 9.50 }\n      },\n      fixtures: {\n        toilet: 220,\n        sink: 145,\n        shower: 295,\n        bathtub: 520,\n        kitchenSink: 325,\n        washingMachine: 0,\n        dishwasher: 0\n      },\n      waterHeater: {\n        residential: 950,\n        office: 1350,\n        restaurant: 2800,\n        hospital: 4000,\n        hotel: 2100\n      },\n      averageFitting: 14,\n      averageValve: 42,\n      pipeInsulation: 2.90,\n      laborMultiplier: 3.5\n    }\n  };\n  \n  // Use southeast as default if region not found\n  return basePricing[region] || basePricing['southeast'];\n}\n\nfunction displayResults(results) {\n  const content = document.getElementById('results-content');\n  \n  content.innerHTML = `\n    <div class=\"results-grid\">\n      <div class=\"result-section\">\n        <h4>System Sizing</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Fixture Units:</span>\n          <span class=\"value\">${formatNumber(results.fixtureUnits.total, 1)} FU</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Water Service Size:</span>\n          <span class=\"value\">${results.waterServiceSize}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Main Drain Size:</span>\n          <span class=\"value\">${results.drainSizes.main}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Drainage Units:</span>\n          <span class=\"value\">${formatNumber(results.drainageUnits.total, 1)} DFU</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Supply Piping</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Main Supply Line:</span>\n          <span class=\"value\">${formatNumber(results.supplyPipe.main)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Hot Water Lines:</span>\n          <span class=\"value\">${formatNumber(results.supplyPipe.hot)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Cold Water Lines:</span>\n          <span class=\"value\">${formatNumber(results.supplyPipe.cold)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Supply Piping:</span>\n          <span class=\"value\">${formatNumber(results.supplyPipe.totalSupply)} ft</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Drainage System</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Waste Lines:</span>\n          <span class=\"value\">${formatNumber(results.drainagePipe.waste)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Vent Lines:</span>\n          <span class=\"value\">${formatNumber(results.drainagePipe.vent)} ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Drainage Piping:</span>\n          <span class=\"value\">${formatNumber(results.drainagePipe.totalDrainage)} ft</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Fittings & Components</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Total Fittings:</span>\n          <span class=\"value\">${results.fittings.total} pcs</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Elbows:</span>\n          <span class=\"value\">${results.fittings.elbows} pcs</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Tees:</span>\n          <span class=\"value\">${results.fittings.tees} pcs</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Couplings:</span>\n          <span class=\"value\">${results.fittings.couplings} pcs</span>\n        </div>\n      </div>\n\n      <div class=\"result-section cost-summary\">\n        <h4>Cost Summary</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Supply Piping:</span>\n          <span class=\"value\">${formatCurrency(results.costs.supplyPipe)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Drainage Piping:</span>\n          <span class=\"value\">${formatCurrency(results.costs.drainagePipe)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Fixtures:</span>\n          <span class=\"value\">${formatCurrency(results.costs.fixtures)}</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.materialCost)}</span>\n        </div>\n        ${results.laborCost > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Labor Cost:</span>\n          <span class=\"value\">${formatCurrency(results.laborCost)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item total\">\n          <span class=\"label\">Total Cost:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost)}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function explain(data) {\n  const results = compute(data);\n  \n  return `\n    <div class=\"explanation-content\">\n      <h4>Plumbing System Design Methodology</h4>\n      \n      <h5>1. Fixture Unit Calculations (IPC Table E103.3)</h5>\n      <p>Water Closets: ${data.toilets} × 4 FU = ${results.fixtureUnits.toilets} FU</p>\n      <p>Lavatories: ${data.sinks} × 1 FU = ${results.fixtureUnits.sinks} FU</p>\n      <p>Showers: ${data.showers} × 2 FU = ${results.fixtureUnits.showers} FU</p>\n      <p>Kitchen Sinks: ${data.kitchenSinks} × 2 FU = ${results.fixtureUnits.kitchenSinks} FU</p>\n      <p><strong>Total: ${formatNumber(results.fixtureUnits.total, 1)} Fixture Units</strong></p>\n      \n      <h5>2. Water Service Sizing</h5>\n      <p>Based on ${formatNumber(results.fixtureUnits.total, 1)} fixture units and ${data.waterPressure} PSI available pressure</p>\n      <p>Required service size: <strong>${results.waterServiceSize}</strong></p>\n      \n      <h5>3. Drainage System Sizing</h5>\n      <p>Total Drainage Fixture Units: ${formatNumber(results.drainageUnits.total, 1)} DFU</p>\n      <p>Main drain size: <strong>${results.drainSizes.main}</strong></p>\n      <p>Branch drains: ${results.drainSizes.branch}</p>\n      <p>Fixture drains: ${results.drainSizes.fixture}</p>\n      \n      <h5>4. Pipe Material Selection</h5>\n      <p>Supply System: ${data.supplyMaterial.toUpperCase()}</p>\n      <p>Drainage System: ${data.drainageMaterial.toUpperCase()}</p>\n      <p>Total Supply Piping: ${formatNumber(results.supplyPipe.totalSupply)} ft</p>\n      <p>Total Drainage Piping: ${formatNumber(results.drainagePipe.totalDrainage)} ft</p>\n      \n      <h5>5. System Components</h5>\n      <p>Estimated fittings: ${results.fittings.total} pieces (1 per 8 ft of pipe)</p>\n      <p>Water heaters: ${data.waterHeaters} units</p>\n      \n      <div class=\"formula-note\">\n        <p><strong>Code Standards Applied:</strong></p>\n        <ul>\n          <li>International Plumbing Code (IPC) fixture unit sizing</li>\n          <li>Table E103.3: Water supply fixture unit values</li>\n          <li>Table E103.4: Drainage fixture unit values</li>\n          <li>Minimum pipe sizes per fixture type</li>\n          <li>Hydraulic principles for pressure loss calculations</li>\n        </ul>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayExplanation(results, data) {\n  const content = document.getElementById('explanation-content');\n  content.innerHTML = explain(data);\n}\n\nfunction saveFormState() {\n  const formData = collectFormData();\n  saveState('plumbing', formData);\n}\n\nfunction resetForm() {\n  document.querySelectorAll('input').forEach(input => {\n    input.value = '';\n  });\n  document.querySelectorAll('select').forEach(select => {\n    select.selectedIndex = 0;\n  });\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('explanation').style.display = 'none';\n  saveState('plumbing', {});\n}\n\nfunction exportResults(format) {\n  const data = collectFormData();\n  const results = compute(data);\n  \n  const exportData = {\n    'Project': 'Plumbing Materials Calculation',\n    'Date': new Date().toLocaleDateString(),\n    'Building Type': data.buildingType,\n    'Building Area (sq ft)': data.buildingSqft,\n    'Total Fixture Units': formatNumber(results.fixtureUnits.total, 1),\n    'Water Service Size': results.waterServiceSize,\n    'Main Drain Size': results.drainSizes.main,\n    'Supply Piping (ft)': formatNumber(results.supplyPipe.totalSupply),\n    'Drainage Piping (ft)': formatNumber(results.drainagePipe.totalDrainage),\n    'Material Cost': formatCurrency(results.materialCost),\n    'Total Cost': formatCurrency(results.totalCost)\n  };\n  \n  const filename = `plumbing-calculation-${new Date().toISOString().split('T')[0]}`;\n  \n  switch(format) {\n    case 'csv':\n      exportToCsv(exportData, filename);\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, filename);\n      break;\n    case 'pdf':\n      exportToPdf(exportData, filename, 'Plumbing Materials Calculation');\n      break;\n  }\n}\n\nexport function meta() {\n  return {\n    id: \"plumbing\",\n    title: \"Professional Plumbing Calculator\",\n    category: \"mep\",\n    description: \"Calculate plumbing materials including pipe sizing, fittings, fixtures with hydraulic engineering principles and IPC compliance\"\n  };\n}","size_bytes":34389},"assets/js/calculators/registry.js":{"content":"// Calculator Registry - Central registry for all calculators\n// Uses lazy imports for performance\n\nexport const calculatorRegistry = [\n  {\n    id: 'concrete',\n    module: () => import('./concrete.js'),\n    description: 'Calculate concrete volume, materials, and costs for slabs, foundations, and structural elements'\n  },\n  {\n    id: 'framing',\n    module: () => import('./framing.js'),\n    description: 'Estimate lumber quantities and costs for wood and steel framing systems'\n  },\n  {\n    id: 'drywall',\n    module: () => import('./drywall.js'),\n    description: 'Calculate drywall sheets, mud, tape, and finishing materials'\n  },\n  {\n    id: 'paint',\n    module: () => import('./paint.js'),\n    description: 'Estimate paint quantities, primer, and coating materials for interior and exterior surfaces'\n  },\n  {\n    id: 'roofing',\n    module: () => import('./roofing.js'),\n    description: 'Calculate roofing materials including shingles, underlayment, and accessories'\n  },\n  {\n    id: 'flooring',\n    module: () => import('./flooring.js'),\n    description: 'Estimate flooring materials for tile, hardwood, carpet, and other floor finishes'\n  },\n  {\n    id: 'plumbing',\n    module: () => import('./plumbing.js'),\n    description: 'Calculate pipe, fittings, and plumbing fixture requirements'\n  },\n  {\n    id: 'electrical',\n    module: () => import('./electrical.js'),\n    description: 'Estimate electrical materials including wire, conduit, panels, and devices'\n  },\n  {\n    id: 'hvac',\n    module: () => import('./hvac.js'),\n    description: 'Calculate HVAC system components, ductwork, and equipment sizing'\n  },\n  {\n    id: 'earthwork',\n    module: () => import('./earthwork.js'),\n    description: 'Estimate excavation, fill, grading, and site preparation quantities'\n  },\n  {\n    id: 'masonry',\n    module: () => import('./masonry.js'),\n    description: 'Calculate brick, block, stone, and mortar requirements'\n  },\n  {\n    id: 'steel',\n    module: () => import('./steel.js'),\n    description: 'Estimate structural steel quantities and connection materials'\n  },\n  {\n    id: 'asphalt',\n    module: () => import('./asphalt.js'),\n    description: 'Calculate asphalt paving materials and quantities for roads and parking'\n  },\n  {\n    id: 'siteconcrete',\n    module: () => import('./siteconcrete.js'),\n    description: 'Estimate site concrete for sidewalks, curbs, and paved areas'\n  },\n  {\n    id: 'doorswindows',\n    module: () => import('./doorswindows.js'),\n    description: 'Calculate door and window quantities, hardware, and trim materials'\n  },\n  {\n    id: 'insulation',\n    module: () => import('./insulation.js'),\n    description: 'Estimate insulation materials for walls, roofs, and thermal barriers'\n  },\n  {\n    id: 'firestop',\n    module: () => import('./firestop.js'),\n    description: 'Calculate firestop materials and fire-rated assembly components'\n  },\n  {\n    id: 'waterproof',\n    module: () => import('./waterproof.js'),\n    description: 'Estimate waterproofing membranes, coatings, and protection systems'\n  },\n  {\n    id: 'demolition',\n    module: () => import('./demolition.js'),\n    description: 'Calculate demolition quantities, disposal, and site clearing requirements'\n  },\n  {\n    id: 'genconds',\n    module: () => import('./genconds.js'),\n    description: 'Estimate general conditions including supervision, utilities, and temporary facilities'\n  },\n  {\n    id: 'fees',\n    module: () => import('./fees.js'),\n    description: 'Calculate permit fees, inspections, and regulatory compliance costs'\n  }\n];\n\n// Helper function to get calculator by ID\nexport function getCalculator(id) {\n  return calculatorRegistry.find(calc => calc.id === id);\n}\n\n// Helper function to get calculators by category\nexport function getCalculatorsByCategory() {\n  const categories = {};\n\n  // We'll need to load each module to get the category from meta()\n  // For now, return the registry as-is until meta() is called\n  return calculatorRegistry;\n}\n\n// Async helper to load and get meta for all calculators\nexport async function getAllCalculatorMeta() {\n  const metaPromises = calculatorRegistry.map(async (entry) => {\n    const module = await entry.module();\n    const meta = module.meta();\n    return {\n      ...meta,\n      description: entry.description\n    };\n  });\n\n  return await Promise.all(metaPromises);\n}","size_bytes":4328},"assets/js/calculators/roofing.js":{"content":"// Professional Roofing Calculator\n// Comprehensive roofing materials calculation with industry standards\n\nimport { validateNumber } from '../core/validate.js';\nimport { formatCurrency, formatNumber } from '../core/units.js';\nimport { exportToCsv, exportToXlsx, exportToPdf } from '../core/export.js';\nimport { loadState, saveState } from '../core/store.js';\n\nexport function init(el) {\n  const savedState = loadState('roofing') || {};\n\n  el.innerHTML = `\n    <div class=\"calculator-container\">\n      <div class=\"calculator-header\">\n        <h2>Professional Roofing Calculator</h2>\n        <p>Calculate roofing materials including shingles, underlayment, flashing, and accessories</p>\n      </div>\n\n      <div class=\"input-section\">\n        <h3>Roof Dimensions</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"roof-area\">Total Roof Area (sq ft)</label>\n            <input type=\"number\" id=\"roof-area\" step=\"0.1\" min=\"0\" value=\"${savedState.roofArea || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"roof-pitch\">Roof Pitch (rise/run)</label>\n            <select id=\"roof-pitch\">\n              <option value=\"2\" ${savedState.roofPitch === '2' ? 'selected' : ''}>2/12 (Low slope)</option>\n              <option value=\"4\" ${savedState.roofPitch === '4' ? 'selected' : ''}>4/12 (Standard)</option>\n              <option value=\"6\" ${savedState.roofPitch === '6' ? 'selected' : ''}>6/12 (Medium)</option>\n              <option value=\"8\" ${savedState.roofPitch === '8' ? 'selected' : ''}>8/12 (Steep)</option>\n              <option value=\"12\" ${savedState.roofPitch === '12' ? 'selected' : ''}>12/12 (Very steep)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ridge-length\">Ridge Length (ft)</label>\n            <input type=\"number\" id=\"ridge-length\" step=\"0.1\" min=\"0\" value=\"${savedState.ridgeLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"rake-length\">Total Rake Length (ft)</label>\n            <input type=\"number\" id=\"rake-length\" step=\"0.1\" min=\"0\" value=\"${savedState.rakeLength || ''}\" />\n          </div>\n        </div>\n\n        <h3>Shingle Specifications</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"shingle-type\">Shingle Type</label>\n            <select id=\"shingle-type\">\n              <option value=\"3tab\" ${savedState.shingleType === '3tab' ? 'selected' : ''}>3-Tab Asphalt (3 bundles/sq)</option>\n              <option value=\"architectural\" ${savedState.shingleType === 'architectural' ? 'selected' : ''}>Architectural (3 bundles/sq)</option>\n              <option value=\"luxury\" ${savedState.shingleType === 'luxury' ? 'selected' : ''}>Luxury/Designer (4 bundles/sq)</option>\n              <option value=\"cedar\" ${savedState.shingleType === 'cedar' ? 'selected' : ''}>Cedar Shakes (5 bundles/sq)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"bundles-per-square\">Bundles per Square</label>\n            <input type=\"number\" id=\"bundles-per-square\" step=\"1\" min=\"1\" max=\"6\" value=\"${savedState.bundlesPerSquare || '3'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"shingle-waste\">Shingle Waste %</label>\n            <input type=\"number\" id=\"shingle-waste\" step=\"0.5\" min=\"0\" max=\"25\" value=\"${savedState.shingleWaste || '10'}\" />\n          </div>\n        </div>\n\n        <h3>Underlayment & Protection</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"underlayment-type\">Underlayment Type</label>\n            <select id=\"underlayment-type\">\n              <option value=\"felt15\" ${savedState.underlaymentType === 'felt15' ? 'selected' : ''}>15# Felt (432 sq ft/roll)</option>\n              <option value=\"felt30\" ${savedState.underlaymentType === 'felt30' ? 'selected' : ''}>30# Felt (216 sq ft/roll)</option>\n              <option value=\"synthetic\" ${savedState.underlaymentType === 'synthetic' ? 'selected' : ''}>Synthetic (1000 sq ft/roll)</option>\n              <option value=\"ice-water\" ${savedState.underlaymentType === 'ice-water' ? 'selected' : ''}>Ice & Water Shield (225 sq ft/roll)</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ice-dam-protection\">Ice Dam Protection (ft)</label>\n            <input type=\"number\" id=\"ice-dam-protection\" step=\"0.1\" min=\"0\" value=\"${savedState.iceDamProtection || '6'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"underlayment-waste\">Underlayment Waste %</label>\n            <input type=\"number\" id=\"underlayment-waste\" step=\"0.5\" min=\"0\" max=\"20\" value=\"${savedState.underlaymentWaste || '5'}\" />\n          </div>\n        </div>\n\n        <h3>Flashing & Accessories</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"drip-edge-length\">Drip Edge Length (ft)</label>\n            <input type=\"number\" id=\"drip-edge-length\" step=\"0.1\" min=\"0\" value=\"${savedState.dripEdgeLength || ''}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"valley-length\">Valley Length (ft)</label>\n            <input type=\"number\" id=\"valley-length\" step=\"0.1\" min=\"0\" value=\"${savedState.valleyLength || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"vent-count\">Roof Vents (count)</label>\n            <input type=\"number\" id=\"vent-count\" min=\"0\" value=\"${savedState.ventCount || '0'}\" />\n          </div>\n          <div class=\"input-group\">\n            <label for=\"ridge-vent\">Ridge Vent (ft)</label>\n            <input type=\"number\" id=\"ridge-vent\" step=\"0.1\" min=\"0\" value=\"${savedState.ridgeVent || '0'}\" />\n          </div>\n        </div>\n\n        <h3>Regional Pricing</h3>\n        <div class=\"input-grid\">\n          <div class=\"input-group\">\n            <label for=\"region\">Region</label>\n            <select id=\"region\">\n              <option value=\"southeast\" ${savedState.region === 'southeast' ? 'selected' : ''}>Southeast US</option>\n              <option value=\"northeast\" ${savedState.region === 'northeast' ? 'selected' : ''}>Northeast US</option>\n              <option value=\"midwest\" ${savedState.region === 'midwest' ? 'selected' : ''}>Midwest US</option>\n              <option value=\"southwest\" ${savedState.region === 'southwest' ? 'selected' : ''}>Southwest US</option>\n              <option value=\"west\" ${savedState.region === 'west' ? 'selected' : ''}>West Coast</option>\n            </select>\n          </div>\n          <div class=\"input-group\">\n            <label for=\"include-labor\">Include Labor Costs</label>\n            <select id=\"include-labor\">\n              <option value=\"no\" ${savedState.includeLabor === 'no' ? 'selected' : ''}>Materials Only</option>\n              <option value=\"yes\" ${savedState.includeLabor === 'yes' ? 'selected' : ''}>Materials + Labor</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"button-section\">\n        <button id=\"calculate-btn\" class=\"btn-primary\">Calculate Roofing Materials</button>\n        <button id=\"reset-btn\" class=\"btn-secondary\">Reset Form</button>\n      </div>\n\n      <div id=\"results\" class=\"results-section\" style=\"display: none;\">\n        <h3>Roofing Materials Calculation</h3>\n        <div id=\"results-content\"></div>\n        \n        <div class=\"export-section\">\n          <h4>Export Results</h4>\n          <button id=\"export-csv\" class=\"btn-secondary\">Export CSV</button>\n          <button id=\"export-xlsx\" class=\"btn-secondary\">Export Excel</button>\n          <button id=\"export-pdf\" class=\"btn-secondary\">Export PDF</button>\n        </div>\n      </div>\n\n      <div id=\"explanation\" class=\"explanation-section\" style=\"display: none;\">\n        <h3>Calculation Methodology</h3>\n        <div id=\"explanation-content\"></div>\n      </div>\n    </div>\n  `;\n\n  // Initialize calculator\n  setupEventListeners();\n  \n  // Load saved state into form\n  const inputs = el.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    const savedValue = savedState[input.id?.replace(/-/g, '') || input.name];\n    if (savedValue && input.value === '') {\n      input.value = savedValue;\n    }\n  });\n}\n\nfunction setupEventListeners() {\n  const calculateBtn = document.getElementById('calculate-btn');\n  const resetBtn = document.getElementById('reset-btn');\n  \n  calculateBtn.addEventListener('click', calculateRoofing);\n  resetBtn.addEventListener('click', resetForm);\n  \n  // Auto-save form data\n  const inputs = document.querySelectorAll('input, select');\n  inputs.forEach(input => {\n    input.addEventListener('change', saveFormState);\n  });\n  \n  // Export handlers\n  document.getElementById('export-csv').addEventListener('click', () => exportResults('csv'));\n  document.getElementById('export-xlsx').addEventListener('click', () => exportResults('xlsx'));\n  document.getElementById('export-pdf').addEventListener('click', () => exportResults('pdf'));\n  \n  // Update bundles per square based on shingle type\n  document.getElementById('shingle-type').addEventListener('change', function() {\n    const bundlesInput = document.getElementById('bundles-per-square');\n    const typeMap = {\n      '3tab': 3,\n      'architectural': 3,\n      'luxury': 4,\n      'cedar': 5\n    };\n    bundlesInput.value = typeMap[this.value] || 3;\n  });\n}\n\nfunction calculateRoofing() {\n  const data = collectFormData();\n  const validation = validateInputs(data);\n  \n  if (!validation.isValid) {\n    alert('Please fix the following errors:\\n' + validation.errors.join('\\n'));\n    return;\n  }\n  \n  const results = compute(data);\n  displayResults(results);\n  displayExplanation(results, data);\n  \n  document.getElementById('results').style.display = 'block';\n  document.getElementById('explanation').style.display = 'block';\n  \n  // Emit calculator usage event for analytics\n  document.dispatchEvent(new CustomEvent('calculator:used', {\n    detail: {\n      type: 'roofing',\n      area: data.roofArea,\n      shingleType: data.shingleType\n    }\n  }));\n}\n\nfunction collectFormData() {\n  return {\n    roofArea: parseFloat(document.getElementById('roof-area').value) || 0,\n    roofPitch: parseFloat(document.getElementById('roof-pitch').value) || 4,\n    ridgeLength: parseFloat(document.getElementById('ridge-length').value) || 0,\n    rakeLength: parseFloat(document.getElementById('rake-length').value) || 0,\n    shingleType: document.getElementById('shingle-type').value,\n    bundlesPerSquare: parseInt(document.getElementById('bundles-per-square').value) || 3,\n    shingleWaste: parseFloat(document.getElementById('shingle-waste').value) || 10,\n    underlaymentType: document.getElementById('underlayment-type').value,\n    iceDamProtection: parseFloat(document.getElementById('ice-dam-protection').value) || 0,\n    underlaymentWaste: parseFloat(document.getElementById('underlayment-waste').value) || 5,\n    dripEdgeLength: parseFloat(document.getElementById('drip-edge-length').value) || 0,\n    valleyLength: parseFloat(document.getElementById('valley-length').value) || 0,\n    ventCount: parseInt(document.getElementById('vent-count').value) || 0,\n    ridgeVent: parseFloat(document.getElementById('ridge-vent').value) || 0,\n    region: document.getElementById('region').value,\n    includeLabor: document.getElementById('include-labor').value === 'yes'\n  };\n}\n\nfunction validateInputs(data) {\n  const errors = [];\n  \n  if (data.roofArea <= 0) errors.push('Roof area must be greater than 0');\n  if (data.roofArea > 100000) errors.push('Roof area seems too large (max 100,000 sq ft)');\n  \n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n}\n\nexport function compute(data) {\n  // Calculate roofing squares (1 square = 100 sq ft)\n  const squares = data.roofArea / 100;\n  \n  // Shingle calculations\n  const shingleBundlesBase = squares * data.bundlesPerSquare;\n  const shingleWasteAmount = shingleBundlesBase * (data.shingleWaste / 100);\n  const totalShingleBundles = Math.ceil(shingleBundlesBase + shingleWasteAmount);\n  \n  // Ridge cap calculations (typically 1 bundle covers 35 LF)\n  const ridgeCapBundles = Math.ceil(data.ridgeLength / 35);\n  \n  // Underlayment calculations\n  const underlaymentCoverage = getUnderlaymentCoverage(data.underlaymentType);\n  const underlaymentRollsBase = data.roofArea / underlaymentCoverage;\n  const underlaymentWaste = underlaymentRollsBase * (data.underlaymentWaste / 100);\n  const totalUnderlaymentRolls = Math.ceil(underlaymentRollsBase + underlaymentWaste);\n  \n  // Ice dam protection\n  const iceDamRolls = data.iceDamProtection > 0 ? Math.ceil((data.iceDamProtection * data.rakeLength) / 225) : 0;\n  \n  // Flashing and accessories\n  const dripEdgePieces = Math.ceil(data.dripEdgeLength / 10); // 10 ft pieces\n  const valleyFlashing = Math.ceil(data.valleyLength / 10); // 10 ft pieces\n  \n  // Fasteners - nails for shingles\n  const nailsPerBundle = 20; // pounds per bundle average\n  const totalNails = totalShingleBundles * nailsPerBundle;\n  \n  // Regional pricing\n  const pricing = getRegionalPricing(data.region);\n  \n  // Cost calculations\n  const costs = {\n    shingleBundles: totalShingleBundles * pricing.shingleBundle[data.shingleType],\n    ridgeCap: ridgeCapBundles * pricing.ridgeCapBundle,\n    underlayment: totalUnderlaymentRolls * pricing.underlayment[data.underlaymentType],\n    iceDam: iceDamRolls * pricing.iceDamShield,\n    dripEdge: dripEdgePieces * pricing.dripEdge,\n    valleyFlashing: valleyFlashing * pricing.valleyFlashing,\n    vents: data.ventCount * pricing.roofVent,\n    ridgeVent: (data.ridgeVent / 4) * pricing.ridgeVentSection, // 4 ft sections\n    nails: Math.ceil(totalNails / 50) * pricing.roofingNails // 50 lb boxes\n  };\n  \n  const materialCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n  const laborCost = data.includeLabor ? materialCost * pricing.laborMultiplier : 0;\n  const totalCost = materialCost + laborCost;\n  \n  return {\n    // Quantities\n    squares: parseFloat(squares.toFixed(2)),\n    shingleBundlesNeeded: totalShingleBundles,\n    ridgeCapBundles: ridgeCapBundles,\n    underlaymentRolls: totalUnderlaymentRolls,\n    iceDamRolls: iceDamRolls,\n    dripEdgePieces: dripEdgePieces,\n    valleyFlashing: valleyFlashing,\n    ventCount: data.ventCount,\n    ridgeVentSections: Math.ceil(data.ridgeVent / 4),\n    nailBoxes: Math.ceil(totalNails / 50),\n    \n    // Costs\n    costs: costs,\n    materialCost: materialCost,\n    laborCost: laborCost,\n    totalCost: totalCost,\n    \n    // Details\n    wasteAmounts: {\n      shingleWaste: shingleWasteAmount,\n      underlaymentWaste: underlaymentWaste\n    },\n    pricing: pricing\n  };\n}\n\nfunction getUnderlaymentCoverage(type) {\n  const coverage = {\n    'felt15': 432,\n    'felt30': 216,\n    'synthetic': 1000,\n    'ice-water': 225\n  };\n  return coverage[type] || 432;\n}\n\nfunction getRegionalPricing(region) {\n  const basePricing = {\n    'southeast': {\n      shingleBundle: { '3tab': 35, 'architectural': 45, 'luxury': 65, 'cedar': 95 },\n      ridgeCapBundle: 42,\n      underlayment: { 'felt15': 28, 'felt30': 35, 'synthetic': 85, 'ice-water': 65 },\n      iceDamShield: 65,\n      dripEdge: 12,\n      valleyFlashing: 15,\n      roofVent: 25,\n      ridgeVentSection: 18,\n      roofingNails: 45,\n      laborMultiplier: 1.8\n    },\n    'northeast': {\n      shingleBundle: { '3tab': 42, 'architectural': 52, 'luxury': 75, 'cedar': 110 },\n      ridgeCapBundle: 48,\n      underlayment: { 'felt15': 32, 'felt30': 42, 'synthetic': 95, 'ice-water': 75 },\n      iceDamShield: 75,\n      dripEdge: 14,\n      valleyFlashing: 18,\n      roofVent: 28,\n      ridgeVentSection: 22,\n      roofingNails: 52,\n      laborMultiplier: 2.2\n    },\n    'midwest': {\n      shingleBundle: { '3tab': 38, 'architectural': 48, 'luxury': 68, 'cedar': 98 },\n      ridgeCapBundle: 45,\n      underlayment: { 'felt15': 30, 'felt30': 38, 'synthetic': 88, 'ice-water': 68 },\n      iceDamShield: 68,\n      dripEdge: 13,\n      valleyFlashing: 16,\n      roofVent: 26,\n      ridgeVentSection: 20,\n      roofingNails: 48,\n      laborMultiplier: 1.9\n    },\n    'southwest': {\n      shingleBundle: { '3tab': 40, 'architectural': 50, 'luxury': 70, 'cedar': 100 },\n      ridgeCapBundle: 46,\n      underlayment: { 'felt15': 31, 'felt30': 39, 'synthetic': 90, 'ice-water': 70 },\n      iceDamShield: 70,\n      dripEdge: 13,\n      valleyFlashing: 17,\n      roofVent: 27,\n      ridgeVentSection: 21,\n      roofingNails: 50,\n      laborMultiplier: 2.0\n    },\n    'west': {\n      shingleBundle: { '3tab': 45, 'architectural': 55, 'luxury': 80, 'cedar': 115 },\n      ridgeCapBundle: 52,\n      underlayment: { 'felt15': 35, 'felt30': 45, 'synthetic': 100, 'ice-water': 80 },\n      iceDamShield: 80,\n      dripEdge: 15,\n      valleyFlashing: 20,\n      roofVent: 30,\n      ridgeVentSection: 25,\n      roofingNails: 55,\n      laborMultiplier: 2.4\n    }\n  };\n  \n  // Use southeast as default if region not found\n  return basePricing[region] || basePricing['southeast'];\n}\n\nfunction displayResults(results) {\n  const content = document.getElementById('results-content');\n  \n  content.innerHTML = `\n    <div class=\"results-grid\">\n      <div class=\"result-section\">\n        <h4>Shingle Materials</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Roof Squares:</span>\n          <span class=\"value\">${formatNumber(results.squares)} squares</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Shingle Bundles:</span>\n          <span class=\"value\">${results.shingleBundlesNeeded} bundles</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Ridge Cap Bundles:</span>\n          <span class=\"value\">${results.ridgeCapBundles} bundles</span>\n        </div>\n        <div class=\"result-item\">\n          <span class=\"label\">Roofing Nails:</span>\n          <span class=\"value\">${results.nailBoxes} boxes (50 lb each)</span>\n        </div>\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Underlayment & Protection</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Underlayment Rolls:</span>\n          <span class=\"value\">${results.underlaymentRolls} rolls</span>\n        </div>\n        ${results.iceDamRolls > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Ice Dam Protection:</span>\n          <span class=\"value\">${results.iceDamRolls} rolls</span>\n        </div>\n        ` : ''}\n      </div>\n\n      <div class=\"result-section\">\n        <h4>Flashing & Accessories</h4>\n        ${results.dripEdgePieces > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Drip Edge:</span>\n          <span class=\"value\">${results.dripEdgePieces} pieces (10 ft each)</span>\n        </div>\n        ` : ''}\n        ${results.valleyFlashing > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Valley Flashing:</span>\n          <span class=\"value\">${results.valleyFlashing} pieces (10 ft each)</span>\n        </div>\n        ` : ''}\n        ${results.ventCount > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Roof Vents:</span>\n          <span class=\"value\">${results.ventCount} vents</span>\n        </div>\n        ` : ''}\n        ${results.ridgeVentSections > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Ridge Vent Sections:</span>\n          <span class=\"value\">${results.ridgeVentSections} sections (4 ft each)</span>\n        </div>\n        ` : ''}\n      </div>\n\n      <div class=\"result-section cost-summary\">\n        <h4>Cost Summary</h4>\n        <div class=\"result-item\">\n          <span class=\"label\">Material Cost:</span>\n          <span class=\"value\">${formatCurrency(results.materialCost)}</span>\n        </div>\n        ${results.laborCost > 0 ? `\n        <div class=\"result-item\">\n          <span class=\"label\">Labor Cost:</span>\n          <span class=\"value\">${formatCurrency(results.laborCost)}</span>\n        </div>\n        ` : ''}\n        <div class=\"result-item total\">\n          <span class=\"label\">Total Cost:</span>\n          <span class=\"value\">${formatCurrency(results.totalCost)}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\nexport function explain(data) {\n  const results = compute(data);\n  \n  return `\n    <div class=\"explanation-content\">\n      <h4>Calculation Breakdown</h4>\n      \n      <h5>1. Roofing Squares</h5>\n      <p>Roof Area: ${data.roofArea} sq ft ÷ 100 = ${formatNumber(results.squares)} squares</p>\n      \n      <h5>2. Shingle Bundles</h5>\n      <p>Base Bundles: ${formatNumber(results.squares)} squares × ${data.bundlesPerSquare} bundles/square = ${formatNumber(results.squares * data.bundlesPerSquare)} bundles</p>\n      <p>Waste: ${formatNumber(results.squares * data.bundlesPerSquare)} × ${data.shingleWaste}% = ${formatNumber(results.wasteAmounts.shingleWaste)} bundles</p>\n      <p>Total: ${results.shingleBundlesNeeded} bundles (rounded up)</p>\n      \n      <h5>3. Ridge Cap</h5>\n      <p>Ridge Length: ${data.ridgeLength} ft ÷ 35 ft/bundle = ${results.ridgeCapBundles} bundles (rounded up)</p>\n      \n      <h5>4. Underlayment</h5>\n      <p>Coverage per roll: ${getUnderlaymentCoverage(data.underlaymentType)} sq ft</p>\n      <p>Rolls needed: ${data.roofArea} sq ft ÷ ${getUnderlaymentCoverage(data.underlaymentType)} = ${formatNumber(data.roofArea / getUnderlaymentCoverage(data.underlaymentType))}</p>\n      <p>With ${data.underlaymentWaste}% waste: ${results.underlaymentRolls} rolls (rounded up)</p>\n      \n      <div class=\"formula-note\">\n        <p><strong>Industry Standards Used:</strong></p>\n        <ul>\n          <li>1 roofing square = 100 square feet</li>\n          <li>Ridge cap coverage: 35 linear feet per bundle</li>\n          <li>Ice dam protection: 6 ft minimum from wall line</li>\n          <li>Standard waste factors: 10% shingles, 5% underlayment</li>\n          <li>Fasteners: ~20 lbs nails per bundle of shingles</li>\n        </ul>\n      </div>\n    </div>\n  `;\n}\n\nfunction displayExplanation(results, data) {\n  const content = document.getElementById('explanation-content');\n  content.innerHTML = explain(data);\n}\n\nfunction saveFormState() {\n  const formData = collectFormData();\n  saveState('roofing', formData);\n}\n\nfunction resetForm() {\n  document.querySelectorAll('input').forEach(input => {\n    input.value = '';\n  });\n  document.querySelectorAll('select').forEach(select => {\n    select.selectedIndex = 0;\n  });\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('explanation').style.display = 'none';\n  saveState('roofing', {});\n}\n\nfunction exportResults(format) {\n  const data = collectFormData();\n  const results = compute(data);\n  \n  const exportData = {\n    'Project': 'Roofing Materials Calculation',\n    'Date': new Date().toLocaleDateString(),\n    'Roof Area (sq ft)': data.roofArea,\n    'Roof Squares': results.squares,\n    'Shingle Type': data.shingleType,\n    'Shingle Bundles': results.shingleBundlesNeeded,\n    'Ridge Cap Bundles': results.ridgeCapBundles,\n    'Underlayment Rolls': results.underlaymentRolls,\n    'Material Cost': formatCurrency(results.materialCost),\n    'Total Cost': formatCurrency(results.totalCost)\n  };\n  \n  const filename = `roofing-calculation-${new Date().toISOString().split('T')[0]}`;\n  \n  switch(format) {\n    case 'csv':\n      exportToCsv(exportData, filename);\n      break;\n    case 'xlsx':\n      exportToXlsx(exportData, filename);\n      break;\n    case 'pdf':\n      exportToPdf(exportData, filename, 'Roofing Materials Calculation');\n      break;\n  }\n}\n\nexport function meta() {\n  return {\n    id: \"roofing\",\n    title: \"Professional Roofing Calculator\",\n    category: \"exterior\",\n    description: \"Calculate roofing materials including shingles, underlayment, flashing, and accessories with industry-standard formulas\"\n  };\n}","size_bytes":23905},"assets/js/calculators/siteconcrete.js":{"content":"import { Bus } from '../core/bus.js';\nimport { Units } from '../core/units.js';\nimport { Validate } from '../core/validate.js';\nimport { Pricing } from '../core/pricing.js';\nimport { Export } from '../core/export.js';\nimport { Store } from '../core/store.js';\nimport { UI } from '../core/ui.js';\n\nclass SiteConcreteCalculator {\n  constructor() {\n    this.id = 'siteconcrete';\n    this.name = 'Site Concrete Calculator';\n    this.description = 'Calculate concrete volume and materials for curbs, sidewalks, and site concrete elements';\n\n    this.state = {\n      // Element types and dimensions\n      elements: [\n        {\n          id: 'element-1',\n          type: 'sidewalk', // sidewalk, curb, driveway, apron, pad\n          length: 100, // feet\n          width: 4, // feet\n          thickness: 4, // inches\n          quantity: 1\n        }\n      ],\n\n      // Concrete specifications\n      concreteStrength: '3000', // PSI\n      concreteType: 'standard', // standard, air-entrained, fiber\n\n      // Reinforcement\n      reinforcementType: 'none', // none, wwm, rebar, fiber\n      rebarSize: '#4',\n      rebarSpacing: 24, // inches on center\n\n      // Base and subgrade\n      subbaseThickness: 4, // inches\n      subbaseType: 'gravel', // gravel, sand, crushed-stone\n\n      // Finishing\n      finishType: 'broom', // broom, float, exposed-aggregate, stamped\n      jointSpacing: 8, // feet\n      sealerRequired: true,\n\n      // Regional settings\n      region: 'national',\n      wastePercent: 10,\n\n      // Output\n      results: null\n    };\n\n    this.init();\n  }\n\n  init() {\n    this.bindFormElements();\n    this.setupEventListeners();\n    this.loadStoredData();\n    this.calculate();\n  }\n\n  bindFormElements() {\n    this.elements = {\n      // Concrete specifications\n      concreteStrength: document.getElementById('concrete-strength'),\n      concreteType: document.getElementById('concrete-type'),\n\n      // Reinforcement\n      reinforcementType: document.getElementById('reinforcement-type'),\n      rebarSize: document.getElementById('rebar-size'),\n      rebarSpacing: document.getElementById('rebar-spacing'),\n\n      // Base and subgrade\n      subbaseThickness: document.getElementById('subbase-thickness'),\n      subbaseType: document.getElementById('subbase-type'),\n\n      // Finishing\n      finishType: document.getElementById('finish-type'),\n      jointSpacing: document.getElementById('joint-spacing'),\n      sealerRequired: document.getElementById('sealer-required'),\n\n      // Regional settings\n      region: document.getElementById('region'),\n      wastePercent: document.getElementById('waste-percent'),\n\n      // Containers\n      elementsContainer: document.getElementById('elements-container'),\n      resultsContainer: document.getElementById('results'),\n      summaryContainer: document.getElementById('summary'),\n      exportContainer: document.getElementById('export-options')\n    };\n\n    // Set initial values\n    Object.keys(this.state).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        if (this.elements[key].type === 'checkbox') {\n          this.elements[key].checked = this.state[key];\n        } else {\n          this.elements[key].value = this.state[key];\n        }\n      }\n    });\n\n    this.renderElements();\n  }\n\n  setupEventListeners() {\n    // Form change events\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && this.elements[key].addEventListener) {\n        this.elements[key].addEventListener('change', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n\n        this.elements[key].addEventListener('input', () => {\n          this.updateStateFromForm();\n          this.calculate();\n        });\n      }\n    });\n\n    // Export buttons\n    Bus.on('export:csv', () => this.exportResults('csv'));\n    Bus.on('export:excel', () => this.exportResults('excel'));\n    Bus.on('export:pdf', () => this.exportResults('pdf'));\n\n    // Add element button\n    const addElementBtn = document.getElementById('add-element');\n    if (addElementBtn) {\n      addElementBtn.addEventListener('click', () => this.addElement());\n    }\n\n    // Reinforcement type change\n    if (this.elements.reinforcementType) {\n      this.elements.reinforcementType.addEventListener('change', () => {\n        this.toggleReinforcementInputs();\n      });\n    }\n  }\n\n  updateStateFromForm() {\n    // Update state from form elements\n    Object.keys(this.elements).forEach(key => {\n      if (this.elements[key] && typeof this.state[key] !== 'object') {\n        if (this.elements[key].type === 'checkbox') {\n          this.state[key] = this.elements[key].checked;\n        } else {\n          const value = parseFloat(this.elements[key].value) || this.elements[key].value || 0;\n          this.state[key] = value;\n        }\n      }\n    });\n\n    // Update elements data\n    this.updateElementsFromForm();\n\n    // Store state\n    Store.set(`calc-${this.id}-state`, this.state);\n  }\n\n  updateElementsFromForm() {\n    const elementItems = document.querySelectorAll('.element-item');\n    this.state.elements = [];\n\n    elementItems.forEach((item, index) => {\n      const elementId = item.dataset.elementId || `element-${index + 1}`;\n      const type = item.querySelector('.element-type').value;\n      const length = parseFloat(item.querySelector('.element-length').value) || 0;\n      const width = parseFloat(item.querySelector('.element-width').value) || 0;\n      const thickness = parseFloat(item.querySelector('.element-thickness').value) || 0;\n      const quantity = parseFloat(item.querySelector('.element-quantity').value) || 1;\n\n      this.state.elements.push({\n        id: elementId,\n        type,\n        length,\n        width,\n        thickness,\n        quantity\n      });\n    });\n  }\n\n  loadStoredData() {\n    const stored = Store.get(`calc-${this.id}-state`);\n    if (stored) {\n      Object.assign(this.state, stored);\n      this.bindFormElements();\n      this.toggleReinforcementInputs();\n    }\n  }\n\n  toggleReinforcementInputs() {\n    const rebarInputs = document.querySelector('.rebar-inputs');\n    if (rebarInputs) {\n      rebarInputs.style.display = this.state.reinforcementType === 'rebar' ? 'block' : 'none';\n    }\n  }\n\n  addElement() {\n    const newElement = {\n      id: `element-${Date.now()}`,\n      type: 'sidewalk',\n      length: 20,\n      width: 4,\n      thickness: 4,\n      quantity: 1\n    };\n\n    this.state.elements.push(newElement);\n    this.renderElements();\n    this.calculate();\n  }\n\n  removeElement(elementId) {\n    this.state.elements = this.state.elements.filter(el => el.id !== elementId);\n    this.renderElements();\n    this.calculate();\n  }\n\n  renderElements() {\n    if (!this.elements.elementsContainer) return;\n\n    const elementsHtml = this.state.elements.map(element => `\n      <div class=\"element-item\" data-element-id=\"${element.id}\">\n        <div class=\"element-header\">\n          <label>\n            Element Type:\n            <select class=\"element-type\">\n              <option value=\"sidewalk\" ${element.type === 'sidewalk' ? 'selected' : ''}>Sidewalk</option>\n              <option value=\"curb\" ${element.type === 'curb' ? 'selected' : ''}>Curb</option>\n              <option value=\"driveway\" ${element.type === 'driveway' ? 'selected' : ''}>Driveway</option>\n              <option value=\"apron\" ${element.type === 'apron' ? 'selected' : ''}>Apron</option>\n              <option value=\"pad\" ${element.type === 'pad' ? 'selected' : ''}>Equipment Pad</option>\n            </select>\n          </label>\n          <button type=\"button\" class=\"remove-element\" onclick=\"window.siteConcreteCalc.removeElement('${element.id}')\">Remove</button>\n        </div>\n        <div class=\"element-dimensions\">\n          <label>\n            Length (ft):\n            <input type=\"number\" class=\"element-length\" value=\"${element.length}\" step=\"0.1\" min=\"0\">\n          </label>\n          <label>\n            Width (ft):\n            <input type=\"number\" class=\"element-width\" value=\"${element.width}\" step=\"0.1\" min=\"0\">\n          </label>\n          <label>\n            Thickness (in):\n            <input type=\"number\" class=\"element-thickness\" value=\"${element.thickness}\" step=\"0.25\" min=\"0\">\n          </label>\n          <label>\n            Quantity:\n            <input type=\"number\" class=\"element-quantity\" value=\"${element.quantity}\" step=\"1\" min=\"1\">\n          </label>\n        </div>\n      </div>\n    `).join('');\n\n    this.elements.elementsContainer.innerHTML = elementsHtml;\n\n    // Add event listeners to new inputs\n    this.elements.elementsContainer.querySelectorAll('input, select').forEach(input => {\n      input.addEventListener('change', () => {\n        this.updateStateFromForm();\n        this.calculate();\n      });\n      input.addEventListener('input', () => {\n        this.updateStateFromForm();\n        this.calculate();\n      });\n    });\n  }\n\n  calculate() {\n    try {\n      const results = {\n        elements: this.calculateElementVolumes(),\n        totals: {},\n        reinforcement: {},\n        subbase: {},\n        finishing: {},\n        costs: {}\n      };\n\n      // Calculate totals\n      results.totals = this.calculateTotals(results.elements);\n\n      // Calculate reinforcement if needed\n      if (this.state.reinforcementType !== 'none') {\n        results.reinforcement = this.calculateReinforcement(results.elements);\n      }\n\n      // Calculate subbase\n      results.subbase = this.calculateSubbase(results.elements);\n\n      // Calculate finishing\n      results.finishing = this.calculateFinishing(results.elements);\n\n      // Calculate costs\n      results.costs = this.calculateCosts(results);\n\n      // Apply waste factor\n      results.materialsWithWaste = this.applyWasteFactor(results);\n\n      this.state.results = results;\n      this.displayResults();\n\n      Bus.emit('calculation:complete', {\n        calculator: this.id,\n        results: this.state.results\n      });\n\n    } catch (error) {\n      console.error('Calculation error:', error);\n      UI.showError('Calculation failed. Please check your inputs.');\n    }\n  }\n\n  calculateElementVolumes() {\n    return this.state.elements.map(element => {\n      const area = element.length * element.width * element.quantity;\n      const volume = area * (element.thickness / 12); // Convert inches to feet\n      const volumeYards = volume / 27; // Convert to cubic yards\n\n      return {\n        ...element,\n        area: area,\n        volume: volume, // cubic feet\n        volumeYards: volumeYards, // cubic yards\n        perimeter: (element.length + element.width) * 2 * element.quantity,\n        linearFeet: element.type === 'curb' ? element.length * element.quantity : 0\n      };\n    });\n  }\n\n  calculateTotals(elementResults) {\n    const totalArea = elementResults.reduce((sum, el) => sum + el.area, 0);\n    const totalVolume = elementResults.reduce((sum, el) => sum + el.volume, 0);\n    const totalVolumeYards = elementResults.reduce((sum, el) => sum + el.volumeYards, 0);\n    const totalPerimeter = elementResults.reduce((sum, el) => sum + el.perimeter, 0);\n    const totalLinearFeet = elementResults.reduce((sum, el) => sum + el.linearFeet, 0);\n\n    // Concrete ordering (add waste)\n    const concreteYardsOrdered = Math.ceil(totalVolumeYards * (1 + this.state.wastePercent / 100) * 4) / 4; // Round to quarter yard\n\n    return {\n      area: totalArea,\n      volume: totalVolume,\n      volumeYards: totalVolumeYards,\n      concreteYardsOrdered: concreteYardsOrdered,\n      perimeter: totalPerimeter,\n      linearFeet: totalLinearFeet\n    };\n  }\n\n  calculateReinforcement(elementResults) {\n    if (this.state.reinforcementType === 'none') return {};\n\n    const totalArea = elementResults.reduce((sum, el) => sum + el.area, 0);\n\n    if (this.state.reinforcementType === 'wwm') {\n      // Welded wire mesh - typically 6x6 W1.4xW1.4\n      const meshRolls = Math.ceil(totalArea / 750); // 5'x150' rolls = 750 sq ft\n\n      return {\n        type: 'WWM',\n        meshRolls: meshRolls,\n        coverage: totalArea,\n        specification: '6x6-W1.4xW1.4'\n      };\n    }\n\n    if (this.state.reinforcementType === 'rebar') {\n      // Calculate rebar grid\n      const spacingFeet = this.state.rebarSpacing / 12;\n\n      let totalRebarLength = 0;\n      elementResults.forEach(element => {\n        const lengthBars = Math.ceil(element.width / spacingFeet) + 1;\n        const widthBars = Math.ceil(element.length / spacingFeet) + 1;\n\n        const lengthBarsFeet = lengthBars * element.length * element.quantity;\n        const widthBarsFeet = widthBars * element.width * element.quantity;\n\n        totalRebarLength += lengthBarsFeet + widthBarsFeet;\n      });\n\n      // Standard rebar lengths are 20 feet\n      const standardBars = Math.ceil(totalRebarLength / 20);\n\n      return {\n        type: 'Rebar',\n        size: this.state.rebarSize,\n        spacing: this.state.rebarSpacing,\n        totalLength: totalRebarLength,\n        standardBars: standardBars,\n        coverage: totalArea\n      };\n    }\n\n    if (this.state.reinforcementType === 'fiber') {\n      // Fiber reinforced concrete\n      const fiberPounds = Math.ceil(totalArea * 0.1); // Rough estimate\n\n      return {\n        type: 'Fiber',\n        pounds: fiberPounds,\n        coverage: totalArea,\n        specification: 'Synthetic macro fiber'\n      };\n    }\n\n    return {};\n  }\n\n  calculateSubbase(elementResults) {\n    if (this.state.subbaseThickness <= 0) return {};\n\n    const totalArea = elementResults.reduce((sum, el) => sum + el.area, 0);\n    const subbaseVolume = totalArea * (this.state.subbaseThickness / 12); // cubic feet\n    const subbaseYards = subbaseVolume / 27; // cubic yards\n    const subbaseTons = subbaseYards * 1.5; // Approximate tons (varies by material)\n\n    return {\n      type: this.state.subbaseType,\n      thickness: this.state.subbaseThickness,\n      area: totalArea,\n      volume: subbaseVolume,\n      yards: subbaseYards,\n      tons: subbaseTons\n    };\n  }\n\n  calculateFinishing(elementResults) {\n    const totalArea = elementResults.reduce((sum, el) => sum + el.area, 0);\n    const totalPerimeter = elementResults.reduce((sum, el) => sum + el.perimeter, 0);\n\n    // Control joints\n    const jointSpacing = this.state.jointSpacing;\n    let totalJointLength = 0;\n\n    elementResults.forEach(element => {\n      const lengthJoints = Math.floor(element.length / jointSpacing) * element.width * element.quantity;\n      const widthJoints = Math.floor(element.width / jointSpacing) * element.length * element.quantity;\n      totalJointLength += lengthJoints + widthJoints;\n    });\n\n    const finishing = {\n      finishType: this.state.finishType,\n      area: totalArea,\n      jointLength: totalJointLength,\n      jointSpacing: jointSpacing\n    };\n\n    // Sealer calculation\n    if (this.state.sealerRequired) {\n      // Concrete sealer typically covers 250-300 sq ft per gallon\n      const sealerGallons = Math.ceil(totalArea / 275);\n      finishing.sealer = {\n        required: true,\n        gallons: sealerGallons,\n        coverage: totalArea\n      };\n    }\n\n    // Edging for sidewalks and driveways\n    const edgeableElements = elementResults.filter(el =>\n      ['sidewalk', 'driveway', 'apron'].includes(el.type)\n    );\n    const edgeLinearFeet = edgeableElements.reduce((sum, el) => sum + el.perimeter, 0);\n\n    if (edgeLinearFeet > 0) {\n      finishing.edging = {\n        linearFeet: edgeLinearFeet,\n        type: 'Expansion joint material'\n      };\n    }\n\n    return finishing;\n  }\n\n  calculateCosts(results) {\n    const pricing = Pricing.getRegionalPricing(this.state.region);\n    const concretePricing = pricing.concrete || {};\n\n    let materialCosts = 0;\n    let laborCosts = 0;\n\n    // Concrete cost\n    const concretePrice = concretePricing.readyMix?.price || 120; // per cubic yard\n    const concreteCost = results.totals.concreteYardsOrdered * concretePrice;\n    materialCosts += concreteCost;\n\n    // Concrete placement labor\n    const placementLabor = (concretePricing.placement?.price || 45) * results.totals.area;\n    laborCosts += placementLabor;\n\n    // Reinforcement costs\n    if (results.reinforcement.type) {\n      if (results.reinforcement.type === 'WWM') {\n        const meshCost = (concretePricing.wwm?.price || 125) * results.reinforcement.meshRolls;\n        materialCosts += meshCost;\n      } else if (results.reinforcement.type === 'Rebar') {\n        const rebarCost = (concretePricing.rebar?.price || 0.85) * results.reinforcement.totalLength;\n        const rebarLaborCost = (concretePricing.rebarInstallation?.price || 0.45) * results.reinforcement.totalLength;\n        materialCosts += rebarCost;\n        laborCosts += rebarLaborCost;\n      } else if (results.reinforcement.type === 'Fiber') {\n        const fiberCost = (concretePricing.fiber?.price || 2.50) * results.reinforcement.pounds;\n        materialCosts += fiberCost;\n      }\n    }\n\n    // Subbase costs\n    if (results.subbase.yards) {\n      const subbaseCost = (concretePricing.subbase?.price || 35) * results.subbase.yards;\n      const subbaseLabor = (concretePricing.subbaseInstallation?.price || 15) * results.subbase.yards;\n      materialCosts += subbaseCost;\n      laborCosts += subbaseLabor;\n    }\n\n    // Finishing costs\n    const finishingLabor = (concretePricing.finishing?.price || 2.50) * results.totals.area;\n    laborCosts += finishingLabor;\n\n    // Joint sealing\n    if (results.finishing.jointLength > 0) {\n      const jointSealCost = (concretePricing.jointSeal?.price || 1.25) * results.finishing.jointLength;\n      materialCosts += jointSealCost;\n    }\n\n    // Sealer costs\n    if (results.finishing.sealer) {\n      const sealerCost = (concretePricing.sealer?.price || 35) * results.finishing.sealer.gallons;\n      const sealerLabor = (concretePricing.sealerApplication?.price || 0.75) * results.totals.area;\n      materialCosts += sealerCost;\n      laborCosts += sealerLabor;\n    }\n\n    const subtotal = materialCosts + laborCosts;\n    const overhead = subtotal * 0.15; // 15% overhead\n    const profit = subtotal * 0.10; // 10% profit\n    const total = subtotal + overhead + profit;\n\n    return {\n      materials: materialCosts,\n      labor: laborCosts,\n      subtotal,\n      overhead,\n      profit,\n      total,\n      region: this.state.region,\n      pricePerSqFt: total / results.totals.area,\n      pricePerYard: total / results.totals.concreteYardsOrdered\n    };\n  }\n\n  applyWasteFactor(results) {\n    const wasteFactor = 1 + (this.state.wastePercent / 100);\n\n    // Most materials already have waste applied at ordering stage\n    // This is mainly for informational purposes\n    return {\n      concreteYardsWithWaste: results.totals.concreteYardsOrdered,\n      note: 'Waste factor already applied to concrete ordering'\n    };\n  }\n\n  displayResults() {\n    if (!this.state.results || !this.elements.resultsContainer) return;\n\n    const results = this.state.results;\n\n    let resultsHtml = `\n      <div class=\"result-group\">\n        <h3>Concrete Requirements</h3>\n        <div class=\"result-item\">\n          <span>Total Area:</span>\n          <span>${results.totals.area.toLocaleString()} sq ft</span>\n        </div>\n        <div class=\"result-item\">\n          <span>Concrete Volume:</span>\n          <span>${results.totals.volumeYards.toFixed(2)} cu yd</span>\n        </div>\n        <div class=\"result-item\">\n          <span>Concrete to Order:</span>\n          <span>${results.totals.concreteYardsOrdered} cu yd</span>\n        </div>\n        <div class=\"result-detail\">\n          <small>Includes ${this.state.wastePercent}% waste factor</small>\n        </div>\n      </div>\n    `;\n\n    // Reinforcement section\n    if (results.reinforcement.type) {\n      resultsHtml += `\n        <div class=\"result-group\">\n          <h3>Reinforcement (${results.reinforcement.type})</h3>\n      `;\n\n      if (results.reinforcement.type === 'WWM') {\n        resultsHtml += `\n          <div class=\"result-item\">\n            <span>Mesh rolls (${results.reinforcement.specification}):</span>\n            <span>${results.reinforcement.meshRolls} rolls</span>\n          </div>\n        `;\n      } else if (results.reinforcement.type === 'Rebar') {\n        resultsHtml += `\n          <div class=\"result-item\">\n            <span>Rebar size:</span>\n            <span>${results.reinforcement.size}</span>\n          </div>\n          <div class=\"result-item\">\n            <span>Total length:</span>\n            <span>${results.reinforcement.totalLength.toFixed(1)} ft</span>\n          </div>\n          <div class=\"result-item\">\n            <span>Standard bars (20 ft):</span>\n            <span>${results.reinforcement.standardBars} bars</span>\n          </div>\n        `;\n      } else if (results.reinforcement.type === 'Fiber') {\n        resultsHtml += `\n          <div class=\"result-item\">\n            <span>Fiber reinforcement:</span>\n            <span>${results.reinforcement.pounds} lbs</span>\n          </div>\n        `;\n      }\n\n      resultsHtml += `</div>`;\n    }\n\n    // Subbase section\n    if (results.subbase.yards) {\n      resultsHtml += `\n        <div class=\"result-group\">\n          <h3>Subbase (${results.subbase.type})</h3>\n          <div class=\"result-item\">\n            <span>Thickness:</span>\n            <span>${results.subbase.thickness}\"</span>\n          </div>\n          <div class=\"result-item\">\n            <span>Volume:</span>\n            <span>${results.subbase.yards.toFixed(2)} cu yd</span>\n          </div>\n          <div class=\"result-item\">\n            <span>Approximate weight:</span>\n            <span>${results.subbase.tons.toFixed(1)} tons</span>\n          </div>\n        </div>\n      `;\n    }\n\n    // Finishing section\n    resultsHtml += `\n      <div class=\"result-group\">\n        <h3>Finishing</h3>\n        <div class=\"result-item\">\n          <span>Finish type:</span>\n          <span>${results.finishing.finishType}</span>\n        </div>\n        <div class=\"result-item\">\n          <span>Control joints:</span>\n          <span>${results.finishing.jointLength.toFixed(0)} linear ft</span>\n        </div>\n    `;\n\n    if (results.finishing.sealer) {\n      resultsHtml += `\n        <div class=\"result-item\">\n          <span>Sealer required:</span>\n          <span>${results.finishing.sealer.gallons} gallons</span>\n        </div>\n      `;\n    }\n\n    if (results.finishing.edging) {\n      resultsHtml += `\n        <div class=\"result-item\">\n          <span>Edging material:</span>\n          <span>${results.finishing.edging.linearFeet.toFixed(0)} linear ft</span>\n        </div>\n      `;\n    }\n\n    resultsHtml += `</div>`;\n\n    this.elements.resultsContainer.innerHTML = resultsHtml;\n\n    // Display cost summary\n    if (this.elements.summaryContainer) {\n      this.elements.summaryContainer.innerHTML = `\n        <div class=\"cost-summary\">\n          <h3>Cost Summary (${results.costs.region})</h3>\n          <div class=\"cost-item\">\n            <span>Materials:</span>\n            <span>$${results.costs.materials.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Labor:</span>\n            <span>$${results.costs.labor.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Overhead (15%):</span>\n            <span>$${results.costs.overhead.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-item\">\n            <span>Profit (10%):</span>\n            <span>$${results.costs.profit.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-total\">\n            <span>Total Cost:</span>\n            <span>$${results.costs.total.toLocaleString()}</span>\n          </div>\n          <div class=\"cost-detail\">\n            <small>$${results.costs.pricePerSqFt.toFixed(2)} per sq ft | $${results.costs.pricePerYard.toFixed(0)} per cu yd</small>\n          </div>\n        </div>\n      `;\n    }\n\n    // Show export options\n    if (this.elements.exportContainer) {\n      this.elements.exportContainer.style.display = 'block';\n    }\n  }\n\n  exportResults(format) {\n    if (!this.state.results) {\n      UI.showError('No results to export');\n      return;\n    }\n\n    const results = this.state.results;\n\n    const exportData = {\n      project: 'Site Concrete Calculator Results',\n      date: new Date().toLocaleDateString(),\n      inputs: {\n        'Concrete Strength': `${this.state.concreteStrength} PSI`,\n        'Concrete Type': this.state.concreteType,\n        'Reinforcement': this.state.reinforcementType,\n        'Finish Type': this.state.finishType,\n        'Waste Factor': `${this.state.wastePercent}%`,\n        'Region': this.state.region\n      },\n      elements: {},\n      totals: {\n        'Total Area': `${results.totals.area.toLocaleString()} sq ft`,\n        'Concrete Volume': `${results.totals.volumeYards.toFixed(2)} cu yd`,\n        'Concrete to Order': `${results.totals.concreteYardsOrdered} cu yd`\n      },\n      costs: {\n        'Material Cost': `$${results.costs.materials.toLocaleString()}`,\n        'Labor Cost': `$${results.costs.labor.toLocaleString()}`,\n        'Overhead': `$${results.costs.overhead.toLocaleString()}`,\n        'Profit': `$${results.costs.profit.toLocaleString()}`,\n        'Total Cost': `$${results.costs.total.toLocaleString()}`,\n        'Cost per Sq Ft': `$${results.costs.pricePerSqFt.toFixed(2)}`,\n        'Cost per Cu Yd': `$${results.costs.pricePerYard.toFixed(0)}`\n      }\n    };\n\n    // Add elements breakdown\n    results.elements.forEach((element, index) => {\n      exportData.elements[`Element ${index + 1} (${element.type})`] = {\n        'Dimensions': `${element.length}' x ${element.width}' x ${element.thickness}\"`,\n        'Quantity': element.quantity,\n        'Area': `${element.area.toFixed(1)} sq ft`,\n        'Volume': `${element.volumeYards.toFixed(2)} cu yd`\n      };\n    });\n\n    // Add reinforcement if present\n    if (results.reinforcement.type) {\n      exportData.reinforcement = {\n        'Type': results.reinforcement.type\n      };\n\n      if (results.reinforcement.meshRolls) {\n        exportData.reinforcement['Mesh Rolls'] = `${results.reinforcement.meshRolls}`;\n      }\n      if (results.reinforcement.standardBars) {\n        exportData.reinforcement['Rebar Bars'] = `${results.reinforcement.standardBars}`;\n        exportData.reinforcement['Rebar Length'] = `${results.reinforcement.totalLength.toFixed(1)} ft`;\n      }\n      if (results.reinforcement.pounds) {\n        exportData.reinforcement['Fiber Weight'] = `${results.reinforcement.pounds} lbs`;\n      }\n    }\n\n    // Add subbase if present\n    if (results.subbase.yards) {\n      exportData.subbase = {\n        'Type': results.subbase.type,\n        'Thickness': `${results.subbase.thickness}\"`,\n        'Volume': `${results.subbase.yards.toFixed(2)} cu yd`,\n        'Weight': `${results.subbase.tons.toFixed(1)} tons`\n      };\n    }\n\n    Export.exportData(exportData, `site-concrete-calculation-${Date.now()}`, format);\n  }\n\n  // Legacy compute function for testing\n  compute() {\n    if (!this.state.results) return null;\n\n    const results = this.state.results;\n    const output = {\n      area: results.totals.area,\n      volumeYards: results.totals.volumeYards,\n      concreteYardsOrdered: results.totals.concreteYardsOrdered,\n      totalCost: results.costs.total\n    };\n\n    return output;\n  }\n}\n\n// Initialize calculator when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.siteConcreteCalc = new SiteConcreteCalculator();\n});\n\n// Legacy exports for compatibility\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n  window.siteConcreteCalc = new SiteConcreteCalculator();\n}\n\nexport function compute(state) {\n  // Legacy compute for testing: 100 sq ft @ 4\" thick should return reasonable volume\n  const area = state?.area || 400; // 100 ft x 4 ft = 400 sq ft\n  const thickness = state?.thickness || 4; // inches\n\n  const volume = area * (thickness / 12); // cubic feet\n  const volumeYards = volume / 27; // cubic yards\n  const concreteOrdered = Math.ceil(volumeYards * 1.1 * 4) / 4; // with waste, rounded to quarter yard\n\n  return {\n    ok: true,\n    area: area,\n    volumeYards: volumeYards,\n    concreteOrdered: concreteOrdered\n  };\n}\n\nexport function explain(state) {\n  return \"Calculates concrete volume, reinforcement, subbase, and finishing materials for curbs, sidewalks, driveways, and site concrete elements.\";\n}\n\nexport function meta() {\n  return {\n    id: \"siteconcrete\",\n    title: \"Site Concrete Calculator\",\n    category: \"sitework\"\n  };\n}\n\nexport { SiteConcreteCalculator };","size_bytes":28465},"assets/js/calculators/steel.js":{"content":"// Steel Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"steel\",\n    title: \"Steel Calculator\",\n    category: \"structural\"\n  };\n}","size_bytes":357},"assets/js/calculators/waterproof.js":{"content":"// Waterproofing Calculator\nexport function init(el) {\n  // Initialize calculator UI in the provided element\n}\n\nexport function compute(state) {\n  return { ok: false, msg: \"Not implemented\" };\n}\n\nexport function explain(state) {\n  return \"TBD\";\n}\n\nexport function meta() {\n  return {\n    id: \"waterproof\",\n    title: \"Waterproofing Calculator\",\n    category: \"protection\"\n  };\n}","size_bytes":378},"assets/js/core/a11y.js":{"content":"// Accessibility utilities\n// Placeholder for accessibility implementation","size_bytes":74},"assets/js/core/bus.js":{"content":"// Event bus for inter-component communication\n// Pub/sub pattern for loose coupling between calculator components\n\nclass EventBus {\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} event - Event name\n   * @param {function} callback - Callback function\n   * @returns {function} Unsubscribe function\n   */\n  on(event, callback) {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n\n    this.events.get(event).add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.events.get(event);\n      if (callbacks) {\n        callbacks.delete(callback);\n        if (callbacks.size === 0) {\n          this.events.delete(event);\n        }\n      }\n    };\n  }\n\n  /**\n   * Subscribe to an event once\n   * @param {string} event - Event name\n   * @param {function} callback - Callback function\n   */\n  once(event, callback) {\n    const unsubscribe = this.on(event, (...args) => {\n      unsubscribe();\n      callback(...args);\n    });\n    return unsubscribe;\n  }\n\n  /**\n   * Emit an event\n   * @param {string} event - Event name\n   * @param {...any} args - Arguments to pass to callbacks\n   */\n  emit(event, ...args) {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(...args);\n        } catch (error) {\n          console.error(`Error in event handler for '${event}':`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all listeners for an event\n   * @param {string} event - Event name\n   */\n  off(event) {\n    this.events.delete(event);\n  }\n\n  /**\n   * Remove all listeners\n   */\n  clear() {\n    this.events.clear();\n  }\n\n  /**\n   * Get list of active events\n   * @returns {string[]} Array of event names\n   */\n  getEvents() {\n    return Array.from(this.events.keys());\n  }\n\n  /**\n   * Get number of listeners for an event\n   * @param {string} event - Event name\n   * @returns {number} Number of listeners\n   */\n  listenerCount(event) {\n    const callbacks = this.events.get(event);\n    return callbacks ? callbacks.size : 0;\n  }\n}\n\n// Create global event bus instance\nexport const bus = new EventBus();\n\n// Export class for custom instances\nexport { EventBus };\n\n// Common events used throughout the application\nexport const EVENTS = {\n  // Calculator events\n  CALCULATOR_LOADED: 'calculator:loaded',\n  CALCULATOR_UPDATED: 'calculator:updated',\n  CALCULATOR_CALCULATED: 'calculator:calculated',\n  CALCULATOR_RESET: 'calculator:reset',\n\n  // Form events\n  FORM_CHANGED: 'form:changed',\n  FORM_VALIDATED: 'form:validated',\n  FORM_SUBMITTED: 'form:submitted',\n\n  // Data events\n  DATA_LOADED: 'data:loaded',\n  DATA_ERROR: 'data:error',\n  PRICING_UPDATED: 'pricing:updated',\n\n  // UI events\n  RESULTS_UPDATED: 'results:updated',\n  EXPORT_STARTED: 'export:started',\n  EXPORT_COMPLETED: 'export:completed',\n  EXPORT_ERROR: 'export:error'\n};","size_bytes":2944},"assets/js/core/export.js":{"content":"// Export functionality (CSV, XLSX, PDF, print)\n// Enhanced with vendored jsPDF and SheetJS libraries\n\nimport { bus, EVENTS } from './bus.js';\n\n// Library loading state\nlet jsPDFLoaded = false;\nlet xlsxLoaded = false;\n\n/**\n * Load jsPDF library if not already loaded\n */\nasync function loadJsPDF() {\n  if (jsPDFLoaded || window.jsPDF) {\n    return true;\n  }\n\n  try {\n    // Try to get current nonce from meta tag or existing scripts\n    const existingScript = document.querySelector('script[nonce]');\n    const nonce = existingScript ? existingScript.getAttribute('nonce') : null;\n    \n    const script = document.createElement('script');\n    script.src = '/vendor/jspdf/jspdf.min.js';\n    script.async = true;\n    if (nonce) script.nonce = nonce;\n\n    const loadPromise = new Promise((resolve, reject) => {\n      script.onload = () => {\n        jsPDFLoaded = true;\n        resolve(true);\n      };\n      script.onerror = () => reject(new Error('Failed to load jsPDF'));\n    });\n\n    document.head.appendChild(script);\n    return await loadPromise;\n  } catch (error) {\n    console.error('Error loading jsPDF:', error);\n    return false;\n  }\n}\n\n/**\n * Load SheetJS library if not already loaded\n */\nasync function loadXLSX() {\n  if (xlsxLoaded || window.XLSX) {\n    return true;\n  }\n\n  try {\n    // Try to get current nonce from meta tag or existing scripts\n    const existingScript = document.querySelector('script[nonce]');\n    const nonce = existingScript ? existingScript.getAttribute('nonce') : null;\n    \n    const script = document.createElement('script');\n    script.src = '/vendor/xlsx/xlsx.min.js';\n    script.async = true;\n    if (nonce) script.nonce = nonce;\n\n    const loadPromise = new Promise((resolve, reject) => {\n      script.onload = () => {\n        xlsxLoaded = true;\n        resolve(true);\n      };\n      script.onerror = () => reject(new Error('Failed to load XLSX'));\n    });\n\n    document.head.appendChild(script);\n    return await loadPromise;\n  } catch (error) {\n    console.error('Error loading XLSX:', error);\n    return false;\n  }\n}\n\nexport function exportToCsv(data, filename = 'export.csv') {\n  const csvContent = data.map(row =>\n    row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(',')\n  ).join('\\n');\n\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  downloadFile(blob, filename);\n\n  bus.emit(EVENTS.EXPORT_COMPLETED, { format: 'csv', filename });\n\n  // Emit analytics event for CSV export\n  document.dispatchEvent(new CustomEvent('calculator:exported', {\n    detail: {\n      type: 'csv',\n      format: 'csv',\n      totalCost: data.reduce((sum, row, index) => {\n        if (index === 0) return sum; // Skip header row\n        const costCell = row.find(cell => typeof cell === 'number' && cell > 0);\n        return sum + (costCell || 0);\n      }, 0),\n      filename: filename\n    }\n  }));\n}\n\nexport async function exportToXlsx(data, filename = 'export.xlsx') {\n  try {\n    const loaded = await loadXLSX();\n    if (!loaded || !window.XLSX) {\n      throw new Error('XLSX library not available');\n    }\n\n    // Convert data array to worksheet\n    const worksheet = window.XLSX.utils.aoa_to_sheet(data);\n\n    // Create workbook and add worksheet\n    const workbook = window.XLSX.utils.book_new();\n    window.XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\n\n    // Generate XLSX file and download\n    window.XLSX.writeFile(workbook, filename);\n\n    bus.emit(EVENTS.EXPORT_COMPLETED, { format: 'xlsx', filename });\n\n    // Emit analytics event for XLSX export\n    document.dispatchEvent(new CustomEvent('calculator:exported', {\n      detail: {\n        type: 'xlsx',\n        format: 'xlsx',\n        totalCost: data.reduce((sum, row, index) => {\n          if (index === 0) return sum; // Skip header row\n          const costCell = row.find(cell => typeof cell === 'number' && cell > 0);\n          return sum + (costCell || 0);\n        }, 0),\n        filename: filename\n      }\n    }));\n\n  } catch (error) {\n    console.error('XLSX export error:', error);\n    bus.emit(EVENTS.EXPORT_ERROR, { format: 'xlsx', error: error.message });\n\n    // Fallback to CSV\n    exportToCsv(data, filename.replace('.xlsx', '.csv'));\n  }\n}\n\nexport async function exportToPdf(data, title = 'Report', filename = 'export.pdf') {\n  try {\n    const loaded = await loadJsPDF();\n    if (!loaded || !window.jsPDF) {\n      throw new Error('jsPDF library not available');\n    }\n\n    // Validate data\n    if (!Array.isArray(data) || !data.length || !data[0]?.length) {\n      bus.emit(EVENTS.EXPORT_ERROR, { \n        format: 'pdf', \n        error: 'No data available for export. Please calculate results first.' \n      });\n      return;\n    }\n\n    const { jsPDF } = window.jsPDF;\n    const doc = new jsPDF();\n\n    // Generate report ID once for consistency across pages\n    const reportId = generateReportId();\n\n    // Professional header\n    addProfessionalHeader(doc, title, reportId);\n    \n    // Table configuration\n    const startY = 80;\n    const cellPadding = 5;\n    const cellHeight = 10;\n    const pageWidth = doc.internal.pageSize.width;\n    const margins = 20;\n    const tableWidth = pageWidth - (margins * 2);\n\n    let currentY = startY;\n\n    // Calculate column widths (safe division)\n    const numCols = data[0].length;\n    const colWidth = tableWidth / numCols;\n\n    // Add table header styling if first row looks like headers\n    let isFirstRow = true;\n    \n    // Add table data\n    data.forEach((row, rowIndex) => {\n      // Check if we need a new page\n      if (currentY > doc.internal.pageSize.height - 60) {\n        doc.addPage();\n        addProfessionalHeader(doc, title, reportId);\n        currentY = 80;\n      }\n\n      let currentX = margins;\n\n      // Set style for header row\n      if (isFirstRow) {\n        doc.setFillColor(240, 240, 240);\n        doc.setFont(undefined, 'bold');\n      } else {\n        doc.setFillColor(255, 255, 255);\n        doc.setFont(undefined, 'normal');\n      }\n\n      row.forEach((cell, colIndex) => {\n        const cellText = String(cell || '');\n\n        // Draw cell with fill for headers\n        doc.rect(currentX, currentY, colWidth, cellHeight, isFirstRow ? 'FD' : 'D');\n\n        // Add text (truncate if too long)\n        const maxWidth = colWidth - (cellPadding * 2);\n        doc.setFontSize(9);\n        const truncatedText = doc.getTextWidth(cellText) > maxWidth\n          ? cellText.substring(0, Math.floor(cellText.length * maxWidth / doc.getTextWidth(cellText))) + '...'\n          : cellText;\n\n        doc.text(truncatedText, currentX + cellPadding, currentY + cellHeight - 3);\n        currentX += colWidth;\n      });\n\n      currentY += cellHeight;\n      isFirstRow = false;\n    });\n\n    // Add professional footer to all pages\n    addFootersToAllPages(doc);\n\n    // Save the PDF\n    doc.save(filename);\n\n    bus.emit(EVENTS.EXPORT_COMPLETED, { format: 'pdf', filename });\n\n    // Emit analytics event for export\n    document.dispatchEvent(new CustomEvent('calculator:exported', {\n      detail: {\n        type: 'pdf',\n        format: 'pdf',\n        totalCost: data.reduce((sum, row, index) => {\n          if (index === 0) return sum; // Skip header row\n          const costCell = row.find(cell => typeof cell === 'number' && cell > 0);\n          return sum + (costCell || 0);\n        }, 0),\n        filename: filename\n      }\n    }));\n\n  } catch (error) {\n    console.error('PDF export error:', error);\n    bus.emit(EVENTS.EXPORT_ERROR, { format: 'pdf', error: error.message });\n\n    // Fallback to print\n    exportToPrintFallback(data, title);\n  }\n}\n\n/**\n * Add professional header to PDF\n */\nfunction addProfessionalHeader(doc, title, reportId) {\n  const pageWidth = doc.internal.pageSize.width;\n  \n  // Company header\n  doc.setFillColor(30, 64, 175); // Blue header\n  doc.rect(0, 0, pageWidth, 25, 'F');\n  \n  // Logo/Company name\n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(18);\n  doc.setFont(undefined, 'bold');\n  doc.text('CostFlowAI', 20, 17);\n  \n  // Professional tagline\n  doc.setFontSize(10);\n  doc.setFont(undefined, 'normal');\n  doc.text('Professional Construction Cost Analysis', pageWidth - 20, 17, { align: 'right' });\n  \n  // Reset colors\n  doc.setTextColor(0, 0, 0);\n  \n  // Report title\n  doc.setFontSize(16);\n  doc.setFont(undefined, 'bold');\n  doc.text(title, 20, 40);\n  \n  // Generation info\n  doc.setFontSize(10);\n  doc.setFont(undefined, 'normal');\n  const now = new Date();\n  doc.text(`Generated: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`, 20, 50);\n  doc.text(`Report ID: ${reportId}`, 20, 58);\n  \n  // Separator line\n  doc.setLineWidth(0.5);\n  doc.setDrawColor(200, 200, 200);\n  doc.line(20, 68, pageWidth - 20, 68);\n}\n\n/**\n * Add professional footer with disclaimers to all pages\n */\nfunction addFootersToAllPages(doc) {\n  const totalPages = doc.internal.getNumberOfPages();\n  \n  for (let i = 1; i <= totalPages; i++) {\n    doc.setPage(i);\n    addProfessionalFooter(doc, i, totalPages);\n  }\n}\n\n/**\n * Add professional footer with disclaimers to current page\n */\nfunction addProfessionalFooter(doc, pageNum, totalPages) {\n  const pageWidth = doc.internal.pageSize.width;\n  const pageHeight = doc.internal.pageSize.height;\n  const footerY = pageHeight - 40;\n  \n  // Footer separator line\n  doc.setLineWidth(0.5);\n  doc.setDrawColor(200, 200, 200);\n  doc.line(20, footerY - 5, pageWidth - 20, footerY - 5);\n  \n  // Disclaimer (only on first page to avoid repetition)\n  if (pageNum === 1) {\n    doc.setFontSize(8);\n    doc.setFont(undefined, 'normal');\n    doc.setTextColor(100, 100, 100);\n    \n    const disclaimer = `DISCLAIMER: This report is for estimation purposes only. Actual costs may vary based on market conditions, \nregional factors, and project specifications. CostFlowAI is not responsible for cost overruns or project delays.`;\n    \n    const disclaimerLines = doc.splitTextToSize(disclaimer, pageWidth - 40);\n    doc.text(disclaimerLines, 20, footerY);\n  }\n  \n  // Footer info (on all pages)\n  doc.setFontSize(9);\n  doc.setTextColor(100, 100, 100);\n  doc.text('www.costflowai.com', pageWidth - 20, pageHeight - 15, { align: 'right' });\n  doc.text(`Page ${pageNum} of ${totalPages}`, pageWidth / 2, pageHeight - 15, { align: 'center' });\n  \n  // Reset colors\n  doc.setTextColor(0, 0, 0);\n}\n\n/**\n * Generate unique report ID\n */\nfunction generateReportId() {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 8);\n  return `CF-${timestamp}-${randomStr}`.toUpperCase();\n}\n\n/**\n * Escape HTML characters to prevent XSS\n */\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = String(text || '');\n  return div.innerHTML;\n}\n\n/**\n * Fallback PDF export using print\n */\nfunction exportToPrintFallback(data, title) {\n  // Validate data\n  if (!Array.isArray(data) || !data.length) {\n    console.error('No data available for print export');\n    return;\n  }\n\n  const printWindow = window.open('', '_blank');\n  const safeTitle = escapeHtml(title);\n  \n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'unsafe-inline';\">\n      <title>${safeTitle}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        table { border-collapse: collapse; width: 100%; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f5f5f5; font-weight: bold; }\n        h1 { color: #333; border-bottom: 2px solid #1e40af; }\n        .print-header { margin-bottom: 20px; }\n        .print-disclaimer { \n          margin-top: 20px; \n          padding: 10px; \n          border: 1px solid #ccc; \n          font-size: 12px; \n          background-color: #f9f9f9; \n        }\n        .no-print { display: none; }\n        @media print {\n          .no-print { display: none !important; }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"print-header\">\n        <h1>${safeTitle}</h1>\n        <p><strong>CostFlowAI - Professional Construction Cost Analysis</strong></p>\n        <p>Generated: ${escapeHtml(new Date().toLocaleString())}</p>\n        <p>Report ID: ${escapeHtml(generateReportId())}</p>\n      </div>\n      \n      <table>\n        ${data.map(row => `\n          <tr>\n            ${row.map(cell => `<td>${escapeHtml(cell)}</td>`).join('')}\n          </tr>\n        `).join('')}\n      </table>\n      \n      <div class=\"print-disclaimer\">\n        <strong>DISCLAIMER:</strong> This report is for estimation purposes only. Actual costs may vary based on market conditions, \n        regional factors, and project specifications. CostFlowAI is not responsible for cost overruns or project delays.\n      </div>\n      \n      <div class=\"no-print\" style=\"margin-top: 20px;\">\n        <button onclick=\"window.print()\">Print PDF</button>\n        <button onclick=\"window.close()\">Close</button>\n      </div>\n    </body>\n    </html>\n  `;\n\n  printWindow.document.write(htmlContent);\n  printWindow.document.close();\n}\n\nexport function exportToJson(data, filename = 'export.json') {\n  const jsonContent = JSON.stringify(data, null, 2);\n  const blob = new Blob([jsonContent], { type: 'application/json' });\n  downloadFile(blob, filename);\n\n  bus.emit(EVENTS.EXPORT_COMPLETED, { format: 'json', filename });\n\n  // Emit analytics event for JSON export\n  document.dispatchEvent(new CustomEvent('calculator:exported', {\n    detail: {\n      type: 'json',\n      format: 'json',\n      totalCost: typeof data === 'object' ? Object.values(data).reduce((sum, val) => {\n        return sum + (typeof val === 'number' && val > 0 ? val : 0);\n      }, 0) : 0,\n      filename: filename\n    }\n  }));\n}\n\nfunction downloadFile(blob, filename) {\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.style.display = 'none';\n\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n\n  // Clean up the URL object\n  setTimeout(() => URL.revokeObjectURL(url), 100);\n}\n\nexport function printElement(elementId) {\n  const element = document.getElementById(elementId);\n  if (!element) {\n    console.error('Element not found for printing');\n    return;\n  }\n\n  const printWindow = window.open('', '_blank');\n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Print</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f5f5f5; font-weight: bold; }\n        @media print {\n          body { margin: 0; }\n        }\n      </style>\n    </head>\n    <body>\n      ${element.innerHTML}\n      <script>\n        window.onload = function() {\n          window.print();\n          window.close();\n        }\n      </script>\n    </body>\n    </html>\n  `;\n\n  printWindow.document.write(htmlContent);\n  printWindow.document.close();\n}","size_bytes":15077},"assets/js/core/pricing.js":{"content":"// Pricing data loader with regional factor support\n// Loads base pricing and applies regional adjustments\n\nimport { bus, EVENTS } from './bus.js';\n\nclass PricingEngine {\n  constructor() {\n    this.basePricing = null;\n    this.regionalFactors = null;\n    this.currentRegion = 'default';\n    this.isLoaded = false;\n  }\n\n  /**\n   * Initialize pricing engine by loading base data and region\n   * @param {string} region - Region code (e.g., 'us', 'ca')\n   */\n  async init(region = 'us') {\n    try {\n      await this.loadBasePricing();\n      await this.loadRegionalFactors(region);\n      this.currentRegion = region;\n      this.isLoaded = true;\n\n      bus.emit(EVENTS.PRICING_UPDATED, {\n        region: this.currentRegion,\n        loaded: true\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize pricing engine:', error);\n      bus.emit(EVENTS.DATA_ERROR, { type: 'pricing', error: error.message });\n      return false;\n    }\n  }\n\n  /**\n   * Load base pricing data\n   */\n  async loadBasePricing() {\n    const response = await fetch('/assets/data/pricing.base.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load base pricing: ${response.status}`);\n    }\n    this.basePricing = await response.json();\n  }\n\n  /**\n   * Load regional factors\n   * @param {string} region - Region code\n   */\n  async loadRegionalFactors(region) {\n    const response = await fetch(`/assets/data/regions/${region}.json`);\n    if (!response.ok) {\n      throw new Error(`Failed to load regional factors for ${region}: ${response.status}`);\n    }\n    this.regionalFactors = await response.json();\n  }\n\n  /**\n   * Get price for a material/service with regional adjustment\n   * @param {string} category - Material category (e.g., 'concrete', 'rebar')\n   * @param {string} item - Specific item (e.g., 'ready_mix_3000psi')\n   * @param {string} unit - Price unit (e.g., 'per_cubic_yard')\n   * @returns {number} Adjusted price\n   */\n  getPrice(category, item, unit = 'base') {\n    if (!this.isLoaded) {\n      console.warn('Pricing engine not loaded');\n      return 0;\n    }\n\n    const basePrice = this.getBasePrice(category, item, unit);\n    const factor = this.getRegionalFactor(category, item);\n\n    return basePrice * factor;\n  }\n\n  /**\n   * Get base price without regional adjustment\n   */\n  getBasePrice(category, item, unit = 'base') {\n    if (!this.basePricing || !this.basePricing[category]) {\n      console.warn(`Category ${category} not found in pricing`);\n      return 0;\n    }\n\n    const categoryData = this.basePricing[category];\n    const itemData = categoryData[item];\n\n    if (!itemData) {\n      console.warn(`Item ${item} not found in category ${category}`);\n      return 0;\n    }\n\n    // Handle different price structures\n    if (typeof itemData === 'number') {\n      return itemData;\n    }\n\n    if (itemData[unit] !== undefined) {\n      return itemData[unit];\n    }\n\n    if (itemData.price !== undefined) {\n      return itemData.price;\n    }\n\n    console.warn(`Price unit ${unit} not found for ${category}.${item}`);\n    return 0;\n  }\n\n  /**\n   * Get regional factor for adjustment\n   */\n  getRegionalFactor(category, item) {\n    if (!this.regionalFactors) {\n      return 1.0;\n    }\n\n    // Try specific item factor first\n    if (this.regionalFactors[category] && this.regionalFactors[category][item]) {\n      return this.regionalFactors[category][item];\n    }\n\n    // Fall back to category factor\n    if (this.regionalFactors[category] && typeof this.regionalFactors[category] === 'number') {\n      return this.regionalFactors[category];\n    }\n\n    // Fall back to general factor\n    if (this.regionalFactors.general) {\n      return this.regionalFactors.general;\n    }\n\n    return 1.0;\n  }\n\n  /**\n   * Get all available categories\n   */\n  getCategories() {\n    return this.basePricing ? Object.keys(this.basePricing) : [];\n  }\n\n  /**\n   * Get all items in a category\n   */\n  getCategoryItems(category) {\n    if (!this.basePricing || !this.basePricing[category]) {\n      return [];\n    }\n    return Object.keys(this.basePricing[category]);\n  }\n\n  /**\n   * Calculate material cost with quantity\n   * @param {string} category - Material category\n   * @param {string} item - Specific item\n   * @param {number} quantity - Quantity needed\n   * @param {string} unit - Price unit\n   * @returns {object} Cost breakdown\n   */\n  calculateMaterialCost(category, item, quantity, unit = 'base') {\n    const unitPrice = this.getPrice(category, item, unit);\n    const totalCost = unitPrice * quantity;\n    const basePrice = this.getBasePrice(category, item, unit);\n    const factor = this.getRegionalFactor(category, item);\n\n    return {\n      unitPrice,\n      quantity,\n      totalCost,\n      basePrice,\n      regionalFactor: factor,\n      region: this.currentRegion,\n      breakdown: {\n        base: basePrice * quantity,\n        adjustment: (unitPrice - basePrice) * quantity\n      }\n    };\n  }\n\n  /**\n   * Get pricing summary for display\n   */\n  getPricingSummary() {\n    return {\n      region: this.currentRegion,\n      loaded: this.isLoaded,\n      categories: this.getCategories().length,\n      lastUpdated: this.regionalFactors?.last_updated || null\n    };\n  }\n\n  /**\n   * Switch to different region\n   * @param {string} region - New region code\n   */\n  async switchRegion(region) {\n    if (region === this.currentRegion) {\n      return true;\n    }\n\n    try {\n      await this.loadRegionalFactors(region);\n      this.currentRegion = region;\n\n      bus.emit(EVENTS.PRICING_UPDATED, {\n        region: this.currentRegion,\n        loaded: true\n      });\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to region ${region}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current pricing state\n   */\n  getState() {\n    return {\n      region: this.currentRegion,\n      loaded: this.isLoaded,\n      basePricingLoaded: !!this.basePricing,\n      regionalFactorsLoaded: !!this.regionalFactors\n    };\n  }\n}\n\n// Create global pricing engine instance\nexport const pricing = new PricingEngine();\n\n// Export class for custom instances\nexport { PricingEngine };\n\n// Convenience functions for common operations\nexport function getPrice(category, item, unit) {\n  return pricing.getPrice(category, item, unit);\n}\n\nexport function calculateCost(category, item, quantity, unit) {\n  return pricing.calculateMaterialCost(category, item, quantity, unit);\n}\n\nexport async function initPricing(region = 'us') {\n  return await pricing.init(region);\n}\n\n// Material-specific helpers for concrete calculator\nexport function getConcretePricing() {\n  return {\n    readyMix3000: pricing.getPrice('concrete', 'ready_mix_3000psi', 'per_cubic_yard'),\n    readyMix4000: pricing.getPrice('concrete', 'ready_mix_4000psi', 'per_cubic_yard'),\n    fiber: pricing.getPrice('concrete', 'fiber_mesh', 'per_cubic_yard'),\n    delivery: pricing.getPrice('concrete', 'delivery', 'per_load')\n  };\n}\n\nexport function getRebarPricing() {\n  return {\n    grade60_4: pricing.getPrice('rebar', 'grade60_4', 'per_linear_foot'),\n    grade60_5: pricing.getPrice('rebar', 'grade60_5', 'per_linear_foot'),\n    mesh6x6: pricing.getPrice('rebar', 'mesh_6x6', 'per_square_foot'),\n    tieWire: pricing.getPrice('rebar', 'tie_wire', 'per_pound')\n  };\n}\n\nexport function getLaborPricing() {\n  return {\n    excavation: pricing.getPrice('labor', 'excavation', 'per_square_foot'),\n    forming: pricing.getPrice('labor', 'forming', 'per_linear_foot'),\n    placement: pricing.getPrice('labor', 'concrete_placement', 'per_cubic_yard'),\n    finishing: pricing.getPrice('labor', 'finishing', 'per_square_foot')\n  };\n}","size_bytes":7613},"assets/js/core/store.js":{"content":"// State management and persistence utilities\n\nconst STORAGE_PREFIX = 'costflowai_';\n\nexport function saveState(key, state) {\n  try {\n    const fullKey = STORAGE_PREFIX + key;\n    localStorage.setItem(fullKey, JSON.stringify(state));\n    return true;\n  } catch (error) {\n    console.warn('Failed to save state:', error);\n    return false;\n  }\n}\n\nexport function loadState(key) {\n  try {\n    const fullKey = STORAGE_PREFIX + key;\n    const stored = localStorage.getItem(fullKey);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.warn('Failed to load state:', error);\n    return null;\n  }\n}\n\nexport function clearState(key) {\n  try {\n    const fullKey = STORAGE_PREFIX + key;\n    localStorage.removeItem(fullKey);\n    return true;\n  } catch (error) {\n    console.warn('Failed to clear state:', error);\n    return false;\n  }\n}\n\nexport function clearAllStates() {\n  try {\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.startsWith(STORAGE_PREFIX)) {\n        localStorage.removeItem(key);\n      }\n    });\n    return true;\n  } catch (error) {\n    console.warn('Failed to clear all states:', error);\n    return false;\n  }\n}\n\nexport function getStorageSize() {\n  try {\n    let totalSize = 0;\n    const keys = Object.keys(localStorage);\n\n    keys.forEach(key => {\n      if (key.startsWith(STORAGE_PREFIX)) {\n        totalSize += localStorage.getItem(key).length;\n      }\n    });\n\n    return totalSize;\n  } catch (error) {\n    console.warn('Failed to calculate storage size:', error);\n    return 0;\n  }\n}\n\n// Session-only storage (doesn't persist across browser sessions)\nconst sessionStore = new Map();\n\nexport function saveSessionState(key, state) {\n  try {\n    sessionStore.set(key, JSON.parse(JSON.stringify(state))); // Deep clone\n    return true;\n  } catch (error) {\n    console.warn('Failed to save session state:', error);\n    return false;\n  }\n}\n\nexport function loadSessionState(key) {\n  try {\n    return sessionStore.get(key) || null;\n  } catch (error) {\n    console.warn('Failed to load session state:', error);\n    return null;\n  }\n}\n\nexport function clearSessionState(key) {\n  try {\n    sessionStore.delete(key);\n    return true;\n  } catch (error) {\n    console.warn('Failed to clear session state:', error);\n    return false;\n  }\n}","size_bytes":2302},"assets/js/core/ui.js":{"content":"// UI interaction utilities\n// Form binding, results rendering, click-to-calculate\n\nimport { bus, EVENTS } from './bus.js';\nimport { formatCurrency, formatNumber } from './units.js';\nimport { validateForm, setupLiveValidation } from './validate.js';\n\n/**\n * Form binding utilities for calculator forms\n */\nexport class FormBinder {\n  constructor(formElement, calculatorInstance) {\n    this.form = formElement;\n    this.calculator = calculatorInstance;\n    this.calculateButton = null;\n    this.resultsContainer = null;\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialize form binding\n   * @param {object} options - Configuration options\n   */\n  init(options = {}) {\n    const {\n      calculateButtonSelector = '[data-action=\"calculate\"]',\n      resultsSelector = '#results',\n      schema = null,\n      autoCalculate = false\n    } = options;\n\n    this.calculateButton = this.form.querySelector(calculateButtonSelector);\n    this.resultsContainer = document.querySelector(resultsSelector);\n\n    if (!this.calculateButton) {\n      console.warn('Calculate button not found');\n      return false;\n    }\n\n    // Setup validation if schema provided\n    if (schema) {\n      this.setupValidation(schema, autoCalculate);\n    }\n\n    // Bind calculate button\n    this.calculateButton.addEventListener('click', (e) => {\n      e.preventDefault();\n      this.handleCalculate();\n    });\n\n    // Setup form change listeners\n    this.setupFormListeners();\n\n    this.isInitialized = true;\n    bus.emit(EVENTS.FORM_CHANGED, { initialized: true, form: this.form.id });\n\n    // Emit calculator loaded event for analytics\n    const calculatorType = this.form.dataset.calculatorType || 'unknown';\n    const calculatorName = document.title || 'Unknown Calculator';\n    \n    document.dispatchEvent(new CustomEvent('calculator:loaded', {\n      detail: {\n        type: calculatorType,\n        name: calculatorName,\n        form: this.form.id\n      }\n    }));\n\n    return true;\n  }\n\n  /**\n   * Setup form validation\n   */\n  setupValidation(schema, autoCalculate = false) {\n    // Setup live validation\n    setupLiveValidation(this.form, schema, (result) => {\n      this.updateCalculateButton(result.valid);\n\n      if (autoCalculate && result.valid) {\n        this.handleCalculate();\n      }\n    });\n\n    // Initial validation check\n    const initialResult = validateForm(this.form, schema);\n    this.updateCalculateButton(initialResult.valid);\n  }\n\n  /**\n   * Setup form input listeners\n   */\n  setupFormListeners() {\n    const inputs = this.form.querySelectorAll('input, select, textarea');\n\n    inputs.forEach(input => {\n      input.addEventListener('input', () => {\n        bus.emit(EVENTS.FORM_CHANGED, {\n          field: input.name || input.id,\n          value: input.value,\n          form: this.form.id\n        });\n      });\n\n      input.addEventListener('change', () => {\n        bus.emit(EVENTS.FORM_CHANGED, {\n          field: input.name || input.id,\n          value: input.value,\n          form: this.form.id,\n          committed: true\n        });\n      });\n    });\n  }\n\n  /**\n   * Update calculate button state\n   */\n  updateCalculateButton(isValid) {\n    if (this.calculateButton) {\n      this.calculateButton.disabled = !isValid;\n      this.calculateButton.classList.toggle('disabled', !isValid);\n    }\n  }\n\n  /**\n   * Handle calculate button click\n   */\n  async handleCalculate() {\n    if (!this.calculator || typeof this.calculator.calculate !== 'function') {\n      console.error('Calculator instance not properly configured');\n      return;\n    }\n\n    try {\n      // Get form data\n      const formData = this.getFormData();\n\n      // Emit calculation started event\n      bus.emit(EVENTS.CALCULATOR_CALCULATED, { started: true, data: formData });\n\n      // Perform calculation\n      const results = await this.calculator.calculate(formData);\n\n      // Render results\n      if (this.resultsContainer) {\n        this.renderResults(results);\n      }\n\n      // Emit calculation completed event\n      bus.emit(EVENTS.CALCULATOR_CALCULATED, {\n        completed: true,\n        data: formData,\n        results\n      });\n\n      // Emit analytics event for calculator calculation\n      const calculatorType = this.form.dataset.calculatorType || 'unknown';\n      const calculatorName = document.title || 'Unknown Calculator';\n      const totalCost = results.totalCost || results.total || 0;\n      const inputCount = Object.keys(formData).length;\n\n      document.dispatchEvent(new CustomEvent('calculator:calculated', {\n        detail: {\n          type: calculatorType,\n          name: calculatorName,\n          inputCount: inputCount,\n          totalCost: totalCost,\n          results: results\n        }\n      }));\n\n    } catch (error) {\n      console.error('Calculation error:', error);\n      this.showError(error.message);\n\n      bus.emit(EVENTS.CALCULATOR_CALCULATED, {\n        error: true,\n        message: error.message\n      });\n    }\n  }\n\n  /**\n   * Get form data as object\n   */\n  getFormData() {\n    const formData = new FormData(this.form);\n    const data = {};\n\n    // Convert FormData to plain object\n    for (const [key, value] of formData.entries()) {\n      data[key] = value;\n    }\n\n    // Include non-form elements\n    const inputs = this.form.querySelectorAll('input, select, textarea');\n    inputs.forEach(input => {\n      const key = input.name || input.id;\n      if (key && !data.hasOwnProperty(key)) {\n        data[key] = input.value;\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Render calculation results\n   */\n  renderResults(results) {\n    if (!this.resultsContainer) return;\n\n    const html = this.buildResultsHTML(results);\n    this.resultsContainer.innerHTML = html;\n    this.resultsContainer.classList.add('visible');\n\n    bus.emit(EVENTS.RESULTS_UPDATED, { results });\n  }\n\n  /**\n   * Build results HTML\n   */\n  buildResultsHTML(results) {\n    const sections = [];\n\n    // Main calculations\n    if (results.calculations) {\n      sections.push(`\n        <div class=\"results-section\">\n          <h3>Calculations</h3>\n          <div class=\"calculation-grid\">\n            ${this.buildCalculationItems(results.calculations)}\n          </div>\n        </div>\n      `);\n    }\n\n    // Materials breakdown\n    if (results.materials) {\n      sections.push(`\n        <div class=\"results-section\">\n          <h3>Materials</h3>\n          <div class=\"materials-list\">\n            ${this.buildMaterialsList(results.materials)}\n          </div>\n        </div>\n      `);\n    }\n\n    // Cost breakdown\n    if (results.costs) {\n      sections.push(`\n        <div class=\"results-section\">\n          <h3>Cost Breakdown</h3>\n          <div class=\"cost-breakdown\">\n            ${this.buildCostBreakdown(results.costs)}\n          </div>\n        </div>\n      `);\n    }\n\n    // Export actions\n    sections.push(`\n      <div class=\"results-section\">\n        <h3>Export Results</h3>\n        <div class=\"export-actions\">\n          <button data-action=\"export\" data-format=\"csv\" class=\"btn-secondary\">CSV</button>\n          <button data-action=\"export\" data-format=\"xlsx\" class=\"btn-secondary\">Excel</button>\n          <button data-action=\"export\" data-format=\"pdf\" class=\"btn-secondary\">PDF</button>\n          <button data-action=\"print\" class=\"btn-secondary\">Print</button>\n          <button data-action=\"save\" class=\"btn-secondary\">Save</button>\n          <button data-action=\"email\" class=\"btn-secondary\">Email</button>\n        </div>\n      </div>\n    `);\n\n    return sections.join('');\n  }\n\n  /**\n   * Build calculation items\n   */\n  buildCalculationItems(calculations) {\n    return Object.entries(calculations).map(([key, value]) => {\n      const label = this.formatLabel(key);\n      const formattedValue = this.formatValue(value);\n\n      return `\n        <div class=\"calculation-item\">\n          <span class=\"calculation-label\">${label}</span>\n          <span class=\"calculation-value\">${formattedValue}</span>\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Build materials list\n   */\n  buildMaterialsList(materials) {\n    return materials.map(material => `\n      <div class=\"material-item\">\n        <span class=\"material-name\">${material.name}</span>\n        <span class=\"material-quantity\">${this.formatValue(material.quantity)}</span>\n        <span class=\"material-unit\">${material.unit}</span>\n        <span class=\"material-cost\">${formatCurrency(material.cost)}</span>\n      </div>\n    `).join('');\n  }\n\n  /**\n   * Build cost breakdown\n   */\n  buildCostBreakdown(costs) {\n    const items = costs.items || [];\n    const total = costs.total || 0;\n\n    const itemsHTML = items.map(item => `\n      <div class=\"cost-item\">\n        <span class=\"cost-label\">${item.label}</span>\n        <span class=\"cost-amount\">${formatCurrency(item.amount)}</span>\n      </div>\n    `).join('');\n\n    return `\n      ${itemsHTML}\n      <div class=\"cost-total\">\n        <span class=\"cost-label\"><strong>Total</strong></span>\n        <span class=\"cost-amount\"><strong>${formatCurrency(total)}</strong></span>\n      </div>\n    `;\n  }\n\n  /**\n   * Format label for display\n   */\n  formatLabel(key) {\n    return key\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, str => str.toUpperCase())\n      .trim();\n  }\n\n  /**\n   * Format value for display\n   */\n  formatValue(value) {\n    if (typeof value === 'number') {\n      if (value % 1 === 0) {\n        return formatNumber(value, 0);\n      }\n      return formatNumber(value, 2);\n    }\n    return String(value);\n  }\n\n  /**\n   * Show error message\n   */\n  showError(message) {\n    if (this.resultsContainer) {\n      this.resultsContainer.innerHTML = `\n        <div class=\"error-message\">\n          <h3>Calculation Error</h3>\n          <p>${message}</p>\n        </div>\n      `;\n      this.resultsContainer.classList.add('visible');\n    }\n  }\n}\n\n/**\n * Setup export handlers for results\n */\nexport function setupExportHandlers(calculator) {\n  document.addEventListener('click', (e) => {\n    const target = e.target;\n\n    if (target.dataset.action === 'export') {\n      e.preventDefault();\n      const format = target.dataset.format;\n      handleExport(calculator, format);\n    }\n\n    if (target.dataset.action === 'print') {\n      e.preventDefault();\n      handlePrint();\n    }\n\n    if (target.dataset.action === 'save') {\n      e.preventDefault();\n      handleSave(calculator);\n    }\n\n    if (target.dataset.action === 'email') {\n      e.preventDefault();\n      handleEmail(calculator);\n    }\n  });\n}\n\n/**\n * Handle export action\n */\nasync function handleExport(calculator, format) {\n  if (!calculator || !calculator.getExportData) {\n    console.error('Calculator does not support export');\n    return;\n  }\n\n  try {\n    bus.emit(EVENTS.EXPORT_STARTED, { format });\n\n    const exportData = calculator.getExportData();\n\n    // Dynamic import of export functions\n    const { exportToCsv, exportToXlsx, exportToPdf } = await import('./export.js');\n\n    switch (format) {\n      case 'csv':\n        exportToCsv(exportData.table, `${calculator.name || 'calculation'}.csv`);\n        break;\n      case 'xlsx':\n        exportToXlsx(exportData.table, `${calculator.name || 'calculation'}.xlsx`);\n        break;\n      case 'pdf':\n        exportToPdf(exportData.table, exportData.title, `${calculator.name || 'calculation'}.pdf`);\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n\n    bus.emit(EVENTS.EXPORT_COMPLETED, { format });\n\n  } catch (error) {\n    console.error('Export error:', error);\n    bus.emit(EVENTS.EXPORT_ERROR, { format, error: error.message });\n  }\n}\n\n/**\n * Handle print action\n */\nasync function handlePrint() {\n  const resultsContainer = document.getElementById('results');\n  if (resultsContainer) {\n    const { printElement } = await import('./export.js');\n    printElement('results');\n  }\n}\n\n/**\n * Handle save action\n */\nasync function handleSave(calculator) {\n  if (!calculator || !calculator.getState) {\n    console.error('Calculator does not support state saving');\n    return;\n  }\n\n  const { saveState } = await import('./store.js');\n  const state = calculator.getState();\n  const saved = saveState(calculator.name || 'calculation', state);\n\n  if (saved) {\n    showNotification('Calculation saved successfully');\n  } else {\n    showNotification('Failed to save calculation', 'error');\n  }\n}\n\n/**\n * Handle email action\n */\nfunction handleEmail(calculator) {\n  if (!calculator || !calculator.getEmailData) {\n    console.error('Calculator does not support email');\n    return;\n  }\n\n  const emailData = calculator.getEmailData();\n  const mailtoLink = `mailto:?subject=${encodeURIComponent(emailData.subject)}&body=${encodeURIComponent(emailData.body)}`;\n  window.location.href = mailtoLink;\n}\n\n/**\n * Show notification\n */\nexport function showNotification(message, type = 'success', duration = 3000) {\n  const notification = document.createElement('div');\n  notification.className = `notification notification-${type}`;\n  notification.textContent = message;\n\n  document.body.appendChild(notification);\n\n  // Trigger animation\n  setTimeout(() => notification.classList.add('visible'), 10);\n\n  // Auto remove\n  setTimeout(() => {\n    notification.classList.remove('visible');\n    setTimeout(() => document.body.removeChild(notification), 300);\n  }, duration);\n}\n\n/**\n * Initialize UI components\n */\nexport function initUI() {\n  // Setup global UI event listeners\n  setupGlobalEventListeners();\n\n  // Setup responsive handlers\n  setupResponsiveHandlers();\n\n  bus.emit(EVENTS.CALCULATOR_LOADED, { ui: true });\n}\n\n/**\n * Setup global event listeners\n */\nfunction setupGlobalEventListeners() {\n  // Handle data-action clicks globally\n  document.addEventListener('click', (e) => {\n    const target = e.target.closest('[data-action]');\n    if (!target) return;\n\n    const action = target.dataset.action;\n\n    switch (action) {\n      case 'calculate':\n        // Handled by FormBinder\n        break;\n      case 'reset':\n        handleReset(target);\n        break;\n      case 'toggle':\n        handleToggle(target);\n        break;\n    }\n  });\n}\n\n/**\n * Setup responsive handlers\n */\nfunction setupResponsiveHandlers() {\n  // Mobile menu handling, responsive table handling, etc.\n  const mediaQuery = window.matchMedia('(max-width: 768px)');\n\n  function handleMobileChange(e) {\n    document.body.classList.toggle('mobile-view', e.matches);\n  }\n\n  mediaQuery.addListener(handleMobileChange);\n  handleMobileChange(mediaQuery);\n}\n\n/**\n * Handle reset action\n */\nasync function handleReset(element) {\n  const form = element.closest('form');\n  if (form) {\n    form.reset();\n\n    // Clear validation errors\n    const { clearValidationErrors } = await import('./validate.js');\n    clearValidationErrors(form);\n\n    // Clear results\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer) {\n      resultsContainer.innerHTML = '';\n      resultsContainer.classList.remove('visible');\n    }\n\n    bus.emit(EVENTS.CALCULATOR_RESET, { form: form.id });\n  }\n}\n\n/**\n * Handle toggle action\n */\nfunction handleToggle(element) {\n  const target = element.dataset.target;\n  if (target) {\n    const targetElement = document.querySelector(target);\n    if (targetElement) {\n      targetElement.classList.toggle('visible');\n      element.classList.toggle('active');\n    }\n  }\n}\n\n/**\n * Boot calculator - Initialize calculator app on dedicated pages\n * @param {string} calculatorId - Calculator ID\n * @param {object} calculatorModule - Calculator module with meta, compute, etc.\n */\nexport async function bootCalculator(calculatorId, calculatorModule) {\n  try {\n    // Remove loading indicator\n    const loadingDiv = document.getElementById('calculator-loading');\n    if (loadingDiv) {\n      loadingDiv.remove();\n    }\n\n    // Get calculator metadata\n    const meta = calculatorModule.meta();\n\n    // Update page title\n    document.title = `${meta.name} - CostFlowAI`;\n\n    // Create calculator UI\n    const app = document.getElementById('app');\n    if (!app) {\n      throw new Error('App container not found');\n    }\n\n    // Build calculator HTML\n    const calculatorHTML = `\n      <div class=\"calculator-container\">\n        <header class=\"calculator-header\">\n          <h1>${meta.name}</h1>\n          <p class=\"calculator-description\">${meta.description}</p>\n        </header>\n\n        <div class=\"calculator-content\">\n          <form id=\"calculator-form\" class=\"calculator-form\">\n            <div id=\"form-inputs\">\n              <!-- Form inputs will be populated by calculator module -->\n            </div>\n            <div class=\"form-actions\">\n              <button type=\"button\" data-action=\"calculate\" class=\"btn-primary\" id=\"calculate-btn\">\n                Calculate\n              </button>\n              <button type=\"button\" data-action=\"reset\" class=\"btn-secondary\">\n                Reset\n              </button>\n            </div>\n          </form>\n\n          <div id=\"results\" class=\"results-container\">\n            <!-- Results will be populated after calculation -->\n          </div>\n        </div>\n      </div>\n    `;\n\n    app.innerHTML = calculatorHTML;\n\n    // Initialize the calculator if it has an init method\n    if (typeof calculatorModule.init === 'function') {\n      await calculatorModule.init();\n    }\n\n    // Setup form binding\n    const form = document.getElementById('calculator-form');\n    const formBinder = new FormBinder(form, calculatorModule);\n\n    // Initialize form with calculator schema if available\n    if (typeof calculatorModule.getSchema === 'function') {\n      const schema = calculatorModule.getSchema();\n      formBinder.init({ schema });\n    } else {\n      formBinder.init();\n    }\n\n    // Setup export handlers\n    setupExportHandlers(calculatorModule);\n\n    console.log(`Calculator ${calculatorId} booted successfully`);\n\n  } catch (error) {\n    console.error(`Failed to boot calculator ${calculatorId}:`, error);\n\n    // Show error message\n    const app = document.getElementById('app');\n    if (app) {\n      app.innerHTML = `\n        <div class=\"error-container\">\n          <h1>Calculator Error</h1>\n          <p>Failed to load the ${calculatorId} calculator.</p>\n          <p class=\"error-details\">${error.message}</p>\n          <a href=\"/calculators/\" class=\"btn-primary\">Back to Calculators</a>\n        </div>\n      `;\n    }\n  }\n}","size_bytes":18278},"assets/js/core/units.js":{"content":"// Unit conversion and formatting utilities\n// Comprehensive unit system for construction calculations\n\n// ============= FORMATTING UTILITIES =============\n\nexport function formatCurrency(amount, precision = 2) {\n  if (amount === null || amount === undefined || isNaN(amount)) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: precision,\n    maximumFractionDigits: precision\n  }).format(amount);\n}\n\nexport function formatNumber(num, precision = 1) {\n  if (num === null || num === undefined || isNaN(num)) return '0';\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: precision\n  }).format(num);\n}\n\nexport function formatPercent(num, precision = 1) {\n  if (num === null || num === undefined || isNaN(num)) return '0%';\n  return new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: precision,\n    maximumFractionDigits: precision\n  }).format(num / 100);\n}\n\n// ============= ROUNDING UTILITIES =============\n\nexport function roundToDecimal(num, places = 2) {\n  const factor = Math.pow(10, places);\n  return Math.round(num * factor) / factor;\n}\n\nexport function roundUpToDecimal(num, places = 2) {\n  const factor = Math.pow(10, places);\n  return Math.ceil(num * factor) / factor;\n}\n\nexport function roundToNearest(num, increment = 1) {\n  return Math.round(num / increment) * increment;\n}\n\n// Common construction rounding\nexport function roundToNearestHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n\nexport function roundToNearestQuarter(num) {\n  return Math.round(num * 4) / 4;\n}\n\nexport function roundToNearestEighth(num) {\n  return Math.round(num * 8) / 8;\n}\n\n// ============= LENGTH CONVERSIONS =============\n\nexport function feetToInches(feet) {\n  return feet * 12;\n}\n\nexport function inchesToFeet(inches) {\n  return inches / 12;\n}\n\nexport function feetToMeters(feet) {\n  return feet * 0.3048;\n}\n\nexport function metersToFeet(meters) {\n  return meters / 0.3048;\n}\n\nexport function feetToYards(feet) {\n  return feet / 3;\n}\n\nexport function yardsToFeet(yards) {\n  return yards * 3;\n}\n\nexport function inchesToMeters(inches) {\n  return inches * 0.0254;\n}\n\nexport function metersToInches(meters) {\n  return meters / 0.0254;\n}\n\n// ============= AREA CONVERSIONS =============\n\nexport function sqftToSqyd(sqft) {\n  return sqft / 9;\n}\n\nexport function sqydToSqft(sqyd) {\n  return sqyd * 9;\n}\n\nexport function sqftToSqm(sqft) {\n  return sqft * 0.092903;\n}\n\nexport function sqmToSqft(sqm) {\n  return sqm / 0.092903;\n}\n\nexport function sqinToSqft(sqin) {\n  return sqin / 144;\n}\n\nexport function sqftToSqin(sqft) {\n  return sqft * 144;\n}\n\n// ============= VOLUME CONVERSIONS =============\n\nexport function cubicFeetToYards(cubicFeet) {\n  return cubicFeet / 27;\n}\n\nexport function cubicYardsToFeet(cubicYards) {\n  return cubicYards * 27;\n}\n\nexport function cubicFeetToMeters(cubicFeet) {\n  return cubicFeet * 0.0283168;\n}\n\nexport function cubicMetersToFeet(cubicMeters) {\n  return cubicMeters / 0.0283168;\n}\n\nexport function gallonsToLiters(gallons) {\n  return gallons * 3.78541;\n}\n\nexport function litersToGallons(liters) {\n  return liters / 3.78541;\n}\n\nexport function cubicInchesToFeet(cubicInches) {\n  return cubicInches / 1728;\n}\n\nexport function cubicFeetToInches(cubicFeet) {\n  return cubicFeet * 1728;\n}\n\n// ============= WEIGHT CONVERSIONS =============\n\nexport function poundsToKilograms(pounds) {\n  return pounds * 0.453592;\n}\n\nexport function kilogramsToPounds(kilograms) {\n  return kilograms / 0.453592;\n}\n\nexport function tonsToLbs(tons) {\n  return tons * 2000;\n}\n\nexport function lbsToTons(lbs) {\n  return lbs / 2000;\n}\n\n// ============= CONSTRUCTION HELPERS =============\n\n/**\n * Calculate area from length and width\n */\nexport function calculateArea(length, width) {\n  return length * width;\n}\n\n/**\n * Calculate volume from length, width, and height/thickness\n */\nexport function calculateVolume(length, width, height) {\n  return length * width * height;\n}\n\n/**\n * Calculate concrete volume in cubic yards from dimensions in feet/inches\n */\nexport function calculateConcreteVolume(lengthFt, widthFt, thicknessIn) {\n  const thicknessFt = inchesToFeet(thicknessIn);\n  const volumeCuFt = calculateVolume(lengthFt, widthFt, thicknessFt);\n  return cubicFeetToYards(volumeCuFt);\n}\n\n/**\n * Add waste factor to quantity\n */\nexport function addWaste(quantity, wastePercent) {\n  return quantity * (1 + wastePercent / 100);\n}\n\n/**\n * Calculate perimeter\n */\nexport function calculatePerimeter(length, width) {\n  return 2 * (length + width);\n}\n\n/**\n * Convert decimal feet to feet and inches\n */\nexport function decimalFeetToFeetInches(decimalFeet) {\n  const feet = Math.floor(decimalFeet);\n  const inches = roundToNearestEighth((decimalFeet - feet) * 12);\n  return { feet, inches };\n}\n\n/**\n * Convert feet and inches to decimal feet\n */\nexport function feetInchesToDecimalFeet(feet, inches) {\n  return feet + (inches / 12);\n}\n\n/**\n * Parse common construction measurements\n */\nexport function parseMeasurement(input) {\n  if (typeof input === 'number') return input;\n\n  const str = input.toString().trim();\n\n  // Handle formats like \"10'6\\\"\", \"10' 6\\\"\", \"10ft 6in\"\n  const feetInchesRegex = /(\\d+(?:\\.\\d+)?)'?\\s*(\\d+(?:\\.\\d+)?)\"?/;\n  const match = str.match(feetInchesRegex);\n\n  if (match) {\n    const feet = parseFloat(match[1]);\n    const inches = parseFloat(match[2]);\n    return feetInchesToDecimalFeet(feet, inches);\n  }\n\n  // Handle simple decimal\n  const decimal = parseFloat(str);\n  return isNaN(decimal) ? 0 : decimal;\n}\n\n// ============= UNIT CONSTANTS =============\n\nexport const UNITS = {\n  LENGTH: {\n    INCHES: 'in',\n    FEET: 'ft',\n    YARDS: 'yd',\n    METERS: 'm'\n  },\n  AREA: {\n    SQUARE_INCHES: 'sq in',\n    SQUARE_FEET: 'sq ft',\n    SQUARE_YARDS: 'sq yd',\n    SQUARE_METERS: 'sq m'\n  },\n  VOLUME: {\n    CUBIC_INCHES: 'cu in',\n    CUBIC_FEET: 'cu ft',\n    CUBIC_YARDS: 'cu yd',\n    CUBIC_METERS: 'cu m',\n    GALLONS: 'gal',\n    LITERS: 'L'\n  },\n  WEIGHT: {\n    POUNDS: 'lbs',\n    TONS: 'tons',\n    KILOGRAMS: 'kg'\n  }\n};\n\n// ============= VALIDATION HELPERS =============\n\nexport function isValidMeasurement(value) {\n  if (typeof value === 'number') return !isNaN(value) && value >= 0;\n  if (typeof value === 'string') {\n    const parsed = parseMeasurement(value);\n    return !isNaN(parsed) && parsed >= 0;\n  }\n  return false;\n}","size_bytes":6398},"assets/js/core/validate.js":{"content":"// Input validation utilities with schema support and inline error display\nimport { parseMeasurement, isValidMeasurement } from './units.js';\nimport { bus, EVENTS } from './bus.js';\n\n// ============= VALIDATION SCHEMA SYSTEM =============\n\n/**\n * Validate data against a schema\n * @param {object} data - Data to validate\n * @param {object} schema - Validation schema\n * @returns {object} Validation result with errors\n */\nexport function validateSchema(data, schema) {\n  const errors = {};\n  let isValid = true;\n\n  for (const [field, rules] of Object.entries(schema)) {\n    const value = data[field];\n    const fieldResult = validateField(value, rules, field);\n\n    if (!fieldResult.valid) {\n      errors[field] = fieldResult.message;\n      isValid = false;\n    }\n  }\n\n  return { valid: isValid, errors, data };\n}\n\n/**\n * Validate a single field against rules\n */\nexport function validateField(value, rules, fieldName = '') {\n  for (const rule of rules) {\n    const result = applyValidationRule(value, rule, fieldName);\n    if (!result.valid) {\n      return result;\n    }\n  }\n  return { valid: true, value };\n}\n\n/**\n * Apply a single validation rule\n */\nfunction applyValidationRule(value, rule, fieldName) {\n  const { type, ...options } = rule;\n\n  switch (type) {\n    case 'required':\n      return validateRequired(value, options);\n    case 'number':\n      return validateNumber(value, options);\n    case 'measurement':\n      return validateMeasurement(value, options);\n    case 'text':\n      return validateText(value, options);\n    case 'email':\n      return validateEmail(value, options);\n    case 'select':\n      return validateSelect(value, options);\n    case 'custom':\n      return options.validator(value, options);\n    default:\n      return { valid: true, value };\n  }\n}\n\n// ============= CORE VALIDATION FUNCTIONS =============\n\nexport function validateInput(value, type = 'text', options = {}) {\n  if (value === null || value === undefined) {\n    return { valid: false, message: 'Value is required' };\n  }\n\n  switch (type) {\n    case 'number':\n      return validateNumber(value, options);\n    case 'measurement':\n      return validateMeasurement(value, options);\n    case 'email':\n      return validateEmail(value);\n    case 'phone':\n      return validatePhone(value);\n    case 'text':\n      return validateText(value, options);\n    case 'select':\n      return validateSelect(value, options);\n    default:\n      return { valid: true };\n  }\n}\n\nexport function validateNumber(value, options = {}) {\n  const {\n    min = Number.NEGATIVE_INFINITY,\n    max = Number.POSITIVE_INFINITY,\n    required = false,\n    allowDecimal = true,\n    message = null\n  } = options;\n\n  if (value === '' || value === null || value === undefined) {\n    return required\n      ? { valid: false, message: message || 'Number is required' }\n      : { valid: true };\n  }\n\n  const num = parseFloat(value);\n\n  if (isNaN(num)) {\n    return { valid: false, message: message || 'Must be a valid number' };\n  }\n\n  if (!allowDecimal && num % 1 !== 0) {\n    return { valid: false, message: message || 'Must be a whole number' };\n  }\n\n  if (num < min) {\n    return { valid: false, message: message || `Must be at least ${min}` };\n  }\n\n  if (num > max) {\n    return { valid: false, message: message || `Must be no more than ${max}` };\n  }\n\n  return { valid: true, value: num };\n}\n\nexport function validateMeasurement(value, options = {}) {\n  const {\n    min = 0,\n    max = Number.POSITIVE_INFINITY,\n    required = false,\n    units = 'ft',\n    message = null\n  } = options;\n\n  if (value === '' || value === null || value === undefined) {\n    return required\n      ? { valid: false, message: message || `Measurement is required` }\n      : { valid: true };\n  }\n\n  if (!isValidMeasurement(value)) {\n    return { valid: false, message: message || `Invalid measurement format` };\n  }\n\n  const parsed = parseMeasurement(value);\n\n  if (parsed < min) {\n    return { valid: false, message: message || `Must be at least ${min} ${units}` };\n  }\n\n  if (parsed > max) {\n    return { valid: false, message: message || `Must be no more than ${max} ${units}` };\n  }\n\n  return { valid: true, value: parsed };\n}\n\nexport function validateText(value, options = {}) {\n  const {\n    minLength = 0,\n    maxLength = Number.POSITIVE_INFINITY,\n    required = false,\n    pattern = null,\n    message = null\n  } = options;\n\n  if (value === '' || value === null || value === undefined) {\n    return required\n      ? { valid: false, message: message || 'Text is required' }\n      : { valid: true };\n  }\n\n  if (value.length < minLength) {\n    return { valid: false, message: message || `Must be at least ${minLength} characters` };\n  }\n\n  if (value.length > maxLength) {\n    return { valid: false, message: message || `Must be no more than ${maxLength} characters` };\n  }\n\n  if (pattern && !pattern.test(value)) {\n    return { valid: false, message: message || 'Invalid format' };\n  }\n\n  return { valid: true, value };\n}\n\nexport function validateSelect(value, options = {}) {\n  const { choices = [], required = false, message = null } = options;\n\n  if (value === '' || value === null || value === undefined) {\n    return required\n      ? { valid: false, message: message || 'Selection is required' }\n      : { valid: true };\n  }\n\n  if (choices.length > 0 && !choices.includes(value)) {\n    return { valid: false, message: message || 'Invalid selection' };\n  }\n\n  return { valid: true, value };\n}\n\nexport function validateEmail(value, options = {}) {\n  const { required = false, message = null } = options;\n\n  if (!value) {\n    return required\n      ? { valid: false, message: message || 'Email is required' }\n      : { valid: true };\n  }\n\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  if (!emailPattern.test(value)) {\n    return { valid: false, message: message || 'Invalid email format' };\n  }\n\n  return { valid: true, value };\n}\n\nexport function validatePhone(value, options = {}) {\n  const { required = false, message = null } = options;\n\n  if (!value) {\n    return required\n      ? { valid: false, message: message || 'Phone number is required' }\n      : { valid: true };\n  }\n\n  // Remove all non-digit characters\n  const cleaned = value.replace(/\\D/g, '');\n\n  if (cleaned.length !== 10) {\n    return { valid: false, message: message || 'Phone must be 10 digits' };\n  }\n\n  return { valid: true, value: cleaned };\n}\n\nexport function validateRequired(value, options = {}) {\n  const { message = null } = options;\n\n  if (value === '' || value === null || value === undefined) {\n    return { valid: false, message: message || 'This field is required' };\n  }\n  return { valid: true };\n}\n\nexport function validateRange(value, min, max, options = {}) {\n  const { message = null } = options;\n  const num = parseFloat(value);\n\n  if (isNaN(num)) {\n    return { valid: false, message: message || 'Must be a number' };\n  }\n\n  if (num < min || num > max) {\n    return { valid: false, message: message || `Must be between ${min} and ${max}` };\n  }\n\n  return { valid: true, value: num };\n}\n\n// ============= FORM VALIDATION UTILITIES =============\n\n/**\n * Validate form inputs and display inline errors\n * @param {HTMLFormElement|HTMLElement} form - Form element\n * @param {object} schema - Validation schema\n * @returns {object} Validation result\n */\nexport function validateForm(form, schema) {\n  const formData = new FormData(form);\n  const data = Object.fromEntries(formData.entries());\n\n  // Add non-form data (like from input elements)\n  const inputs = form.querySelectorAll('input, select, textarea');\n  inputs.forEach(input => {\n    if (input.name) {\n      data[input.name] = input.value;\n    } else if (input.id) {\n      data[input.id] = input.value;\n    }\n  });\n\n  const result = validateSchema(data, schema);\n\n  // Display inline errors\n  displayValidationErrors(form, result.errors);\n\n  // Emit validation event\n  bus.emit(EVENTS.FORM_VALIDATED, { valid: result.valid, errors: result.errors, data: result.data });\n\n  return result;\n}\n\n/**\n * Display validation errors inline\n */\nexport function displayValidationErrors(container, errors) {\n  // Clear existing errors\n  clearValidationErrors(container);\n\n  // Display new errors\n  for (const [field, message] of Object.entries(errors)) {\n    const input = container.querySelector(`#${field}, [name=\"${field}\"]`);\n    if (input) {\n      showFieldError(input, message);\n    }\n  }\n}\n\n/**\n * Clear all validation errors\n */\nexport function clearValidationErrors(container) {\n  const errorElements = container.querySelectorAll('.validation-error');\n  errorElements.forEach(el => el.remove());\n\n  const inputsWithErrors = container.querySelectorAll('.input-error');\n  inputsWithErrors.forEach(input => {\n    input.classList.remove('input-error');\n  });\n}\n\n/**\n * Show error for a specific field\n */\nexport function showFieldError(input, message) {\n  input.classList.add('input-error');\n\n  const errorElement = document.createElement('div');\n  errorElement.className = 'validation-error';\n  errorElement.textContent = message;\n\n  // Insert error message after the input\n  input.parentNode.insertBefore(errorElement, input.nextSibling);\n}\n\n/**\n * Clear error for a specific field\n */\nexport function clearFieldError(input) {\n  input.classList.remove('input-error');\n\n  const errorElement = input.parentNode.querySelector('.validation-error');\n  if (errorElement) {\n    errorElement.remove();\n  }\n}\n\n// ============= LIVE VALIDATION =============\n\n/**\n * Setup live validation for a form\n * @param {HTMLElement} form - Form element\n * @param {object} schema - Validation schema\n * @param {function} callback - Callback when validation changes\n */\nexport function setupLiveValidation(form, schema, callback = null) {\n  const inputs = form.querySelectorAll('input, select, textarea');\n\n  inputs.forEach(input => {\n    const fieldName = input.name || input.id;\n    const fieldRules = schema[fieldName];\n\n    if (fieldRules) {\n      // Validate on blur\n      input.addEventListener('blur', () => {\n        const result = validateField(input.value, fieldRules, fieldName);\n        if (result.valid) {\n          clearFieldError(input);\n        } else {\n          showFieldError(input, result.message);\n        }\n\n        if (callback) {\n          const formResult = validateForm(form, schema);\n          callback(formResult);\n        }\n      });\n\n      // Clear errors on input\n      input.addEventListener('input', () => {\n        if (input.classList.contains('input-error')) {\n          clearFieldError(input);\n        }\n\n        if (callback) {\n          // Debounce validation\n          clearTimeout(input._validationTimeout);\n          input._validationTimeout = setTimeout(() => {\n            const formResult = validateForm(form, schema);\n            callback(formResult);\n          }, 300);\n        }\n      });\n    }\n  });\n}\n\n// ============= COMMON VALIDATION SCHEMAS =============\n\nexport const COMMON_SCHEMAS = {\n  CONCRETE_SLAB: {\n    length: [\n      { type: 'required' },\n      { type: 'measurement', min: 0.1, max: 1000, units: 'ft' }\n    ],\n    width: [\n      { type: 'required' },\n      { type: 'measurement', min: 0.1, max: 1000, units: 'ft' }\n    ],\n    thickness: [\n      { type: 'required' },\n      { type: 'number', min: 0.5, max: 24, units: 'in' }\n    ],\n    waste: [\n      { type: 'number', min: 0, max: 50, message: 'Waste must be between 0-50%' }\n    ],\n    rebarGrid: [\n      { type: 'select', choices: ['12', '18', '24'] }\n    ]\n  }\n};","size_bytes":11443},"content/posts/drywall-estimation-guide.md":{"content":"---\ntitle: Complete Drywall Estimation Guide - Materials, Labor, and Cost Calculations\nslug: drywall-estimation-guide\ndate: 2024-01-20\ntags: [drywall, estimation, interior, calculators]\ndescription: Master drywall estimation with our comprehensive guide covering sheet calculations, fasteners, joint compound, labor costs, and regional pricing factors.\n---\n\n# Complete Drywall Estimation Guide\n\nAccurate drywall estimation is essential for interior construction projects. Whether you're finishing a residential basement or a commercial office build-out, understanding how to calculate materials and labor costs ensures profitable projects and satisfied clients.\n\n## Understanding Drywall Sheet Calculations\n\n### Basic Area Calculation\nThe foundation of drywall estimation starts with accurate area calculations:\n\n```\nTotal Area = Wall Area + Ceiling Area - Openings\n```\n\n**Wall Area Formula:**\n```\nWall Area = Perimeter × Height\n```\n\n**Key Considerations:**\n- Always round up to the nearest whole sheet\n- Account for waste factor (typically 10-15%)\n- Consider sheet orientation (vertical vs horizontal hanging)\n- Factor in inside and outside corners\n\n### Sheet Size Selection\n\n**Standard Drywall Sizes:**\n- **4' × 8'** (32 sq ft): Standard residential, easy handling\n- **4' × 10'** (40 sq ft): Reduces joints, common in construction\n- **4' × 12'** (48 sq ft): Fewer joints, requires more labor to handle\n- **4' × 16'** (64 sq ft): Commercial applications, minimal joints\n\n**Thickness Selection:**\n- **1/4\"**: Curved surfaces, repair work\n- **3/8\"**: Existing wall overlay, curved applications\n- **1/2\"**: Standard residential walls and ceilings\n- **5/8\"**: Fire-rated assemblies, sound control, commercial\n\n### Waste Factor Calculations\n\n**Typical Waste Factors:**\n- **Simple rectangular rooms**: 10%\n- **Complex layouts with openings**: 15%\n- **Irregular shapes and angles**: 20%\n- **Curved or specialty areas**: 25%\n\n**Example Calculation:**\nRoom: 12' × 14' with 9' ceilings\n- Wall area: (12 + 14 + 12 + 14) × 9 = 468 sq ft\n- Less door (21 sq ft) and windows (24 sq ft) = 423 sq ft\n- Ceiling area: 12 × 14 = 168 sq ft\n- Total area: 423 + 168 = 591 sq ft\n- With 15% waste: 591 × 1.15 = 680 sq ft\n- Using 4' × 8' sheets: 680 ÷ 32 = 21.25 = 22 sheets\n\n## Fastener Requirements\n\n### Screw Calculations\n\n**Screw Spacing Standards:**\n- **Walls**: 16\" on center on studs, 12\" on edges\n- **Ceilings**: 12\" on center on joists, 8\" on edges\n- **Fire-rated assemblies**: 8\" on center throughout\n\n**Calculation Formula:**\n```\nScrews per sheet = (Sheet perimeter ÷ edge spacing) + (Field screws based on stud/joist spacing)\n```\n\n**Example for 4' × 8' Sheet:**\n- Edge screws (8\" spacing): 24 screws\n- Field screws (16\" spacing, 16\" OC studs): 14 screws\n- Total per sheet: 38 screws\n\n### Adhesive Requirements\n\n**Construction Adhesive:**\n- **Standard application**: 1 tube per 50 sq ft\n- **Heavy-duty bonding**: 1 tube per 40 sq ft\n- **Subfloor applications**: 1 tube per 30 sq ft\n\n## Joint Compound and Tape Calculations\n\n### Tape Requirements\n\n**Joint Tape Types:**\n- **Paper tape**: Strongest joints, requires embedding compound\n- **Mesh tape**: Self-adhesive, faster application\n- **Metal corner bead**: Outside corners, high-traffic areas\n\n**Calculation Method:**\n```\nLinear feet of joints = Sheet edges that meet + Inside corners\n```\n\n**Typical Coverage:**\n- **Paper tape**: 500 feet per roll\n- **Mesh tape**: 150-300 feet per roll\n- **Metal corner bead**: 10-foot standard lengths\n\n### Joint Compound Quantities\n\n**Three-Coat System:**\n1. **Embedding/Taping coat**: 0.037 gallons per 100 sq ft\n2. **Second coat**: 0.037 gallons per 100 sq ft  \n3. **Finish coat**: 0.028 gallons per 100 sq ft\n\n**Total Compound**: 0.102 gallons per 100 sq ft of drywall\n\n**Example for 1,000 sq ft room:**\n- Total compound needed: 1.02 gallons\n- Standard 3.5-gallon bucket covers ~3,430 sq ft\n- Order: 1 bucket for most residential rooms\n\n## Labor Cost Calculations\n\n### Productivity Rates\n\n**Hanging Drywall:**\n- **Experienced crew**: 35-45 sheets per day (2-person crew)\n- **Standard crew**: 25-35 sheets per day\n- **Complex layouts**: 20-25 sheets per day\n\n**Finishing Work:**\n- **Taping and first coat**: 1,200-1,500 sq ft per day\n- **Second coat**: 1,500-2,000 sq ft per day\n- **Final coat and sanding**: 1,000-1,200 sq ft per day\n\n### Regional Labor Rates\n\n**Hanging Rates (per sq ft):**\n- **High-cost markets**: $1.25-$1.75\n- **Moderate markets**: $0.85-$1.25\n- **Low-cost markets**: $0.65-$0.95\n\n**Finishing Rates (per sq ft):**\n- **High-cost markets**: $1.50-$2.25\n- **Moderate markets**: $1.00-$1.50\n- **Low-cost markets**: $0.75-$1.25\n\n**Combined Rate Example:**\nStandard residential (moderate market):\n- Hanging: $1.00/sq ft\n- Finishing: $1.25/sq ft\n- Total labor: $2.25/sq ft\n\n## Material Cost Breakdown\n\n### Drywall Sheet Pricing\n\n**Standard 1/2\" Drywall (4' × 8'):**\n- **Standard grade**: $12-16 per sheet\n- **Moisture-resistant**: $14-18 per sheet\n- **Fire-rated 5/8\"**: $16-22 per sheet\n- **Mold-resistant**: $18-24 per sheet\n\n### Finishing Materials\n\n**Joint Compound:**\n- **All-purpose**: $12-16 per 3.5-gallon bucket\n- **Lightweight**: $14-18 per 3.5-gallon bucket\n- **Setting compound**: $8-12 per 50-lb bag\n\n**Tape and Fasteners:**\n- **Paper tape**: $8-12 per 500-foot roll\n- **Mesh tape**: $12-18 per 150-foot roll\n- **Drywall screws**: $15-25 per 5-lb box (1,500+ screws)\n- **Corner bead**: $4-8 per 10-foot length\n\n## Specialty Applications\n\n### Curved and Radius Work\n\n**1/4\" Flexible Drywall:**\n- Price: $18-24 per 4' × 8' sheet\n- Coverage: Same calculation as standard, no waste reduction\n- Labor premium: Add 50-75% to standard rates\n\n**Wet-Bending Technique:**\n- Use standard 1/2\" drywall with scoring\n- Requires careful moisture control\n- Labor premium: Add 25-40% to standard rates\n\n### Fire-Rated Assemblies\n\n**Type X Drywall Requirements:**\n- **1-hour rating**: Single layer 5/8\" Type X\n- **2-hour rating**: Double layer 5/8\" Type X\n- **Special fastening**: Closer screw spacing required\n\n**Cost Implications:**\n- Material cost: +30-40% over standard\n- Labor cost: +20-30% due to weight and fastening\n\n### Sound Control Applications\n\n**STC-Rated Assemblies:**\n- **STC 50+**: Resilient channels with 5/8\" drywall\n- **STC 55+**: Double-layer with damping compound\n- **STC 60+**: Staggered stud or double-wall systems\n\n## Quality Control and Standards\n\n### Installation Standards\n\n**Screw Placement:**\n- Minimum 3/8\" from edges\n- Slightly countersunk, not overdriven\n- No paper tears or damaged edges\n\n**Joint Quality:**\n- Level 1: Tape and embed compound only\n- Level 3: Standard residential finish\n- Level 4: Commercial standard\n- Level 5: Critical lighting areas\n\n### Common Defects and Costs\n\n**Rework Scenarios:**\n- **Fastener pops**: $2-4 per repair\n- **Joint cracking**: $5-12 per linear foot\n- **Texture mismatch**: $1.50-3.00 per sq ft\n\n## Using CostFlowAI's Drywall Calculator\n\n### Automated Calculations\n\n**Our Drywall Pro Calculator handles:**\n- **Automatic sheet counting** with waste factors\n- **Fastener calculations** based on spacing standards  \n- **Joint compound quantities** for three-coat systems\n- **Labor estimation** with regional rate adjustments\n- **Professional reports** with material takeoffs\n\n### Step-by-Step Process\n\n1. **Enter room dimensions**: Length, width, height\n2. **Specify openings**: Doors, windows, other penetrations\n3. **Select materials**: Sheet size, thickness, grade\n4. **Choose finish level**: Level 3, 4, or 5 requirements\n5. **Regional settings**: Local labor and material rates\n6. **Review estimate**: Detailed breakdown and totals\n7. **Export reports**: Professional documentation ready\n\n## Cost Estimation Best Practices\n\n### Overhead Considerations\n\n**Project Overhead (15-20%):**\n- Equipment rental (scaffolding, lifts)\n- Tool wear and consumables\n- Disposal and cleanup costs\n- Supervision and coordination\n\n**Business Overhead (10-15%):**\n- Insurance and bonding\n- Office expenses and administration\n- Vehicle costs and fuel\n- Training and certification\n\n### Risk Factors\n\n**Schedule Impacts:**\n- **Weather delays**: HVAC required for proper curing\n- **Trade coordination**: Electrical/plumbing rough-in completion\n- **Inspection requirements**: Building department schedules\n\n**Market Conditions:**\n- **Material availability**: Supply chain disruptions\n- **Labor shortage**: Skilled finisher availability\n- **Seasonal demand**: Peak construction periods\n\n## Advanced Estimation Techniques\n\n### Productivity Adjustments\n\n**Factors Affecting Speed:**\n- **Ceiling height**: Add 15% labor for 10'+ ceilings\n- **Access limitations**: Add 20-30% for tight spaces\n- **Texture requirements**: Add 25-40% for heavy textures\n- **Architectural features**: Add 30-50% for complex details\n\n### Value Engineering\n\n**Cost Reduction Strategies:**\n- **Sheet size optimization**: Minimize joints and waste\n- **Delivery coordination**: Reduce handling and storage\n- **Staging efficiency**: Organize for workflow optimization\n- **Tool selection**: Appropriate equipment for project size\n\n## Conclusion\n\nAccurate drywall estimation requires understanding material calculations, labor productivity, and regional cost factors. By using systematic approaches and leveraging tools like CostFlowAI's drywall calculator, you can create competitive estimates while maintaining profitability.\n\n**Ready to streamline your drywall estimates?** Try our [Drywall Pro Calculator](/calculators) and experience automated material takeoffs with professional reporting.\n\n---\n\n*Next week: We'll explore electrical rough-in calculations and how to accurately estimate wire, conduit, and device requirements for your projects.*","size_bytes":9666},"content/posts/electrical-cost-calculation-guide.md":{"content":"---\ntitle: Electrical Cost Calculation Guide - Wiring, Conduit, and Labor Estimation\nslug: electrical-cost-calculation-guide\ndate: 2024-01-18\ntags: [electrical, MEP, estimation, calculators]\ndescription: Complete guide to electrical cost estimation covering wire calculations, conduit sizing, panel requirements, labor rates, and regional cost factors.\n---\n\n# Electrical Cost Calculation Guide\n\nElectrical estimation requires precision and code compliance knowledge. Whether you're wiring a residential addition or a commercial office, accurate calculations of materials, labor, and permits ensure profitable projects and safe installations.\n\n## Wire and Cable Calculations\n\n### Wire Sizing Fundamentals\n\n**Ampacity Requirements:**\n- **15 amp circuits**: 14 AWG copper minimum\n- **20 amp circuits**: 12 AWG copper minimum  \n- **30 amp circuits**: 10 AWG copper minimum\n- **50 amp circuits**: 6 AWG copper minimum\n\n**Voltage Drop Considerations:**\nMaximum 3% voltage drop for branch circuits, 5% total system\n\n```\nVoltage Drop = (2 × Length × Current × Resistance) ÷ 1000\n```\n\n**Wire Length Calculations:**\n```\nTotal wire length = (Home run distance × 2) + (Device-to-device runs × 2) + 10% waste factor\n```\n\n### Common Circuit Types and Requirements\n\n**Lighting Circuits (15A):**\n- **Bedroom/Living areas**: 1 circuit per 600 sq ft\n- **Kitchen**: Dedicated lighting circuit required\n- **Bathrooms**: GFCI protection required\n- **Wire requirement**: 14-2 w/ground Romex\n\n**Receptacle Circuits (20A):**\n- **General use**: 1 circuit per 600 sq ft\n- **Kitchen small appliance**: Minimum 2 dedicated 20A circuits\n- **Laundry**: Dedicated 20A circuit required\n- **Wire requirement**: 12-2 w/ground Romex\n\n**Appliance Circuits:**\n- **Electric range**: 50A, 6-3 w/ground cable\n- **Electric dryer**: 30A, 10-3 w/ground cable\n- **Air conditioning**: Size per equipment nameplate\n- **Water heater**: Typically 30A, 10-2 w/ground\n\n### Cable Type Selection\n\n**Romex/NM Cable (Dry locations):**\n- **14-2 w/ground**: $0.45-0.65 per foot\n- **12-2 w/ground**: $0.65-0.95 per foot\n- **10-2 w/ground**: $1.15-1.65 per foot\n- **6-3 w/ground**: $3.25-4.75 per foot\n\n**MC Cable (Commercial/exposed):**\n- **12-2**: $1.25-1.85 per foot\n- **10-2**: $2.15-3.25 per foot\n- **Additional 25-40% cost over Romex**\n\n## Conduit and Raceway Systems\n\n### Conduit Sizing and Fill\n\n**Conduit Fill Calculations:**\n- **1 wire**: 53% maximum fill\n- **2 wires**: 31% maximum fill\n- **3+ wires**: 40% maximum fill\n\n**Common Conduit Sizes:**\n- **1/2\" EMT**: Up to 4 #12 THWN wires\n- **3/4\" EMT**: Up to 6 #12 THWN wires\n- **1\" EMT**: Up to 10 #12 THWN wires\n\n### Conduit Material Costs\n\n**EMT (Electrical Metallic Tubing):**\n- **1/2\"**: $1.25-1.85 per 10' stick\n- **3/4\"**: $1.95-2.75 per 10' stick\n- **1\"**: $2.85-4.25 per 10' stick\n\n**PVC Conduit:**\n- **1/2\"**: $0.95-1.35 per 10' stick\n- **3/4\"**: $1.45-2.15 per 10' stick\n- **1\"**: $2.15-3.25 per 10' stick\n\n**Rigid Steel:**\n- **1/2\"**: $4.25-6.75 per 10' stick\n- **3/4\"**: $6.75-9.25 per 10' stick\n- **1\"**: $8.95-12.75 per 10' stick\n\n### Fitting and Connector Requirements\n\n**Boxes per Circuit:**\n- **Outlets**: 1 box per receptacle/switch\n- **Junction boxes**: 10% of total box count\n- **Wire nuts**: 3-4 per box average\n\n**Conduit Fittings:**\n- **Couplings**: 1 per 20' run + 10% extra\n- **Elbows**: Count bends, limit to 360° total\n- **Connectors**: 2 per conduit run (both ends)\n\n## Panel and Distribution Equipment\n\n### Panel Requirements\n\n**Residential Load Centers:**\n- **100A service**: $125-185 (up to 20 circuits)\n- **200A service**: $185-275 (up to 40 circuits)\n- **Sub-panels**: $95-165 (depending on capacity)\n\n**Commercial Panels:**\n- **100A 3-phase**: $485-725\n- **225A 3-phase**: $825-1,275\n- **400A 3-phase**: $1,685-2,475\n\n### Breaker Calculations\n\n**Circuit Breaker Costs:**\n- **15A single-pole**: $8-14\n- **20A single-pole**: $9-16\n- **30A double-pole**: $18-28\n- **50A double-pole**: $35-55\n\n**GFCI/AFCI Requirements:**\n- **GFCI breakers**: $45-75 each\n- **AFCI breakers**: $38-65 each\n- **Combination AFCI/GFCI**: $65-95 each\n\n### Service Entrance Equipment\n\n**Meter Base and Disconnect:**\n- **200A meter combo**: $275-425\n- **Main breaker panels**: $325-495\n- **Service entrance cable**: $4.25-6.75 per foot (2-2-2-4 Al)\n\n## Labor Cost Calculations\n\n### Installation Productivity Rates\n\n**Rough-in Wiring (per point):**\n- **Receptacle/switch**: 0.75-1.25 hours\n- **Light fixture outlet**: 0.5-0.85 hours\n- **Appliance circuit**: 1.5-2.5 hours\n- **Panel installation**: 6-10 hours\n\n**Finish Work (per point):**\n- **Device installation**: 0.25-0.4 hours\n- **Fixture hanging**: 1.0-2.5 hours (varies by complexity)\n- **Panel trim-out**: 3-6 hours\n\n### Regional Labor Rates\n\n**Journeyman Electrician Rates:**\n- **High-cost markets**: $45-75 per hour\n- **Moderate markets**: $35-55 per hour\n- **Low-cost markets**: $25-40 per hour\n\n**Labor Loading Factors:**\n- **Payroll taxes**: 7.65%\n- **Workers compensation**: 8-15%\n- **Benefits**: 15-25%\n- **Total burden**: 125-140% of base wage\n\n### Typical Labor Distribution\n\n**Project Phase Breakdown:**\n- **Rough-in**: 60-65% of total electrical labor\n- **Trim-out**: 25-30% of total electrical labor\n- **Service/panel**: 10-15% of total electrical labor\n\n## Code Compliance and Permit Costs\n\n### NEC Requirements Impact\n\n**AFCI Protection (2020+ NEC):**\n- Required in bedrooms, living rooms, family rooms\n- Adds $38-65 per circuit for AFCI breakers\n- Significantly impacts renovation costs\n\n**GFCI Protection Requirements:**\n- Bathrooms, kitchens, laundry, exterior, garages\n- Unfinished basements, crawl spaces\n- Pool/spa equipment areas\n\n### Permit and Inspection Costs\n\n**Residential Permits:**\n- **New construction**: $250-450 base + $2-4 per amp\n- **Additions**: $125-275 base fee\n- **Service upgrades**: $95-185\n- **Repairs/alterations**: $65-125\n\n**Commercial Permits:**\n- **Base fee**: $325-650\n- **Per square foot**: $0.08-0.15\n- **Minimum**: $450-750\n- **Plan review**: 50-65% of permit fee\n\n## Material Takeoff Methods\n\n### Systematic Approach\n\n**Step 1: Load Analysis**\n1. Count all outlets, switches, fixtures\n2. Group by circuit type and amperage\n3. Calculate home run distances\n4. Determine panel requirements\n\n**Step 2: Wire Calculations**\n```\nCircuit wire length = (Panel to first device) + (Device-to-device runs) + 6' panel allowance + 10% waste\n```\n\n**Step 3: Device Count**\n- Receptacles, switches, fixture outlets\n- Junction boxes and covers\n- Wire nuts and connectors\n\n### Advanced Calculation Methods\n\n**Load Diversity Factors:**\n- **Lighting**: 100% first 3000VA, 35% remainder\n- **Receptacles**: 100% first 10kVA, 50% remainder\n- **Appliances**: Name plate ratings with demand factors\n\n**Voltage Drop Verification:**\nCritical for long runs or large loads\n```\nWire size upgrade needed if calculated VD > 3%\n```\n\n## Cost Estimation Best Practices\n\n### Material Cost Components\n\n**Wire and Cable (35-45% of material cost):**\n- Romex for residential applications\n- MC cable for commercial/exposed runs\n- THWN for conduit systems\n\n**Devices and Boxes (25-35% of material cost):**\n- Receptacles, switches, covers\n- Junction boxes, device boxes\n- Fixture mounting hardware\n\n**Conduit and Fittings (15-25% of material cost):**\n- Required for commercial installations\n- Exposed residential installations\n- Wet/hazardous locations\n\n**Panel Equipment (15-20% of material cost):**\n- Load centers and distribution panels\n- Circuit breakers and protection\n- Meter equipment and disconnects\n\n### Regional Cost Variations\n\n**High-Cost Markets (+40-60%):**\n- Union labor requirements\n- Strict permit/inspection processes\n- Higher material costs\n- Complex local amendments\n\n**Moderate Markets (Base rates):**\n- Competitive labor rates\n- Standard NEC compliance\n- Normal material availability\n- Reasonable permit costs\n\n**Low-Cost Markets (-20-30%):**\n- Lower labor costs\n- Simplified permit processes\n- Local supplier advantages\n- Reduced overhead costs\n\n## Using CostFlowAI's Electrical Calculator\n\n### Automated Load Calculations\n\n**Our Electrical Pro Calculator provides:**\n- **Automatic load analysis** per NEC requirements\n- **Wire sizing calculations** with voltage drop checks\n- **Panel schedule generation** with proper breaker sizing\n- **Material takeoffs** with waste factors included\n- **Labor estimation** with regional rate adjustments\n\n### Features and Benefits\n\n**Smart Code Compliance:**\n- AFCI/GFCI requirements automatically applied\n- Voltage drop calculations with upgrade recommendations\n- Load diversity factors applied correctly\n- Service size recommendations\n\n**Professional Documentation:**\n- Complete material lists with part numbers\n- Panel schedules and load calculations\n- Labor breakdown by phase\n- Professional PDF reports\n\n## Common Estimation Errors\n\n### Calculation Mistakes\n\n**Wire Length Errors:**\n- Forgetting return path (×2 multiplier)\n- Not accounting for routing/obstacles\n- Insufficient panel allowances\n- Inadequate waste factors\n\n**Load Calculation Errors:**\n- Missing continuous load factors\n- Incorrect demand factors\n- Forgetting motor load multipliers\n- HVAC load coordination errors\n\n### Cost Estimation Pitfalls\n\n**Material Costs:**\n- Using outdated pricing\n- Forgetting sales tax\n- Not including delivery charges\n- Missing specialty items\n\n**Labor Costs:**\n- Unrealistic productivity rates\n- Forgetting travel time\n- Not including callbacks\n- Missing permit/inspection time\n\n## Advanced Applications\n\n### Smart Home Integration\n\n**Technology Requirements:**\n- Low-voltage structured wiring\n- Network infrastructure planning\n- Control system integration\n- Future expansion considerations\n\n**Cost Implications:**\n- Additional 20-35% for basic smart features\n- Specialized labor requirements\n- Premium device costs\n- Programming and commissioning time\n\n### Energy Efficiency Upgrades\n\n**LED Lighting Conversions:**\n- Reduced circuit loading\n- Dimmer compatibility issues\n- Control system integration\n- Utility rebate programs\n\n**Electric Vehicle Charging:**\n- 240V/50A circuit requirements\n- Panel capacity verification\n- Conduit and wire upgrades\n- Permit and inspection requirements\n\n## Conclusion\n\nElectrical cost estimation combines technical knowledge with practical experience. Accurate load calculations, proper material selection, and realistic labor estimates ensure successful project completion and profitability.\n\n**Ready to simplify your electrical estimates?** Try our [Electrical Pro Calculator](/calculators) for automated load calculations and professional documentation.\n\n---\n\n*Coming next: HVAC cost calculation fundamentals including ductwork sizing, equipment selection, and installation labor requirements.*","size_bytes":10669},"content/posts/flooring-cost-estimation.md":{"content":"---\ntitle: Flooring Cost Estimation Methods - Materials, Labor, and Installation Factors\nslug: flooring-cost-estimation\ndate: 2024-01-14\ntags: [flooring, interior, estimation, calculators]\ndescription: Complete guide to flooring cost estimation covering material calculations, subfloor preparation, installation labor rates, and finishing considerations.\n---\n\n# Flooring Cost Estimation Methods\n\nFlooring projects require detailed material calculations and understanding of subfloor conditions. Whether you're installing hardwood in a luxury home or commercial carpet in an office building, accurate estimation ensures proper material ordering and profitable installation.\n\n## Area Calculation Fundamentals\n\n### Basic Room Measurement\n\n**Rectangular Rooms:**\n```\nArea = Length × Width\n```\n\n**L-Shaped and Complex Rooms:**\n```\nTotal Area = Sum of rectangular sections\nSubtract non-floored areas (closets, built-ins)\n```\n\n**Waste Factor Guidelines:**\n- **Simple rectangular**: 5-8%\n- **Complex layouts**: 10-15%\n- **Diagonal installation**: 15-20%\n- **Pattern matching**: 15-25%\n\n### Transition and Trim Calculations\n\n**Linear Measurements:**\n- **Baseboards**: Room perimeter minus door openings\n- **Quarter round**: Same as baseboard if used\n- **Transition strips**: Door openings and material changes\n- **Thresholds**: Exterior door locations\n\n**Example Calculation:**\n12' × 14' bedroom with one 3' door\n- Area: 168 sq ft\n- Waste factor (10%): 168 × 1.10 = 185 sq ft\n- Baseboard: (12+14+12+14) - 3 = 49 linear feet\n\n## Hardwood Flooring Calculations\n\n### Solid Hardwood\n\n**Coverage Rates:**\n- **3/4\" × 2-1/4\"**: 1.38 board feet per sq ft\n- **3/4\" × 3-1/4\"**: 1.28 board feet per sq ft\n- **3/4\" × 5\"**: 1.20 board feet per sq ft\n\n**Material Requirements:**\n```\nBoard feet needed = Floor area × Coverage factor × Waste factor\n```\n\n**Grade and Species Pricing:**\n- **Red oak select**: $6.50-9.50 per sq ft\n- **White oak #1 common**: $5.25-7.75 per sq ft\n- **Maple select**: $7.25-10.75 per sq ft\n- **Exotic species**: $8.95-18.50 per sq ft\n\n### Engineered Hardwood\n\n**Standard Sizes:**\n- **3/8\" × 3\"**: Most economical option\n- **1/2\" × 5\"**: Standard residential choice\n- **5/8\" × 7-1/2\"**: Premium wide plank\n\n**Installation Methods:**\n- **Glue down**: $1.25-2.15 per sq ft labor\n- **Floating**: $0.85-1.65 per sq ft labor\n- **Nail down**: $1.65-2.85 per sq ft labor\n\n**Material Costs:**\n- **Basic engineered**: $3.25-5.75 per sq ft\n- **Premium engineered**: $5.75-9.25 per sq ft\n- **Luxury engineered**: $9.25-16.50 per sq ft\n\n## Laminate and LVP Flooring\n\n### Laminate Flooring\n\n**Quality Grades:**\n- **AC1 (light residential)**: $1.25-2.85 per sq ft\n- **AC3 (moderate traffic)**: $2.85-4.75 per sq ft\n- **AC4 (heavy traffic)**: $4.75-7.25 per sq ft\n- **AC5 (commercial)**: $7.25-12.50 per sq ft\n\n**Installation Requirements:**\n- **Underlayment**: $0.35-0.85 per sq ft\n- **Floating installation**: $1.25-2.15 per sq ft labor\n- **Moisture barrier**: $0.25-0.55 per sq ft\n\n### Luxury Vinyl Plank (LVP)\n\n**Construction Types:**\n- **WPC (Wood Plastic Core)**: $2.85-6.75 per sq ft\n- **SPC (Stone Plastic Core)**: $3.25-7.85 per sq ft\n- **Rigid Core**: $4.25-9.50 per sq ft\n\n**Installation Methods:**\n- **Click-lock floating**: $1.85-3.25 per sq ft\n- **Glue down**: $2.25-3.85 per sq ft\n- **Loose lay**: $1.25-2.45 per sq ft\n\n**Underlayment Options:**\n- **Standard foam**: $0.25-0.45 per sq ft\n- **Cork underlayment**: $0.75-1.35 per sq ft\n- **Rubber underlayment**: $0.95-1.85 per sq ft\n\n## Tile Flooring Calculations\n\n### Ceramic and Porcelain Tile\n\n**Standard Sizes and Coverage:**\n- **12\" × 12\"**: 1 tile per sq ft\n- **16\" × 16\"**: 0.56 tiles per sq ft\n- **18\" × 18\"**: 0.44 tiles per sq ft\n- **24\" × 24\"**: 0.25 tiles per sq ft\n\n**Waste Factors by Layout:**\n- **Straight lay**: 10%\n- **Diagonal**: 15%\n- **Herringbone**: 20%\n- **Complex patterns**: 25%\n\n**Material Pricing:**\n- **Basic ceramic**: $1.25-3.85 per sq ft\n- **Premium ceramic**: $3.85-7.50 per sq ft\n- **Porcelain**: $2.85-12.50 per sq ft\n- **Natural stone**: $5.75-25.00 per sq ft\n\n### Installation Materials\n\n**Adhesive Requirements:**\n- **Wall tile**: 1 gallon per 40-60 sq ft\n- **Floor tile**: 1 gallon per 30-50 sq ft\n- **Large format**: 1 gallon per 25-35 sq ft\n\n**Grout Calculations:**\n```\nGrout amount = (Tile length + Tile width) ÷ (Tile length × Tile width) × Joint width × Joint depth × Tile area\n```\n\n**Grout Coverage (1/8\" joints):**\n- **12\" × 12\" tile**: 1 lb per 12-15 sq ft\n- **6\" × 6\" tile**: 1 lb per 6-8 sq ft\n- **Large format**: 1 lb per 15-20 sq ft\n\n## Carpet Installation\n\n### Carpet Types and Pricing\n\n**Construction Methods:**\n- **Loop pile**: $2.25-8.50 per sq ft\n- **Cut pile**: $2.85-12.50 per sq ft\n- **Cut and loop**: $3.25-9.75 per sq ft\n- **Frieze**: $3.85-11.50 per sq ft\n\n**Fiber Types:**\n- **Nylon**: Most durable, $4.25-15.75 per sq ft\n- **Polyester**: Good value, $2.25-8.95 per sq ft\n- **Wool**: Premium luxury, $8.95-35.00 per sq ft\n- **Olefin**: Commercial grade, $1.85-6.75 per sq ft\n\n### Padding and Installation\n\n**Carpet Padding:**\n- **Foam padding**: $0.35-0.85 per sq ft\n- **Rubber padding**: $0.75-1.65 per sq ft\n- **Memory foam**: $1.25-2.45 per sq ft\n\n**Installation Labor:**\n- **Basic installation**: $1.25-2.85 per sq ft\n- **Pattern matching**: Add 25-40%\n- **Stairs**: $8.50-15.75 per step\n- **Custom work**: $3.85-7.25 per sq ft\n\n### Commercial Carpet\n\n**Carpet Tile:**\n- **Basic commercial**: $1.85-4.25 per sq ft\n- **Premium commercial**: $4.25-8.95 per sq ft\n- **Luxury commercial**: $8.95-18.50 per sq ft\n\n**Broadloom Commercial:**\n- **Level loop**: $2.85-7.50 per sq ft\n- **Multi-level**: $3.85-9.75 per sq ft\n- **Cut pile**: $4.75-12.50 per sq ft\n\n## Subfloor Preparation Costs\n\n### Subfloor Assessment\n\n**Common Issues:**\n- **Squeaks**: $2.85-6.75 per sq ft to repair\n- **Uneven surfaces**: $1.85-4.25 per sq ft leveling\n- **Water damage**: $3.85-9.50 per sq ft replacement\n- **Structural issues**: $8.50-18.75 per sq ft repair\n\n### Preparation Methods\n\n**Floor Leveling:**\n- **Self-leveling compound**: $1.25-2.85 per sq ft\n- **Plywood overlay**: $2.85-5.75 per sq ft\n- **Concrete grinding**: $2.25-4.75 per sq ft\n\n**Moisture Control:**\n- **Vapor barriers**: $0.35-0.85 per sq ft\n- **Moisture testing**: $185-385 per room\n- **Dehumidification**: $125-285 per day\n\n**Subfloor Replacement:**\n- **3/4\" plywood**: $2.85-4.25 per sq ft\n- **OSB subflooring**: $1.85-3.25 per sq ft\n- **Concrete substrate**: $4.75-8.95 per sq ft\n\n## Labor Cost Calculations\n\n### Installation Productivity Rates\n\n**Hardwood Installation:**\n- **Nail down**: 150-250 sq ft per day\n- **Glue down**: 200-350 sq ft per day\n- **Floating**: 300-500 sq ft per day\n\n**Tile Installation:**\n- **12\" × 12\" tile**: 100-200 sq ft per day\n- **Large format**: 150-300 sq ft per day\n- **Mosaic**: 50-125 sq ft per day\n\n**Carpet Installation:**\n- **Residential**: 300-600 sq ft per day\n- **Commercial**: 400-800 sq ft per day\n- **Stairs and detailed work**: 50-150 sq ft per day\n\n### Regional Labor Variations\n\n**Flooring Installer Rates:**\n- **High-cost markets**: $3.85-7.25 per sq ft\n- **Moderate markets**: $2.85-5.25 per sq ft\n- **Low-cost markets**: $1.85-3.85 per sq ft\n\n**Specialty Work Premiums:**\n- **Intricate patterns**: Add 50-75%\n- **Curved installations**: Add 75-100%\n- **Historical restoration**: Add 100-150%\n- **Difficult access**: Add 25-50%\n\n## Quality Grades and Selection\n\n### Hardwood Grading\n\n**NOFMA Grades:**\n- **Clear**: Highest grade, minimal character\n- **Select**: Minor character marks allowed\n- **#1 Common**: Moderate character, good value\n- **#2 Common**: Rustic appearance, economical\n\n**Grade Price Differences:**\n- **Clear to Select**: 15-25% premium\n- **Select to #1 Common**: 20-30% savings\n- **#1 to #2 Common**: 25-40% savings\n\n### Tile Quality Ratings\n\n**PEI Ratings (Porcelain Enamel Institute):**\n- **PEI 0**: Wall use only\n- **PEI I**: Light residential traffic\n- **PEI II**: Moderate residential traffic\n- **PEI III**: Heavy residential/light commercial\n- **PEI IV**: Heavy commercial traffic\n- **PEI V**: Industrial applications\n\n### Carpet Quality Metrics\n\n**Density Calculations:**\n```\nDensity = Face weight ÷ Pile height\nHigher density = better durability\n```\n\n**Quality Indicators:**\n- **Face weight**: 35+ oz for residential\n- **Twist level**: 5+ for durability\n- **Tuft bind**: 8+ lbs minimum\n- **Warranty**: 10+ years for quality carpet\n\n## Cost Estimation Best Practices\n\n### Comprehensive Material Lists\n\n**Primary Materials:**\n1. **Flooring material** with waste factor\n2. **Underlayment** if required\n3. **Adhesives** and fasteners\n4. **Trim materials** (baseboard, quarter round)\n5. **Transition strips** and thresholds\n\n**Installation Supplies:**\n1. **Tools and equipment** rental\n2. **Disposal** of existing flooring\n3. **Floor preparation** materials\n4. **Finishing materials** (stain, polyurethane)\n\n### Regional Cost Considerations\n\n**Material Availability:**\n- **Local suppliers**: Standard pricing\n- **Specialty items**: Shipping costs\n- **Custom orders**: Lead time premiums\n- **Bulk pricing**: Discounts for large projects\n\n**Installation Factors:**\n- **Local labor rates**: Varies significantly\n- **Building codes**: May affect installation methods\n- **Access limitations**: Affects labor productivity\n- **Seasonal demand**: Peak pricing periods\n\n## Using CostFlowAI's Flooring Calculator\n\n### Automated Calculations\n\n**Our Flooring Pro Calculator provides:**\n- **Area calculations** with complex room shapes\n- **Material takeoffs** including waste factors\n- **Labor estimation** by flooring type\n- **Subfloor assessment** costs\n- **Professional reports** with detailed breakdowns\n\n### Advanced Features\n\n**Pattern and Layout Optimization:**\n- Waste factor adjustment by installation pattern\n- Transition planning and material calculations\n- Trim and molding requirements\n- Subfloor preparation recommendations\n\n**Cost Comparison Tools:**\n- Material option comparisons\n- Installation method cost analysis\n- Long-term value calculations\n- Maintenance cost projections\n\n## Conclusion\n\nFlooring cost estimation requires understanding of material properties, installation methods, and subfloor conditions. By using systematic calculation approaches and accounting for quality grades and regional factors, you can create accurate estimates that ensure client satisfaction and project profitability.\n\n**Ready to streamline your flooring estimates?** Try our [Flooring Pro Calculator](/calculators) for automated material calculations and professional documentation.\n\n---\n\n*Next article: HVAC cost calculation basics including ductwork sizing, equipment selection, and installation labor requirements.*","size_bytes":10669},"content/posts/framing-lumber-calculation-guide.md":{"content":"---\ntitle: Framing Lumber Calculation Guide - Dimensional Lumber, Fasteners, and Labor\nslug: framing-lumber-calculation-guide\ndate: 2024-01-09\ntags: [framing, structural, estimation, calculators]\ndescription: Complete framing estimation guide covering lumber calculations, engineered materials, fastener requirements, and labor productivity rates.\n---\n\n# Framing Lumber Calculation Guide\n\nFraming represents the structural backbone of construction projects. Whether you're framing a residential addition or a commercial build-out, accurate lumber calculations ensure structural integrity, code compliance, and material cost control.\n\n## Dimensional Lumber Basics\n\n### Standard Lumber Sizes\n\n**Actual vs. Nominal Dimensions:**\n- **2×4**: Actually 1-1/2\" × 3-1/2\"\n- **2×6**: Actually 1-1/2\" × 5-1/2\"\n- **2×8**: Actually 1-1/2\" × 7-1/4\"\n- **2×10**: Actually 1-1/2\" × 9-1/4\"\n- **2×12**: Actually 1-1/2\" × 11-1/4\"\n\n**Standard Lengths:**\n- **Studs**: 8', 9', 10', 12' precut\n- **Joists/Rafters**: 8', 10', 12', 14', 16', 18', 20'\n- **Plates**: 8', 10', 12', 14', 16'\n- **Headers**: 12', 14', 16', 18', 20'\n\n### Lumber Grades and Species\n\n**Structural Grades:**\n- **Stud grade**: Vertical load-bearing members\n- **Construction grade**: Light framing, 4\" and wider\n- **Standard grade**: Light framing, general use\n- **Utility grade**: Non-structural applications\n\n**Common Species:**\n- **Douglas Fir**: High strength, consistent grade\n- **Southern Yellow Pine**: Strong, economical choice\n- **Hem-Fir**: Good strength-to-weight ratio\n- **SPF (Spruce-Pine-Fir)**: Cost-effective option\n\n## Wall Framing Calculations\n\n### Stud Requirements\n\n**Stud Spacing Standards:**\n- **16\" on center**: Standard residential\n- **24\" on center**: Engineered systems, energy efficiency\n- **12\" on center**: Heavy loads, high wind areas\n\n**Stud Count Formula:**\n```\nNumber of studs = (Wall length in inches ÷ Spacing) + 1\nAdd corner studs and extra studs at openings\n```\n\n**Example Calculation:**\n20' wall with 16\" OC spacing\n- Linear inches: 20 × 12 = 240\"\n- Studs needed: (240 ÷ 16) + 1 = 16 studs\n- Add corners and openings as required\n\n### Plate Requirements\n\n**Top and Bottom Plates:**\n- **Single bottom plate**: Standard application\n- **Double top plate**: Required for load distribution\n- **Length calculation**: Wall length + splice allowances\n- **Splice locations**: Minimum 4' from corners\n\n**Plate Calculation:**\n```\nPlate linear feet = Wall perimeter × 3 (one bottom, two top)\nAdd 10% waste for splices and cuts\n```\n\n### Headers and Lintels\n\n**Header Sizing:**\n- **3' span**: 2×6 or 2×8 (depending on load)\n- **4' span**: 2×8 or 2×10\n- **6' span**: 2×10 or 2×12\n- **8' span**: 2×12 or engineered beam\n- **10'+ span**: Engineered lumber required\n\n**Header Construction:**\n- **Solid sawn**: Two 2× members with spacer\n- **LVL**: Single engineered lumber beam\n- **Steel**: I-beam or channel sections\n- **Flitch beam**: Steel plate sandwiched between lumber\n\n## Floor Framing Systems\n\n### Joist Calculations\n\n**Joist Spacing:**\n- **12\" on center**: Heavy loads, long spans\n- **16\" on center**: Standard residential\n- **19.2\" on center**: Engineered I-joist systems\n- **24\" on center**: Short spans, light loads\n\n**Joist Count Formula:**\n```\nNumber of joists = (Building width in inches ÷ Spacing) + 1\n```\n\n**Span Tables (Southern Pine, 40 psf live load):**\n- **2×8 @ 16\" OC**: 11'-10\" maximum span\n- **2×10 @ 16\" OC**: 15'-2\" maximum span\n- **2×12 @ 16\" OC**: 18'-0\" maximum span\n\n### Rim Board and Blocking\n\n**Rim Board Requirements:**\n- **Perimeter**: Calculated by building perimeter\n- **Interior beams**: Additional rim board length\n- **Material**: Same size as floor joists\n\n**Blocking Requirements:**\n- **Mid-span blocking**: Required for joists over 8'\n- **Material**: 2× material same depth as joists\n- **Quantity**: One block per joist bay\n\n### Subflooring Materials\n\n**Plywood Subflooring:**\n- **5/8\" CDX**: 16\" joist spacing\n- **3/4\" CDX**: 19.2\" joist spacing\n- **Tongue & groove**: Glued and nailed application\n\n**OSB Subflooring:**\n- **23/32\" OSB**: 16\" joist spacing\n- **7/8\" OSB**: 19.2\" and 24\" spacing\n- **Cost advantage**: 15-25% less than plywood\n\n## Roof Framing Calculations\n\n### Rafter Systems\n\n**Common Rafter Calculations:**\n```\nRafter length = Run × Rafter factor\nRafter factor varies by roof pitch\n```\n\n**Rafter Factors by Pitch:**\n- **4/12 pitch**: 1.054 factor\n- **6/12 pitch**: 1.118 factor\n- **8/12 pitch**: 1.202 factor\n- **10/12 pitch**: 1.302 factor\n- **12/12 pitch**: 1.414 factor\n\n**Rafter Spacing:**\n- **12\" on center**: Heavy snow loads\n- **16\" on center**: Standard residential\n- **24\" on center**: Light loads, engineered systems\n\n### Truss Systems\n\n**Truss Advantages:**\n- **Faster installation**: Crane set in hours\n- **Engineered design**: Optimized material use\n- **Clear spans**: No interior bearing walls\n- **Cost effective**: Labor savings offset material cost\n\n**Truss Costs:**\n- **Standard trusses**: $3.85-6.75 per linear foot\n- **Hip trusses**: $8.50-15.75 each\n- **Gable end trusses**: $125-285 each\n- **Engineering**: $485-885 per job\n\n### Roof Sheathing\n\n**Plywood Sheathing:**\n- **1/2\" CDX**: 16\" rafter spacing\n- **5/8\" CDX**: 24\" rafter spacing\n- **OSB alternative**: 15-20% cost savings\n\n**Sheathing Coverage:**\n- **4' × 8' sheets**: 32 sq ft per sheet\n- **Roof area**: Building area × roof factor\n- **Waste factor**: 10-15% for cuts and ridge\n\n## Engineered Lumber Products\n\n### Laminated Veneer Lumber (LVL)\n\n**Applications:**\n- **Headers**: Long span applications\n- **Beams**: Point loads and long spans\n- **Rim board**: Consistent dimensional lumber\n- **Scaffold planking**: Construction applications\n\n**LVL Costs:**\n- **1-3/4\" × 9-1/2\"**: $8.50-12.75 per linear foot\n- **1-3/4\" × 11-7/8\"**: $11.75-17.25 per linear foot\n- **3-1/2\" × 11-7/8\"**: $22.50-32.75 per linear foot\n\n### I-Joists\n\n**Advantages:**\n- **Longer spans**: Higher strength-to-weight ratio\n- **Consistent dimensions**: No shrinkage or warping\n- **Utility friendly**: Easy to route utilities\n- **Material efficiency**: Uses smaller trees\n\n**I-Joist Costs:**\n- **9-1/2\" deep**: $4.25-6.85 per linear foot\n- **11-7/8\" deep**: $5.25-8.25 per linear foot\n- **14\" deep**: $6.75-10.75 per linear foot\n- **16\" deep**: $8.25-12.95 per linear foot\n\n### Glulam Beams\n\n**Applications:**\n- **Heavy timber**: Large span requirements\n- **Architectural**: Exposed beam applications\n- **Commercial**: High load applications\n- **Specialty shapes**: Curved and arched beams\n\n**Glulam Costs:**\n- **3-1/8\" × 9\"**: $15.75-24.50 per linear foot\n- **5-1/8\" × 12\"**: $28.50-42.75 per linear foot\n- **6-3/4\" × 16\"**: $52.50-78.75 per linear foot\n\n## Fastener Requirements\n\n### Nail Requirements\n\n**Framing Nails:**\n- **16d common**: Standard framing connections\n- **10d common**: Blocking and general framing\n- **8d common**: Subflooring and sheathing\n- **3-1/2\" screws**: Alternative to 16d nails\n\n**Nail Quantities:**\n- **Wall framing**: 25-35 lbs per 1,000 board feet\n- **Floor framing**: 20-30 lbs per 1,000 board feet\n- **Roof framing**: 30-40 lbs per 1,000 board feet\n\n### Structural Fasteners\n\n**Hurricane Ties:**\n- **Standard ties**: $2.85-4.25 each\n- **Heavy-duty ties**: $4.25-7.85 each\n- **Twist straps**: $3.85-6.75 each\n- **Quantity**: One per rafter/joist connection\n\n**Joist Hangers:**\n- **2×8 hangers**: $2.15-3.85 each\n- **2×10 hangers**: $2.85-4.75 each\n- **2×12 hangers**: $3.85-6.25 each\n- **Heavy-duty hangers**: 25-40% premium\n\n**Anchor Bolts:**\n- **1/2\" × 10\"**: $3.25-5.75 each\n- **5/8\" × 12\"**: $4.75-8.25 each\n- **3/4\" × 14\"**: $7.25-12.50 each\n- **Spacing**: 6'-8' on center maximum\n\n## Labor Cost Calculations\n\n### Framing Productivity Rates\n\n**Wall Framing:**\n- **Straight walls**: 75-125 linear feet per day\n- **Complex walls**: 50-85 linear feet per day\n- **Headers and openings**: 15-25 openings per day\n\n**Floor Framing:**\n- **Joist installation**: 1,200-2,000 sq ft per day\n- **Subflooring**: 800-1,500 sq ft per day\n- **Beam installation**: 50-125 linear feet per day\n\n**Roof Framing:**\n- **Rafter installation**: 800-1,400 sq ft per day\n- **Truss setting**: 2,000-4,000 sq ft per day\n- **Roof sheathing**: 1,200-2,400 sq ft per day\n\n### Regional Labor Rates\n\n**Carpenter Rates:**\n- **High-cost markets**: $32-55 per hour\n- **Moderate markets**: $25-42 per hour\n- **Low-cost markets**: $18-32 per hour\n\n**Crew Composition:**\n- **Lead carpenter**: Experienced framer\n- **Journeyman carpenter**: Standard rate\n- **Apprentice/helper**: 60-75% of journeyman rate\n\n**Labor Loading:**\n- **Workers compensation**: 12-20%\n- **Payroll taxes**: 7.65%\n- **Benefits**: 15-25%\n- **Tools and equipment**: 5-10%\n- **Total burden**: 140-170% of base wage\n\n## Material Pricing Factors\n\n### Lumber Market Conditions\n\n**Price Volatility:**\n- **Commodity pricing**: Subject to market fluctuations\n- **Seasonal trends**: Higher prices in spring/summer\n- **Supply disruptions**: Weather, trade, transportation\n- **Long-term contracts**: Price protection strategies\n\n**Current Pricing Ranges:**\n- **2×4×8' stud**: $3.25-6.75 each\n- **2×8×12'**: $12.75-24.50 each\n- **2×10×16'**: $24.50-45.75 each\n- **2×12×20'**: $42.75-78.50 each\n\n### Regional Cost Variations\n\n**Transportation Factors:**\n- **Mill proximity**: Affects base pricing\n- **Fuel costs**: Impact delivery charges\n- **Local competition**: Lumber yard pricing\n- **Volume discounts**: Large project savings\n\n**Quality Premiums:**\n- **Kiln-dried lumber**: 10-15% premium\n- **Premium grades**: 15-25% over standard\n- **Certified lumber**: Green building premiums\n- **Treated lumber**: Pressure treatment costs\n\n## Using CostFlowAI's Framing Calculator\n\n### Automated Calculations\n\n**Our Framing Pro Calculator provides:**\n- **Lumber takeoffs** by framing system\n- **Fastener calculations** with quantities\n- **Labor estimation** with productivity factors\n- **Cost analysis** with current material pricing\n- **Professional reports** for bidding and ordering\n\n### Advanced Features\n\n**Structural Analysis:**\n- Code-compliant span tables\n- Load calculation verification\n- Engineered lumber alternatives\n- Cost optimization recommendations\n\n**Waste Factor Optimization:**\n- Lumber length optimization\n- Cut list generation\n- Material ordering schedules\n- Delivery coordination\n\n## Conclusion\n\nFraming cost estimation requires understanding of structural requirements, material properties, and construction methods. By using systematic calculation approaches and accounting for current market conditions, you can create accurate estimates that ensure structural integrity and project profitability.\n\n**Ready to streamline your framing estimates?** Try our [Framing Pro Calculator](/calculators) for automated lumber calculations and professional documentation.\n\n---\n\n*Final article in our series: Paint and finishing cost estimation covering surface preparation, material coverage rates, and application labor requirements.*","size_bytes":10922},"content/posts/hvac-cost-calculation-basics.md":{"content":"---\ntitle: HVAC Cost Calculation Basics - Equipment Sizing, Ductwork, and Installation\nslug: hvac-cost-calculation-basics\ndate: 2024-01-13\ntags: [HVAC, MEP, estimation, calculators]\ndescription: Essential guide to HVAC cost estimation covering load calculations, equipment sizing, ductwork design, and installation labor rates.\n---\n\n# HVAC Cost Calculation Basics\n\nHVAC systems require precise engineering calculations and code compliance. Whether you're installing a residential heat pump or a commercial rooftop unit, accurate load calculations and proper equipment sizing ensure energy efficiency, comfort, and code compliance.\n\n## Load Calculation Fundamentals\n\n### Manual J Load Calculations (Residential)\n\n**Heat Loss Calculation:**\n```\nHeat Loss (BTU/hr) = Area × Delta T × U-Value\nWhere: Delta T = Indoor temp - Outdoor design temp\n```\n\n**Heat Gain Components:**\n- **Sensible heat**: Temperature-related loads\n- **Latent heat**: Humidity-related loads\n- **Internal gains**: People, lights, equipment\n- **Solar gains**: Windows and building orientation\n\n**Rule of Thumb Sizing:**\n- **Cooling**: 400-600 sq ft per ton (varies by climate)\n- **Heating**: 25-50 BTU per sq ft (varies by construction)\n- **Actual calculations**: Always required for accuracy\n\n### Equipment Sizing Factors\n\n**Capacity Requirements:**\n- **Oversizing penalties**: Poor humidity control, short cycling\n- **Undersizing problems**: Inadequate comfort, high operating costs\n- **Proper sizing**: Within 15% of calculated load\n\n**Efficiency Ratings:**\n- **SEER (cooling)**: Minimum 13, high-efficiency 16-25\n- **HSPF (heat pumps)**: Minimum 7.7, high-efficiency 9-13\n- **AFUE (furnaces)**: Minimum 80%, high-efficiency 90-98%\n\n## Equipment Types and Costs\n\n### Residential Systems\n\n**Central Air Conditioning:**\n- **2 ton (24,000 BTU)**: $2,850-4,750 equipment\n- **3 ton (36,000 BTU)**: $3,250-5,450 equipment\n- **4 ton (48,000 BTU)**: $3,850-6,750 equipment\n- **5 ton (60,000 BTU)**: $4,450-8,250 equipment\n\n**Heat Pumps:**\n- **2 ton**: $3,450-6,250 equipment\n- **3 ton**: $4,250-7,850 equipment\n- **4 ton**: $5,450-9,750 equipment\n- **Variable speed**: Add 25-40% premium\n\n**Furnaces:**\n- **60,000 BTU (80% AFUE)**: $1,850-3,250\n- **80,000 BTU (90% AFUE)**: $2,450-4,750\n- **100,000 BTU (95% AFUE)**: $3,250-6,450\n- **Modulating units**: Add 30-50% premium\n\n### Commercial Equipment\n\n**Rooftop Units (RTU):**\n- **3-5 ton**: $4,850-8,750 per ton\n- **7.5-12.5 ton**: $3,850-6,750 per ton\n- **15-25 ton**: $2,850-5,250 per ton\n- **Variable refrigerant flow**: $5,450-9,850 per ton\n\n**Split Systems:**\n- **Condensing units**: $1,850-3,450 per ton\n- **Air handlers**: $1,250-2,850 per ton\n- **Controls and accessories**: $850-1,650 per ton\n\n## Ductwork Design and Costing\n\n### Ductwork Sizing Methods\n\n**Equal Friction Method:**\n- **Friction rate**: 0.08-0.15 inches per 100 feet\n- **Velocity limits**: 600-900 FPM in branches\n- **Main trunk**: 1000-1200 FPM maximum\n\n**Velocity Reduction Method:**\n- **Supply mains**: Start at 1000 FPM, reduce 150 FPM per branch\n- **Return ducts**: 600-800 FPM maximum\n- **Branch ducts**: 500-700 FPM maximum\n\n**Duct Sizing Example:**\n400 CFM branch requirement\n- **8\" round**: 570 FPM velocity (good)\n- **6\" round**: 1020 FPM velocity (too high)\n- **7\" round**: 780 FPM velocity (acceptable)\n\n### Sheet Metal Ductwork\n\n**Galvanized Steel Ductwork:**\n- **Rectangular**: $8.50-15.75 per sq ft\n- **Round**: $3.25-6.75 per linear foot\n- **Fittings**: $25-125 each (varies by size)\n- **Insulation**: $1.85-3.75 per sq ft\n\n**Ductwork Weight Calculations:**\n```\nWeight (lbs) = Perimeter (inches) × Length (feet) × 0.0217 × Gauge factor\n```\n\n**Labor Installation:**\n- **Straight runs**: $2.85-5.25 per linear foot\n- **Fittings**: $45-185 each\n- **Insulation**: $1.25-2.85 per sq ft\n- **Testing and balancing**: $0.25-0.75 per CFM\n\n### Flexible Ductwork\n\n**Flex Duct Applications:**\n- **Residential branches**: Most common use\n- **Short runs only**: 25 feet maximum recommended\n- **Proper support**: Every 4 feet maximum\n\n**Flex Duct Costs:**\n- **6\" insulated**: $2.85-4.25 per linear foot\n- **8\" insulated**: $3.85-5.75 per linear foot\n- **10\" insulated**: $4.85-7.25 per linear foot\n- **12\" insulated**: $5.85-8.75 per linear foot\n\n**Installation Requirements:**\n- **Proper stretching**: Avoid compression\n- **Support straps**: Fabric straps every 4 feet\n- **Connection**: Metal collars and mastic sealant\n- **Insulation protection**: Vapor barrier outward\n\n## Refrigerant Piping Systems\n\n### Line Set Calculations\n\n**Refrigerant Line Sizing:**\n- **Liquid line**: Based on capacity and refrigerant type\n- **Suction line**: Sized for velocity and oil return\n- **Line length limits**: Varies by manufacturer (150' typical)\n\n**Line Set Costs:**\n- **1/4\" liquid + 3/8\" suction**: $3.25-5.75 per foot\n- **3/8\" liquid + 5/8\" suction**: $4.25-7.25 per foot\n- **1/2\" liquid + 7/8\" suction**: $6.75-11.25 per foot\n- **Pre-insulated sets**: Add 15-25% premium\n\n### Installation Requirements\n\n**Refrigerant Piping Labor:**\n- **Line set installation**: $3.85-7.25 per linear foot\n- **Vacuum and test**: $125-285 per system\n- **Refrigerant charging**: $85-185 per pound\n- **Leak testing**: $185-385 per system\n\n**Code Requirements:**\n- **Pressure testing**: 1.5× operating pressure minimum\n- **Evacuation**: 500 microns or better\n- **Refrigerant recovery**: EPA certified technicians only\n- **Documentation**: Required for permits\n\n## Electrical and Controls\n\n### Electrical Requirements\n\n**Power Requirements:**\n- **Residential units**: 220V/240V single phase\n- **Small commercial**: 208V/230V three phase\n- **Large commercial**: 460V/480V three phase\n\n**Electrical Installation Costs:**\n- **Disconnect switch**: $125-285 installed\n- **Dedicated circuit**: $185-485 per circuit\n- **Thermostat wiring**: $125-285 per zone\n- **Control wiring**: $2.85-5.25 per linear foot\n\n### Control Systems\n\n**Thermostat Types:**\n- **Basic programmable**: $85-185 installed\n- **Smart thermostats**: $185-485 installed\n- **Commercial controls**: $485-1,285 per zone\n\n**Advanced Controls:**\n- **Zone control systems**: $485-1,285 per zone\n- **Building automation**: $2.85-8.50 per sq ft\n- **Variable speed controls**: $385-885 per unit\n- **Energy management**: $1,285-3,850 per system\n\n## Installation Labor Calculations\n\n### Residential Installation\n\n**Split System Installation:**\n- **Condenser placement**: 3-6 hours\n- **Air handler installation**: 4-8 hours\n- **Ductwork connections**: 2-4 hours\n- **Electrical connections**: 2-4 hours\n- **Startup and testing**: 2-3 hours\n- **Total**: 13-25 hours per system\n\n**Complete System Replacement:**\n- **Equipment removal**: 4-8 hours\n- **New installation**: 16-32 hours\n- **Ductwork modifications**: 8-16 hours\n- **Total project**: 2-4 days typical\n\n### Commercial Installation\n\n**Rooftop Unit Installation:**\n- **Crane rental**: $850-1,650 per day\n- **Rigging and setting**: 6-12 hours\n- **Connections**: 8-16 hours\n- **Testing and startup**: 4-8 hours\n\n**Ductwork Installation:**\n- **Main trunks**: 25-40 linear feet per day\n- **Branch ducts**: 40-60 linear feet per day\n- **Fittings and connections**: 15-25 per day\n- **Insulation**: 200-400 sq ft per day\n\n### Regional Labor Rates\n\n**HVAC Technician Rates:**\n- **High-cost markets**: $45-75 per hour\n- **Moderate markets**: $35-55 per hour\n- **Low-cost markets**: $25-40 per hour\n\n**Labor Loading Factors:**\n- **Workers compensation**: 15-25%\n- **Payroll taxes**: 7.65%\n- **Benefits**: 15-25%\n- **Tools and equipment**: 5-10%\n- **Total burden**: 140-170% of base wage\n\n## Permit and Code Requirements\n\n### Building Permits\n\n**Permit Costs:**\n- **Residential replacement**: $125-285\n- **New residential**: $185-485\n- **Commercial systems**: $385-850 base fee\n- **Plan review**: 50-75% of permit fee\n\n**Code Compliance:**\n- **Energy codes**: IECC or state standards\n- **Mechanical codes**: IMC or local amendments\n- **Electrical codes**: NEC requirements\n- **Refrigerant management**: EPA regulations\n\n### Inspection Requirements\n\n**Required Inspections:**\n1. **Rough-in**: Ductwork and electrical rough\n2. **Final**: Equipment installation and testing\n3. **Energy compliance**: Efficiency verification\n\n**Testing Requirements:**\n- **Duct leakage testing**: Residential energy codes\n- **System commissioning**: Commercial projects\n- **Refrigerant leak testing**: EPA requirements\n\n## Cost Estimation Best Practices\n\n### Comprehensive Estimates\n\n**Equipment Costs (40-50% of total):**\n- Primary HVAC equipment\n- Electrical components and controls\n- Refrigerant and startup materials\n- Warranty and service agreements\n\n**Installation Labor (30-40% of total):**\n- Equipment installation\n- Ductwork and piping\n- Electrical connections\n- Testing and commissioning\n\n**Materials and Accessories (15-25% of total):**\n- Ductwork and fittings\n- Refrigerant piping\n- Electrical materials\n- Insulation and sealants\n\n### Seasonal Considerations\n\n**Peak Season Pricing:**\n- **Summer**: High demand for cooling\n- **Fall**: Moderate demand and pricing\n- **Winter**: High demand for heating\n- **Spring**: Best pricing and availability\n\n**Weather Factors:**\n- **Emergency service**: 50-100% premium\n- **Extreme weather**: Scheduling delays\n- **Off-season installation**: 10-20% savings\n\n## Using CostFlowAI's HVAC Calculator\n\n### Automated Load Calculations\n\n**Our HVAC Pro Calculator provides:**\n- **Manual J load calculations** with climate data\n- **Equipment sizing recommendations** by efficiency level\n- **Ductwork design** with proper sizing\n- **Material takeoffs** with labor estimates\n- **Energy analysis** and operating cost projections\n\n### Professional Features\n\n**Code Compliance:**\n- Energy code requirements by location\n- Proper equipment sizing verification\n- Ductwork design standards\n- Electrical requirements calculation\n\n**Cost Analysis:**\n- Equipment options comparison\n- Energy efficiency payback analysis\n- Maintenance cost projections\n- Total cost of ownership calculations\n\n## Conclusion\n\nHVAC cost estimation requires understanding of load calculations, equipment selection, and installation methods. By using proper sizing methods and accounting for regional factors, you can create accurate estimates that ensure comfort, efficiency, and profitability.\n\n**Ready to streamline your HVAC estimates?** Try our [HVAC Pro Calculator](/calculators) for automated load calculations and professional system design.\n\n---\n\n*Next week: Masonry and brick calculation guide covering material quantities, mortar calculations, and labor productivity rates.*","size_bytes":10529},"content/posts/masonry-brick-calculation-guide.md":{"content":"---\ntitle: Masonry and Brick Calculation Guide - Materials, Mortar, and Labor Estimation\nslug: masonry-brick-calculation-guide\ndate: 2024-01-11\ntags: [masonry, exterior, estimation, calculators]\ndescription: Complete masonry estimation guide covering brick calculations, mortar requirements, joint sizing, labor rates, and regional cost considerations.\n---\n\n# Masonry and Brick Calculation Guide\n\nMasonry work requires precise material calculations and understanding of traditional construction methods. Whether you're building a residential fireplace or a commercial veneer wall, accurate estimation of bricks, mortar, and labor ensures structural integrity and project profitability.\n\n## Brick Calculation Fundamentals\n\n### Standard Brick Dimensions\n\n**Modular Brick (Most Common):**\n- **Nominal size**: 4\" × 2-2/3\" × 8\"\n- **Actual size**: 3-5/8\" × 2-1/4\" × 7-5/8\"\n- **Coverage**: 6.75 bricks per sq ft (with mortar joints)\n\n**Other Common Sizes:**\n- **Standard brick**: 2-1/4\" × 3-3/4\" × 8\" (6.55 per sq ft)\n- **Engineer brick**: 2-13/16\" × 3-5/8\" × 7-5/8\" (5.76 per sq ft)\n- **Jumbo brick**: 2-3/4\" × 3-5/8\" × 7-5/8\" (5.76 per sq ft)\n- **Norman brick**: 2-1/4\" × 3-5/8\" × 11-5/8\" (4.5 per sq ft)\n\n### Wall Area Calculations\n\n**Basic Wall Area:**\n```\nNet Wall Area = Gross Wall Area - Openings\n```\n\n**Opening Deductions:**\n- **Standard door**: 20 sq ft\n- **Standard window**: 15 sq ft (varies by size)\n- **Garage door**: 70-100 sq ft\n- **Large commercial openings**: Measure individually\n\n**Waste Factor Guidelines:**\n- **Straight walls**: 5%\n- **Complex layouts**: 10%\n- **Detailed work**: 15%\n- **Restoration work**: 20%\n\n### Brick Quantity Example\n\n**Calculate for 30' × 8' wall with one 3' × 7' door:**\n1. Gross area: 30 × 8 = 240 sq ft\n2. Door opening: 3 × 7 = 21 sq ft\n3. Net area: 240 - 21 = 219 sq ft\n4. Bricks needed: 219 × 6.75 = 1,478 bricks\n5. With 10% waste: 1,478 × 1.10 = 1,626 bricks\n\n## Mortar Calculations\n\n### Mortar Types and Specifications\n\n**ASTM Mortar Types:**\n- **Type M**: High strength (2,500 PSI), below grade\n- **Type S**: Medium strength (1,800 PSI), general use\n- **Type N**: Medium strength (750 PSI), above grade residential\n- **Type O**: Low strength (350 PSI), interior non-load bearing\n\n**Mortar Joint Sizes:**\n- **Bed joints**: 3/8\" standard thickness\n- **Head joints**: 3/8\" standard thickness\n- **Concave joints**: Most weather-resistant\n- **V-joints**: Good water shedding\n\n### Mortar Quantity Calculations\n\n**Coverage Rates (per 1,000 bricks):**\n- **3/8\" joints**: 18-20 cubic feet of mortar\n- **1/2\" joints**: 25-28 cubic feet of mortar\n- **Custom joint sizes**: Adjust proportionally\n\n**Mortar Mix Ratios:**\n- **Type N**: 1 cement : 1 lime : 6 sand\n- **Type S**: 1 cement : 1/2 lime : 4.5 sand\n- **Type M**: 1 cement : 1/4 lime : 3 sand\n\n**Material Requirements per Cubic Foot:**\n- **Portland cement**: 0.33 bags (94 lb bags)\n- **Masonry cement**: 0.5 bags (70 lb bags)\n- **Lime**: Varies by mortar type\n- **Sand**: 1.0-1.15 cubic feet\n\n### Mortar Material Costs\n\n**Cement and Lime:**\n- **Portland cement**: $8.50-12.75 per 94 lb bag\n- **Masonry cement**: $9.25-14.50 per 70 lb bag\n- **Hydrated lime**: $12.50-18.75 per 50 lb bag\n\n**Sand Requirements:**\n- **Masonry sand**: $35-55 per ton delivered\n- **Coverage**: 1 ton covers ~750-900 bricks\n- **Quality**: Clean, well-graded, proper gradation\n\n## Block Masonry Calculations\n\n### Concrete Masonry Units (CMU)\n\n**Standard CMU Sizes:**\n- **8\" × 8\" × 16\"**: 1.125 blocks per sq ft\n- **6\" × 8\" × 16\"**: 1.125 blocks per sq ft\n- **4\" × 8\" × 16\"**: 1.125 blocks per sq ft\n- **12\" × 8\" × 16\"**: 1.125 blocks per sq ft\n\n**Specialty Units:**\n- **Corner blocks**: 10% of total blocks\n- **Bond beam blocks**: Linear feet of bond beams\n- **Lintel blocks**: Width of openings + 16\"\n- **Pilaster blocks**: Count individual units\n\n### CMU Mortar Requirements\n\n**Mortar Coverage:**\n- **8\" CMU**: 2.5-3.0 cubic feet per 100 blocks\n- **Face shell bedding**: Standard application method\n- **Full bedding**: Double mortar quantities\n- **Reinforced walls**: Include grout quantities\n\n**Grout Requirements:**\n- **Fine grout**: $125-185 per cubic yard\n- **Coarse grout**: $115-165 per cubic yard\n- **Coverage**: 1 cubic yard fills ~65 8\" cells\n- **Reinforcement**: Add rebar costs\n\n## Natural Stone Calculations\n\n### Stone Types and Coverage\n\n**Fieldstone (Random sizes):**\n- **Veneer application**: 35-45 sq ft per ton\n- **Structural walls**: 25-35 sq ft per ton\n- **Thick stones**: 15-25 sq ft per ton\n\n**Cut Stone:**\n- **Ashlar pattern**: 40-50 sq ft per ton\n- **Dimensional stone**: Calculate by piece\n- **Flagstone**: 100-120 sq ft per ton (1\" thick)\n\n**Stone Costs by Type:**\n- **Fieldstone**: $185-385 per ton\n- **Limestone**: $285-485 per ton\n- **Sandstone**: $325-585 per ton\n- **Granite**: $485-885 per ton\n- **Bluestone**: $385-685 per ton\n\n### Stone Setting Materials\n\n**Stone Setting Mortar:**\n- **Coverage**: 25-35 sq ft per bag\n- **Cost**: $12.50-18.75 per 50 lb bag\n- **Application**: Full bed or spot bedding\n\n**Pointing Mortar:**\n- **Coverage**: 75-100 sq ft per bag\n- **Cost**: $14.50-21.75 per 50 lb bag\n- **Special types**: Hydraulic lime for restoration\n\n## Labor Cost Calculations\n\n### Mason Productivity Rates\n\n**Brick Installation:**\n- **Experienced mason**: 300-500 bricks per day\n- **Average mason**: 200-350 bricks per day\n- **Complex work**: 150-250 bricks per day\n- **Restoration**: 100-200 bricks per day\n\n**Block Installation:**\n- **8\" CMU**: 125-175 blocks per day\n- **12\" CMU**: 100-150 blocks per day\n- **Reinforced walls**: 75-125 blocks per day\n- **Detailed work**: 50-100 blocks per day\n\n**Stone Installation:**\n- **Fieldstone**: 15-30 sq ft per day\n- **Cut stone**: 25-45 sq ft per day\n- **Flagstone**: 45-75 sq ft per day\n- **Complex patterns**: 10-25 sq ft per day\n\n### Regional Labor Rates\n\n**Journeyman Mason Rates:**\n- **High-cost markets**: $35-65 per hour\n- **Moderate markets**: $28-45 per hour\n- **Low-cost markets**: $22-35 per hour\n\n**Helper/Tender Rates:**\n- **High-cost markets**: $22-35 per hour\n- **Moderate markets**: $18-28 per hour\n- **Low-cost markets**: $15-22 per hour\n\n**Crew Composition:**\n- **1 mason + 1 tender**: Standard ratio\n- **Large projects**: 2-3 masons + 1-2 tenders\n- **Complex work**: 1 mason + 1 tender (detailed work)\n\n### Labor Loading Factors\n\n**Additional Labor Costs:**\n- **Workers compensation**: 15-25%\n- **General liability**: 8-12%\n- **Payroll taxes**: 7.65%\n- **Benefits**: 15-25%\n- **Equipment/tools**: 5-10%\n- **Total burden**: 150-180% of base wage\n\n## Specialty Masonry Applications\n\n### Fireplace and Chimney Work\n\n**Fireplace Calculations:**\n- **Firebox**: 75-125 firebricks + refractory mortar\n- **Hearth**: Calculate by sq ft, special materials\n- **Damper and accessories**: $185-485 per unit\n- **Flue liner**: $8.50-15.75 per linear foot\n\n**Chimney Construction:**\n- **Foundation**: Reinforced concrete pad\n- **Block structure**: Standard CMU to roofline\n- **Brick veneer**: Decorative exterior finish\n- **Cap and crown**: Concrete or stone topping\n\n### Retaining Walls\n\n**Segmental Retaining Wall Blocks:**\n- **Standard blocks**: $3.85-8.50 each\n- **Coverage**: 8-12 sq ft per block (varies by size)\n- **Caps**: $6.50-14.75 per linear foot\n- **Geogrid**: $0.85-1.85 per sq ft\n\n**Natural Stone Retaining Walls:**\n- **Wall stone**: 25-35 sq ft per ton\n- **Base preparation**: $2.85-5.75 per sq ft\n- **Drainage**: $1.85-3.85 per linear foot\n- **Labor**: $15.75-28.50 per sq ft\n\n### Restoration and Repair Work\n\n**Repointing Costs:**\n- **Standard repointing**: $8.50-18.75 per sq ft\n- **Historical restoration**: $15.75-35.50 per sq ft\n- **Specialty mortars**: Add 50-100% material cost\n- **Scaffolding**: $3.85-7.25 per sq ft per month\n\n**Brick Replacement:**\n- **Matching brick**: $0.85-2.85 per brick\n- **Removal and replacement**: $5.75-12.50 per brick\n- **Structural repair**: $185-485 per sq ft\n- **Cleaning**: $2.85-8.50 per sq ft\n\n## Equipment and Tool Requirements\n\n### Masonry Tools\n\n**Basic Mason Tools:**\n- **Trowels**: $25-85 each\n- **Levels**: $45-185 each\n- **Lines and blocks**: $35-125 per set\n- **Jointing tools**: $15-45 each\n\n**Power Tools:**\n- **Masonry saw**: $185-485 rental per day\n- **Mixer**: $85-185 rental per day\n- **Scaffolding**: $2.85-5.75 per sq ft per month\n- **Hoists**: $125-285 rental per day\n\n### Safety Equipment\n\n**Fall Protection:**\n- **Scaffolding systems**: $3.85-7.25 per sq ft\n- **Personal fall arrest**: $185-385 per worker\n- **Safety training**: $85-185 per worker\n- **Insurance requirements**: Varies by project\n\n## Cost Estimation Best Practices\n\n### Material Takeoff Process\n\n**Systematic Approach:**\n1. **Calculate wall areas** with opening deductions\n2. **Determine brick/block quantities** with waste factors\n3. **Calculate mortar requirements** by mortar type\n4. **Include accessories** (lintels, flashing, ties)\n5. **Add labor hours** based on productivity rates\n\n**Common Oversights:**\n- **Scaffolding costs**: Often underestimated\n- **Site access**: Affects material delivery\n- **Weather delays**: Factor seasonal considerations\n- **Cleanup**: Disposal and site restoration\n\n### Regional Cost Variations\n\n**Material Costs:**\n- **Local vs. imported**: Significant cost differences\n- **Transportation**: Major factor for heavy materials\n- **Availability**: Affects delivery schedules\n- **Quality requirements**: Affects material selection\n\n**Labor Considerations:**\n- **Union vs. open shop**: 25-40% rate differences\n- **Skill availability**: Affects project scheduling\n- **Apprenticeship programs**: Regional variations\n- **Prevailing wages**: Public projects\n\n## Using CostFlowAI's Masonry Calculator\n\n### Automated Calculations\n\n**Our Masonry Pro Calculator provides:**\n- **Brick and block quantities** with waste factors\n- **Mortar calculations** by type and joint size\n- **Labor estimation** with regional adjustments\n- **Material costs** with current pricing\n- **Professional reports** for client presentation\n\n### Advanced Features\n\n**Pattern Recognition:**\n- Common bond patterns\n- Waste factor adjustments\n- Corner and end calculations\n- Opening reinforcement requirements\n\n**Cost Analysis:**\n- Material option comparisons\n- Labor productivity adjustments\n- Equipment and scaffolding costs\n- Total project cost breakdowns\n\n## Conclusion\n\nMasonry cost estimation requires understanding of traditional construction methods, material properties, and skilled labor requirements. By using systematic calculation approaches and accounting for project-specific conditions, you can create accurate estimates that ensure structural integrity and profitability.\n\n**Ready to streamline your masonry estimates?** Try our [Masonry Pro Calculator](/calculators) for automated material calculations and professional documentation.\n\n---\n\n*Coming next: Framing lumber calculation guide covering dimensional lumber, engineered lumber, and structural fastener requirements.*","size_bytes":10912},"content/posts/plumbing-rough-in-guide.md":{"content":"---\ntitle: Plumbing Rough-In Calculation Guide - Pipe Sizing, Materials, and Cost Estimation\nslug: plumbing-rough-in-guide\ndate: 2024-01-16\ntags: [plumbing, MEP, estimation, calculators]\ndescription: Complete guide to plumbing rough-in calculations covering fixture units, pipe sizing, DWV systems, water service, and regional cost factors.\n---\n\n# Plumbing Rough-In Calculation Guide\n\nPlumbing rough-in estimation requires understanding of hydraulic principles, code compliance, and material specifications. Whether you're plumbing a residential bathroom or a commercial office building, accurate calculations ensure adequate water pressure, proper drainage, and code compliance.\n\n## Water Supply System Calculations\n\n### Fixture Unit Method\n\n**Water Supply Fixture Units (WSFU):**\n- **Water closet (tank)**: 2.5 WSFU\n- **Water closet (flush valve)**: 35 WSFU\n- **Lavatory**: 1.0 WSFU\n- **Kitchen sink**: 1.5 WSFU\n- **Laundry tub**: 1.5 WSFU\n- **Bathtub**: 2.0 WSFU\n- **Shower head**: 2.0 WSFU\n- **Dishwasher**: 1.5 WSFU\n- **Clothes washer**: 2.25 WSFU\n\n**Total Demand Calculation:**\n```\nTotal WSFU = Sum of all fixture units in building\nFlow Rate (GPM) = WSFU × Demand Factor (from code tables)\n```\n\n### Pipe Sizing for Water Distribution\n\n**Velocity Limitations:**\n- **Maximum velocity**: 8 feet per second\n- **Recommended velocity**: 5-7 feet per second\n- **Minimum pressure**: 15 PSI at fixtures\n\n**Pipe Size Requirements:**\n- **3/4\" main**: Up to 10 WSFU\n- **1\" main**: 10-30 WSFU\n- **1-1/4\" main**: 30-60 WSFU\n- **1-1/2\" main**: 60-100 WSFU\n- **2\" main**: 100-200 WSFU\n\n### Water Service Sizing\n\n**Service Line Calculation:**\n```\nService size = Building demand + Irrigation + Pool equipment + Fire protection\n```\n\n**Typical Service Sizes:**\n- **Residential**: 3/4\" to 1\" copper or HDPE\n- **Small commercial**: 1\" to 1-1/2\"\n- **Large commercial**: 2\" to 4\"\n- **Multi-story buildings**: Engineer-designed systems\n\n## Drain-Waste-Vent (DWV) System\n\n### Drainage Fixture Units (DFU)\n\n**Common DFU Values:**\n- **Water closet**: 4 DFU\n- **Lavatory**: 1 DFU\n- **Kitchen sink**: 2 DFU\n- **Bathtub**: 2 DFU\n- **Shower**: 2 DFU\n- **Floor drain**: 1 DFU\n- **Laundry tub**: 2 DFU\n- **Dishwasher**: 2 DFU\n\n### Drain Pipe Sizing\n\n**Horizontal Drain Capacity:**\n- **1-1/4\" drain**: 1 DFU maximum\n- **1-1/2\" drain**: 3 DFU maximum\n- **2\" drain**: 6 DFU maximum\n- **3\" drain**: 20 DFU maximum\n- **4\" drain**: 160 DFU maximum\n\n**Vertical Stack Capacity:**\n- **1-1/4\" stack**: 2 DFU maximum\n- **1-1/2\" stack**: 4 DFU maximum\n- **2\" stack**: 10 DFU maximum\n- **3\" stack**: 48 DFU maximum\n- **4\" stack**: 240 DFU maximum\n\n### Vent System Requirements\n\n**Vent Sizing Rules:**\n- **Individual vents**: Minimum 1-1/4\" diameter\n- **Common vents**: Size for combined fixture load\n- **Stack vents**: Same size as soil stack\n- **Vent headers**: Size for total DFU load\n\n**Vent Pipe Capacity:**\n- **1-1/4\" vent**: 1 DFU\n- **1-1/2\" vent**: 8 DFU\n- **2\" vent**: 24 DFU\n- **3\" vent**: 84 DFU\n\n## Material Specifications and Costs\n\n### Water Supply Piping\n\n**Type L Copper (Most Common):**\n- **1/2\"**: $2.85-4.25 per foot\n- **3/4\"**: $4.25-6.75 per foot\n- **1\"**: $6.75-9.85 per foot\n- **1-1/4\"**: $8.95-13.25 per foot\n- **1-1/2\"**: $11.75-17.25 per foot\n\n**PEX Tubing (Residential):**\n- **1/2\"**: $0.85-1.35 per foot\n- **3/4\"**: $1.25-1.95 per foot\n- **1\"**: $1.95-2.85 per foot\n- **Manifold systems**: $185-385 per bathroom\n\n**CPVC (Warm climates):**\n- **1/2\"**: $0.65-0.95 per foot\n- **3/4\"**: $0.95-1.45 per foot\n- **1\"**: $1.45-2.15 per foot\n\n### Drainage Piping\n\n**ABS Pipe (Black plastic):**\n- **1-1/2\"**: $1.25-1.85 per foot\n- **2\"**: $1.65-2.45 per foot\n- **3\"**: $2.85-4.25 per foot\n- **4\"**: $4.25-6.25 per foot\n\n**PVC DWV Pipe (White):**\n- **1-1/2\"**: $1.35-1.95 per foot\n- **2\"**: $1.75-2.65 per foot\n- **3\"**: $3.15-4.65 per foot\n- **4\"**: $4.65-6.85 per foot\n\n**Cast Iron (Commercial/high-rise):**\n- **2\"**: $8.95-13.25 per foot\n- **3\"**: $12.75-18.95 per foot\n- **4\"**: $16.85-24.75 per foot\n\n### Fittings and Accessories\n\n**Copper Fittings:**\n- **1/2\" elbows**: $1.25-2.15 each\n- **3/4\" elbows**: $2.15-3.85 each\n- **Tees**: 1.5× elbow cost\n- **Reducers**: $3.25-6.85 each\n\n**Plastic Fittings:**\n- **ABS/PVC elbows**: $0.85-2.45 each\n- **Wyes and tees**: $1.45-4.25 each\n- **Cleanouts**: $4.25-8.95 each\n\n## Labor Cost Calculations\n\n### Installation Productivity Rates\n\n**Water Supply Rough-In:**\n- **Residential bathroom**: 8-12 hours\n- **Kitchen rough-in**: 6-10 hours\n- **Laundry room**: 4-6 hours\n- **Full house (3 bath)**: 24-40 hours\n\n**DWV System Installation:**\n- **Bathroom group**: 6-10 hours\n- **Kitchen drainage**: 4-8 hours\n- **Main stack installation**: 8-16 hours\n- **Underground drainage**: 12-20 hours per 100 feet\n\n### Regional Labor Rates\n\n**Journeyman Plumber Rates:**\n- **High-cost markets**: $55-85 per hour\n- **Moderate markets**: $42-65 per hour\n- **Low-cost markets**: $32-50 per hour\n\n**Apprentice Rates:**\n- **2nd year**: 50% of journeyman rate\n- **3rd year**: 65% of journeyman rate\n- **4th year**: 75% of journeyman rate\n\n### Labor Loading Factors\n\n**Additional Labor Costs:**\n- **Workers compensation**: 12-25%\n- **General liability**: 8-15%\n- **Payroll taxes**: 7.65%\n- **Benefits and vacation**: 15-25%\n- **Total burden**: 135-165% of base wage\n\n## Rough-In Installation Phases\n\n### Underground Plumbing\n\n**Excavation Requirements:**\n- **Minimum depth**: Below frost line + 6\"\n- **Bedding material**: Sand or pea gravel\n- **Backfill**: Compacted in 8\" lifts\n- **Testing**: Hydrostatic or air test required\n\n**Installation Sequence:**\n1. **Layout and marking**: Utility location service\n2. **Excavation**: Hand dig near utilities\n3. **Bedding preparation**: Level grade and compact\n4. **Pipe installation**: Proper grade (1/4\" per foot minimum)\n5. **Testing**: Before backfill\n6. **Backfill**: Properly compacted material\n\n### Above-Grade Rough-In\n\n**Framing Coordination:**\n- **Soil stack**: 4\" minimum wall thickness\n- **Supply lines**: Avoid exterior walls in cold climates\n- **Horizontal runs**: Maintain proper slope\n- **Support requirements**: Every 6-10 feet maximum\n\n**Installation Sequence:**\n1. **Stack installation**: Main vertical runs\n2. **Branch installation**: Horizontal runs to fixtures\n3. **Vent system**: Complete to roof\n4. **Water distribution**: Hot and cold supplies\n5. **Testing**: Water test at 150 PSI, DWV at 5 PSI\n6. **Inspection**: Before concealment\n\n## Fixture Rough-In Requirements\n\n### Bathroom Fixtures\n\n**Water Closet Rough-In:**\n- **Supply**: 1/2\" copper or PEX to 6\" left of centerline\n- **Drain**: 3\" or 4\" pipe, centerline 12\" from wall\n- **Height**: Flange level with finished floor\n- **Vent**: Within 6 feet of trap\n\n**Lavatory Rough-In:**\n- **Supply**: 1/2\" hot and cold, 4\" centers\n- **Supply height**: 21\" above finished floor\n- **Drain**: 1-1/4\" drain at 16-20\" height\n- **Shutoffs**: Individual stops required\n\n**Bathtub Rough-In:**\n- **Supply**: 1/2\" hot and cold to valve\n- **Valve height**: 28\" above finished floor\n- **Spout height**: 4\" above tub rim\n- **Drain**: 1-1/2\" trap with overflow\n\n### Kitchen Fixtures\n\n**Kitchen Sink Rough-In:**\n- **Supply**: 1/2\" hot and cold, shutoffs under sink\n- **Supply height**: 18-20\" above finished floor\n- **Drain**: 1-1/2\" minimum, disposer connection\n- **Vent**: Individual or common vent\n\n**Dishwasher Connection:**\n- **Supply**: 1/2\" hot water with shutoff\n- **Drain**: Connect to disposer or sink drain\n- **Electrical**: 240V dedicated circuit\n- **Space**: 24\" wide rough opening\n\n## Code Compliance and Testing\n\n### Pressure Testing\n\n**Water System Test:**\n- **Test pressure**: 150 PSI or 50 PSI above working pressure\n- **Duration**: Minimum 15 minutes\n- **Acceptance**: No visible leaks or pressure drop\n- **Documentation**: Required before inspection\n\n**DWV System Test:**\n- **Water test**: Fill to highest fixture level\n- **Air test**: 5 PSI for 15 minutes\n- **Acceptance**: No pressure loss or leaks\n- **Smoke test**: Alternative for DWV systems\n\n### Permit and Inspection Requirements\n\n**Permit Costs:**\n- **Residential**: $125-285 per project\n- **Commercial**: $285-485 base + fixture count\n- **Remodel/addition**: $85-185\n- **Service line**: $65-145\n\n**Required Inspections:**\n1. **Underground**: Before backfill\n2. **Rough-in**: Before concealment\n3. **Final**: After fixture installation\n4. **Backflow prevention**: If required\n\n## Cost Estimation Best Practices\n\n### Material Takeoff Methods\n\n**Systematic Approach:**\n1. **Count fixtures**: By type and location\n2. **Calculate pipe runs**: Supply and drainage\n3. **Size pipes**: Based on fixture units\n4. **Count fittings**: Elbows, tees, reducers\n5. **Add accessories**: Hangers, straps, cleanouts\n\n**Waste Factor Guidelines:**\n- **Straight runs**: 5-10%\n- **Complex piping**: 15-20%\n- **Fittings**: 10-15%\n- **First-time estimator**: 20-25%\n\n### Regional Cost Variations\n\n**Material Cost Factors:**\n- **Urban areas**: Standard pricing\n- **Rural areas**: 15-25% higher due to freight\n- **Coastal areas**: Corrosion-resistant materials required\n- **Cold climates**: Insulation and freeze protection\n\n**Labor Cost Factors:**\n- **Union vs. open shop**: 25-40% difference\n- **Permit complexity**: Affects inspection time\n- **Building access**: Affects productivity\n- **Project timing**: Rush jobs command premium\n\n## Using CostFlowAI's Plumbing Calculator\n\n### Automated Calculations\n\n**Our Plumbing Pro Calculator provides:**\n- **Fixture unit calculations** with code compliance\n- **Pipe sizing recommendations** for supply and DWV\n- **Material takeoffs** with waste factors\n- **Labor estimation** by installation phase\n- **Regional cost adjustments** for accurate pricing\n\n### Advanced Features\n\n**Code Compliance Checking:**\n- Automatic fixture unit tabulation\n- Pipe sizing verification\n- Vent system requirements\n- Trap arm length validation\n\n**Professional Documentation:**\n- Detailed material lists with specifications\n- Labor breakdown by trade phase\n- Code compliance documentation\n- Professional PDF reports for permits\n\n## Conclusion\n\nPlumbing rough-in estimation requires understanding of hydraulic principles, code requirements, and installation methods. By using systematic calculation approaches and accounting for regional factors, you can create accurate estimates that ensure code compliance and profitability.\n\n**Ready to simplify your plumbing estimates?** Try our [Plumbing Pro Calculator](/calculators) for automated fixture unit calculations and professional documentation.\n\n---\n\n*Next week: Flooring cost estimation methods covering material calculations, subfloor preparation, installation labor, and finish selection considerations.*","size_bytes":10634},"content/posts/roofing-cost-estimation.md":{"content":"---\ntitle: Complete Roofing Cost Estimation Guide - Materials, Labor, and Pricing Factors\nslug: roofing-cost-estimation\ndate: 2024-01-17\ntags: [roofing, exterior, estimation, calculators]\ndescription: Master roofing cost estimation with comprehensive coverage of material calculations, labor rates, waste factors, and regional pricing considerations.\n---\n\n# Complete Roofing Cost Estimation Guide\n\nRoofing projects require precise estimation due to safety considerations, weather dependency, and material costs. Whether you're estimating a simple shingle replacement or a complex commercial membrane system, accurate calculations ensure profitability and successful project completion.\n\n## Roof Area Calculations\n\n### Basic Measurement Methods\n\n**Simple Gable Roof:**\n```\nRoof Area = Building Area × Roof Factor\n```\n\n**Roof Factor by Pitch:**\n- **3/12 pitch**: 1.031 factor\n- **4/12 pitch**: 1.054 factor\n- **6/12 pitch**: 1.118 factor\n- **8/12 pitch**: 1.202 factor\n- **10/12 pitch**: 1.302 factor\n- **12/12 pitch**: 1.414 factor\n\n**Complex Roof Calculation:**\n```\nTotal Area = Sum of all roof planes + Dormers + Eaves + Rakes\n```\n\n### Advanced Measurement Techniques\n\n**Hip Roof Calculations:**\n- Main roof area using standard factors\n- Hip ridge length: Building diagonal × 0.5\n- Hip rafter length: Diagonal × roof factor\n\n**Dormer Additions:**\n- Front face area\n- Two side areas (triangular)\n- Additional ridge and valley footage\n\n**Example Calculation:**\n30' × 40' house with 6/12 pitch\n- Building area: 1,200 sq ft\n- Roof factor: 1.118\n- Roof area: 1,200 × 1.118 = 1,342 sq ft\n\n## Material Calculations by Roofing Type\n\n### Asphalt Shingles\n\n**Coverage Rates:**\n- **3-tab shingles**: 33.3 sq ft per bundle (3 bundles = 1 square)\n- **Architectural shingles**: 32.8 sq ft per bundle\n- **Premium shingles**: 25-33 sq ft per bundle\n\n**Material Requirements:**\n```\nShingle bundles = (Roof area ÷ Bundle coverage) × Waste factor\n```\n\n**Waste Factors:**\n- **Simple gable**: 10%\n- **Hip roof**: 15%\n- **Complex roof**: 20%\n- **Cut-up roof**: 25%\n\n**Accessory Materials:**\n- **Starter strip**: Linear feet of eaves + rakes\n- **Ridge cap**: Linear feet of ridge and hips\n- **Valley material**: Linear feet of valleys × 3 feet wide\n- **Drip edge**: Linear feet of eaves and rakes\n\n### Metal Roofing\n\n**Panel Coverage:**\n- **Standing seam**: 12\"-24\" effective width panels\n- **Corrugated**: 26\"-36\" effective width\n- **Tile profile**: Varies by manufacturer\n\n**Calculation Method:**\n```\nPanels needed = Roof area ÷ Panel effective coverage\nRound up to whole panels\n```\n\n**Fastener Requirements:**\n- **Exposed fastener**: 1.5-2.0 screws per sq ft\n- **Standing seam**: Clips every 12\"-18\" on center\n- **End laps**: 6\" minimum overlap\n\n### Tile Roofing\n\n**Coverage Rates:**\n- **Concrete tile**: 86-90 tiles per square\n- **Clay tile**: 90-110 tiles per square (varies by profile)\n- **Slate**: 180-200 pieces per square (varies by size)\n\n**Support Requirements:**\n- **Battens**: Required for tile installation\n- **Underlayment**: Premium synthetic required\n- **Hip and ridge**: Special tiles, count linear feet\n\n### Membrane Roofing (Commercial)\n\n**EPDM/TPO Single Ply:**\n- **Membrane**: Roof area + 15% waste\n- **Adhesive**: 1-2 gallons per 100 sq ft\n- **Flashing**: Linear feet of penetrations and edges\n- **Insulation**: Roof area with 5% waste\n\n**Modified Bitumen:**\n- **Base sheet**: Roof area + 10%\n- **Cap sheet**: Roof area + 15%\n- **Primer**: 1 gallon per 200-300 sq ft\n- **Torch fuel**: 2-3 tanks per square\n\n## Underlayment and Deck Materials\n\n### Roofing Underlayment\n\n**Felt Paper:**\n- **15# felt**: 400 sq ft per roll, $25-35 per roll\n- **30# felt**: 200 sq ft per roll, $30-45 per roll\n\n**Synthetic Underlayment:**\n- **Standard synthetic**: 1,000 sq ft per roll, $85-125\n- **Premium synthetic**: 1,000 sq ft per roll, $125-185\n- **Self-adhering**: 200 sq ft per roll, $95-145\n\n**Ice and Water Shield:**\n- **Application areas**: Eaves, valleys, penetrations\n- **Coverage**: 200 sq ft per roll\n- **Cost**: $85-125 per roll\n\n### Roof Decking\n\n**OSB Sheathing:**\n- **7/16\" OSB**: $24-32 per 4' × 8' sheet (32 sq ft)\n- **1/2\" OSB**: $28-38 per sheet\n- **5/8\" OSB**: $32-45 per sheet\n\n**Plywood Sheathing:**\n- **1/2\" CDX**: $35-48 per sheet\n- **5/8\" CDX**: $42-58 per sheet\n- **3/4\" CDX**: $52-72 per sheet\n\n## Labor Cost Calculations\n\n### Installation Productivity Rates\n\n**Asphalt Shingles:**\n- **Tear-off**: 5-8 squares per crew per day\n- **New installation**: 15-25 squares per crew per day\n- **Repairs**: 3-6 squares per crew per day\n\n**Metal Roofing:**\n- **Standing seam**: 8-15 squares per crew per day\n- **Corrugated**: 12-20 squares per crew per day\n- **Complex details**: Reduce productivity 25-40%\n\n**Tile Installation:**\n- **Concrete tile**: 6-12 squares per crew per day\n- **Clay tile**: 5-10 squares per crew per day\n- **Slate**: 3-8 squares per crew per day\n\n### Regional Labor Rates\n\n**Per Square Labor Rates:**\n- **High-cost markets**: $350-550 per square\n- **Moderate markets**: $250-400 per square\n- **Low-cost markets**: $175-300 per square\n\n**Specialty Work Premiums:**\n- **Steep slope (>8/12)**: Add 25-40%\n- **High buildings**: Add 30-50%\n- **Historical restoration**: Add 50-100%\n- **Complex cuts**: Add 20-35%\n\n### Crew Composition and Costs\n\n**Standard Roofing Crew (3-4 workers):**\n- **Foreman**: $28-45 per hour\n- **Experienced roofers**: $22-38 per hour\n- **Helpers/laborers**: $16-28 per hour\n\n**Labor Burden (additional costs):**\n- **Workers compensation**: 25-40% (high-risk trade)\n- **General liability**: 8-15%\n- **Payroll taxes**: 7.65%\n- **Benefits**: 15-25%\n\n## Material Pricing by Category\n\n### Asphalt Shingle Costs\n\n**3-Tab Shingles:**\n- **Basic grade**: $85-125 per square\n- **Mid-grade**: $125-165 per square\n- **Premium**: $165-225 per square\n\n**Architectural Shingles:**\n- **Standard**: $185-275 per square\n- **Designer**: $275-385 per square\n- **Luxury**: $385-550 per square\n\n### Metal Roofing Costs\n\n**Steel Panels:**\n- **Galvanized**: $275-425 per square\n- **Galvalume**: $325-475 per square\n- **Painted**: $425-625 per square\n\n**Aluminum Panels:**\n- **Mill finish**: $485-675 per square\n- **Painted**: $575-825 per square\n\n**Copper (Premium):**\n- **Standing seam**: $1,250-1,850 per square\n- **Soldered seam**: $1,650-2,450 per square\n\n### Specialty Material Costs\n\n**Clay Tile:**\n- **Mission style**: $485-825 per square\n- **French style**: $625-1,125 per square\n- **Custom profiles**: $825-1,485 per square\n\n**Concrete Tile:**\n- **Standard profiles**: $325-485 per square\n- **Designer styles**: $485-725 per square\n- **Premium finishes**: $725-1,125 per square\n\n**Natural Slate:**\n- **Welsh slate**: $1,485-2,250 per square\n- **Vermont slate**: $1,125-1,685 per square\n- **Salvaged slate**: $825-1,285 per square\n\n## Special Considerations\n\n### Weather and Seasonal Factors\n\n**Seasonal Pricing:**\n- **Peak season** (spring/summer): Standard rates\n- **Fall installation**: 5-10% premium for rush\n- **Winter work**: 15-25% premium for conditions\n- **Emergency repairs**: 50-100% premium\n\n**Weather Protection:**\n- **Tarping costs**: $2-4 per sq ft during delays\n- **Temporary measures**: $125-275 per day\n- **Schedule delays**: Factor 10-15% contingency\n\n### Code and Permit Requirements\n\n**Building Permit Costs:**\n- **Residential**: $125-385 per project\n- **Commercial**: $285-650 base + per sq ft\n- **Historical districts**: Additional fees possible\n\n**Code Upgrade Requirements:**\n- **Underlayment upgrades**: Add $85-145 per square\n- **Structural reinforcement**: $12-28 per sq ft\n- **Insulation requirements**: $3-8 per sq ft\n\n### Disposal and Cleanup\n\n**Tear-off Disposal:**\n- **Asphalt shingles**: $85-145 per ton\n- **Slate/tile**: $125-225 per ton\n- **Metal roofing**: Scrap value offset\n- **Dumpster rental**: $285-485 per 30-yard\n\n**Cleanup Requirements:**\n- **Magnetic sweep**: $125-185 per project\n- **General cleanup**: 2-4 hours crew time\n- **Property protection**: $185-325 per project\n\n## Cost Estimation Best Practices\n\n### Accurate Measurement\n\n**Field Verification:**\n- Always verify measurements on-site\n- Account for roof irregularities\n- Measure all projections and dormers\n- Document special conditions\n\n**Digital Tools:**\n- Satellite measurement services\n- Drone surveying for large projects\n- CAD software for complex roofs\n- Mobile apps for quick estimates\n\n### Comprehensive Takeoffs\n\n**Material Categories:**\n1. **Primary roofing material** with waste factors\n2. **Underlayment** including ice and water shield\n3. **Accessories** (ridge, starter, drip edge)\n4. **Fasteners** and adhesives\n5. **Flashing** materials and labor\n\n**Labor Categories:**\n1. **Tear-off** if applicable\n2. **Deck repair** and preparation\n3. **Installation** by material type\n4. **Cleanup** and disposal\n5. **Final inspection** and touch-up\n\n### Risk Assessment\n\n**Project Complexity Factors:**\n- **Access difficulty**: Affects labor productivity\n- **Architectural features**: Increases material waste\n- **Structural conditions**: May require repairs\n- **Weather exposure**: Seasonal considerations\n\n**Contingency Planning:**\n- **Material cost increases**: 5-10% escalation\n- **Weather delays**: Schedule buffer\n- **Unknown conditions**: 10-15% contingency\n- **Change orders**: Client communication\n\n## Using CostFlowAI's Roofing Calculator\n\n### Automated Calculations\n\n**Our Roofing Pro Calculator provides:**\n- **Intelligent roof area calculations** with pitch factors\n- **Material takeoffs** including waste factors\n- **Labor estimation** with regional adjustments\n- **Cost breakdowns** by component and trade\n- **Professional reports** for client presentation\n\n### Advanced Features\n\n**Pitch and Complexity Adjustments:**\n- Automatic roof factor application\n- Waste factor recommendations\n- Labor productivity adjustments\n- Safety requirement considerations\n\n**Material Selection:**\n- Comprehensive material database\n- Regional pricing integration\n- Quality grade comparisons\n- Warranty and performance data\n\n**Export Capabilities:**\n- Detailed material lists\n- Labor breakdown schedules\n- Professional PDF proposals\n- Excel integration for further analysis\n\n## Conclusion\n\nRoofing cost estimation requires understanding of materials, installation methods, and regional factors. By using systematic calculation methods and accounting for project-specific conditions, you can create accurate, profitable estimates.\n\n**Ready to streamline your roofing estimates?** Try our [Roofing Pro Calculator](/calculators) for automated calculations with professional reporting capabilities.\n\n---\n\n*Next article: Plumbing rough-in calculations including fixture units, pipe sizing, and drain-waste-vent system design principles.*","size_bytes":10680},"assets/js/core/analytics.js":{"content":"/**\n * CostFlowAI Analytics Module\n * Comprehensive analytics tracking for construction cost calculation platform\n */\n\nclass AnalyticsManager {\n  constructor() {\n    this.config = {\n      enabled: false,\n      trackingId: null,\n      dataLayer: [],\n      consentGiven: false,\n      debug: false\n    };\n    \n    this.events = {\n      CALCULATOR_LOAD: 'calculator_load',\n      CALCULATOR_CALCULATE: 'calculator_calculate', \n      CALCULATOR_EXPORT: 'calculator_export',\n      SEARCH_QUERY: 'search_query',\n      SEARCH_RESULT_CLICK: 'search_result_click',\n      BLOG_POST_VIEW: 'blog_post_view',\n      PAGE_VIEW: 'page_view',\n      USER_ENGAGEMENT: 'user_engagement',\n      CONVERSION: 'conversion'\n    };\n\n    this.init();\n  }\n\n  /**\n   * Initialize analytics with privacy compliance\n   */\n  init() {\n    // Check for consent (GDPR/privacy compliance)\n    this.checkConsent();\n    \n    // Initialize dataLayer for GTM/GA4\n    window.dataLayer = window.dataLayer || [];\n    this.gtag = function() { window.dataLayer.push(arguments); };\n    \n    // Set default consent state\n    this.gtag('consent', 'default', {\n      analytics_storage: this.config.consentGiven ? 'granted' : 'denied',\n      ad_storage: 'denied', // Always deny ad storage for privacy\n      wait_for_update: 500\n    });\n\n    // Initialize GA4 if valid tracking ID is available\n    const trackingId = this.getTrackingId();\n    if (trackingId) {\n      this.initializeGA4();\n    } else {\n      console.log('🔍 Analytics disabled - no valid tracking ID configured');\n    }\n\n    // Set up enhanced measurements\n    this.setupEnhancedMeasurements();\n    \n    console.log('🔍 Analytics Manager initialized', {\n      enabled: this.config.enabled,\n      consent: this.config.consentGiven,\n      trackingId: this.config.trackingId ? 'configured' : 'pending'\n    });\n  }\n\n  /**\n   * Get tracking ID from environment or meta tag\n   */\n  getTrackingId() {\n    // Check for tracking ID in meta tag\n    const metaTag = document.querySelector('meta[name=\"ga-tracking-id\"]');\n    if (metaTag) {\n      const trackingId = metaTag.getAttribute('content');\n      if (trackingId && trackingId !== 'G-PLACEHOLDER123') {\n        this.config.trackingId = trackingId;\n        return this.config.trackingId;\n      }\n    }\n\n    // Check for environment variable (development)\n    if (typeof ANALYTICS_ID !== 'undefined' && ANALYTICS_ID !== 'G-PLACEHOLDER123') {\n      this.config.trackingId = ANALYTICS_ID;\n      return this.config.trackingId;\n    }\n\n    // No valid tracking ID found - disable analytics in development\n    console.warn('🔍 No valid GA4 tracking ID found. Set GA4_TRACKING_ID environment variable or update meta tag for production.');\n    return null;\n  }\n\n  /**\n   * Initialize Google Analytics 4\n   */\n  initializeGA4() {\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://www.googletagmanager.com/gtag/js?id=${this.config.trackingId}`;\n    \n    // Apply CSP nonce if available\n    const existingScript = document.querySelector('script[nonce]');\n    if (existingScript) {\n      script.nonce = existingScript.getAttribute('nonce');\n    }\n\n    document.head.appendChild(script);\n\n    // Configure GA4 (defer page_view until consent granted)\n    this.gtag('js', new Date());\n    this.gtag('config', this.config.trackingId, {\n      page_title: document.title,\n      page_location: window.location.href,\n      anonymize_ip: true, // Privacy compliance\n      allow_google_signals: false, // Disable advertising features\n      send_page_view: false // Defer until consent granted\n    });\n\n    // Send initial page_view only if consent already granted\n    if (this.config.consentGiven) {\n      this.trackPageView();\n    }\n\n    this.config.enabled = true;\n    window.gtag = this.gtag; // Make gtag globally available\n\n    console.log('✅ Google Analytics 4 initialized:', this.config.trackingId);\n  }\n\n  /**\n   * Check and manage user consent\n   */\n  checkConsent() {\n    // Check for existing consent preference\n    const consent = localStorage.getItem('analytics-consent');\n    \n    if (consent === 'granted') {\n      this.config.consentGiven = true;\n    } else if (consent === 'denied') {\n      this.config.consentGiven = false;\n    } else {\n      // No consent given yet, default to denied for privacy\n      this.config.consentGiven = false;\n      this.showConsentBanner();\n    }\n  }\n\n  /**\n   * Show privacy-compliant consent banner\n   */\n  showConsentBanner() {\n    // Only show if no consent decision has been made\n    if (localStorage.getItem('analytics-consent')) return;\n\n    const banner = document.createElement('div');\n    banner.className = 'analytics-consent-banner';\n    banner.innerHTML = `\n      <div class=\"consent-content\">\n        <p>We use analytics to improve your experience and understand how our calculators help construction professionals.</p>\n        <div class=\"consent-actions\">\n          <button id=\"consent-accept\" class=\"btn btn-primary\">Accept Analytics</button>\n          <button id=\"consent-decline\" class=\"btn btn-secondary\">Decline</button>\n          <a href=\"/privacy\" class=\"consent-link\">Privacy Policy</a>\n        </div>\n      </div>\n    `;\n\n    // Add CSS for the banner\n    const style = document.createElement('style');\n    style.textContent = `\n      .analytics-consent-banner {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background: rgba(255, 255, 255, 0.98);\n        border-top: 2px solid #1e40af;\n        padding: 1rem;\n        box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);\n        z-index: 1000;\n        font-size: 0.9rem;\n      }\n      \n      .consent-content {\n        max-width: 1200px;\n        margin: 0 auto;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        gap: 1rem;\n      }\n      \n      .consent-actions {\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n      \n      .consent-link {\n        color: #6b7280;\n        text-decoration: underline;\n        font-size: 0.85rem;\n      }\n\n      @media (max-width: 768px) {\n        .consent-content {\n          flex-direction: column;\n          text-align: center;\n        }\n        \n        .consent-actions {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n    document.body.appendChild(banner);\n\n    // Handle consent decisions\n    document.getElementById('consent-accept').addEventListener('click', () => {\n      this.grantConsent();\n      banner.remove();\n    });\n\n    document.getElementById('consent-decline').addEventListener('click', () => {\n      this.denyConsent();\n      banner.remove();\n    });\n  }\n\n  /**\n   * Grant analytics consent\n   */\n  grantConsent() {\n    localStorage.setItem('analytics-consent', 'granted');\n    this.config.consentGiven = true;\n    \n    // Update consent for GA4\n    if (window.gtag) {\n      this.gtag('consent', 'update', {\n        analytics_storage: 'granted'\n      });\n    }\n\n    // Initialize GA4 if not already done and valid tracking ID exists\n    if (!this.config.enabled && this.config.trackingId) {\n      this.initializeGA4();\n    }\n\n    // Send initial page view on consent grant\n    this.trackPageView();\n\n    console.log('✅ Analytics consent granted');\n  }\n\n  /**\n   * Deny analytics consent\n   */\n  denyConsent() {\n    localStorage.setItem('analytics-consent', 'denied');\n    this.config.consentGiven = false;\n    \n    // Update consent for GA4\n    if (window.gtag) {\n      this.gtag('consent', 'update', {\n        analytics_storage: 'denied'\n      });\n    }\n\n    console.log('❌ Analytics consent denied');\n  }\n\n  /**\n   * Setup enhanced measurement tracking\n   */\n  setupEnhancedMeasurements() {\n    // Track calculator interactions\n    this.setupCalculatorTracking();\n    \n    // Track search interactions\n    this.setupSearchTracking();\n    \n    // Track scroll depth\n    this.setupScrollTracking();\n    \n    // Track file downloads\n    this.setupDownloadTracking();\n    \n    // Track external link clicks\n    this.setupExternalLinkTracking();\n  }\n\n  /**\n   * Track calculator usage and conversions\n   */\n  setupCalculatorTracking() {\n    // Listen for calculator events\n    document.addEventListener('calculator:loaded', (event) => {\n      this.trackEvent(this.events.CALCULATOR_LOAD, {\n        calculator_type: event.detail.type,\n        calculator_name: event.detail.name\n      });\n    });\n\n    document.addEventListener('calculator:calculated', (event) => {\n      this.trackEvent(this.events.CALCULATOR_CALCULATE, {\n        calculator_type: event.detail.type,\n        calculator_name: event.detail.name,\n        input_count: event.detail.inputCount,\n        value: event.detail.totalCost // For conversion tracking\n      });\n    });\n\n    document.addEventListener('calculator:exported', (event) => {\n      this.trackEvent(this.events.CALCULATOR_EXPORT, {\n        calculator_type: event.detail.type,\n        export_format: event.detail.format,\n        value: event.detail.totalCost\n      });\n      \n      // Track as conversion\n      this.trackConversion('calculator_export', event.detail.totalCost);\n    });\n  }\n\n  /**\n   * Track search interactions\n   */\n  setupSearchTracking() {\n    // Search queries\n    document.addEventListener('search:query', (event) => {\n      this.trackEvent(this.events.SEARCH_QUERY, {\n        search_term: event.detail.query,\n        results_count: event.detail.resultsCount\n      });\n    });\n\n    // Search result clicks\n    document.addEventListener('search:result-click', (event) => {\n      this.trackEvent(this.events.SEARCH_RESULT_CLICK, {\n        search_term: event.detail.query,\n        result_url: event.detail.url,\n        result_type: event.detail.type\n      });\n    });\n  }\n\n  /**\n   * Track scroll depth for engagement\n   */\n  setupScrollTracking() {\n    let maxScroll = 0;\n    const milestones = [25, 50, 75, 90];\n    const tracked = new Set();\n\n    window.addEventListener('scroll', () => {\n      const scrollPercent = Math.round(\n        (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100\n      );\n      \n      maxScroll = Math.max(maxScroll, scrollPercent);\n      \n      milestones.forEach(milestone => {\n        if (maxScroll >= milestone && !tracked.has(milestone)) {\n          tracked.add(milestone);\n          this.trackEvent('scroll_depth', {\n            scroll_depth: milestone,\n            page_title: document.title\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Track file downloads\n   */\n  setupDownloadTracking() {\n    document.addEventListener('click', (event) => {\n      const link = event.target.closest('a');\n      if (!link) return;\n\n      const href = link.href;\n      const downloadExtensions = ['.pdf', '.xlsx', '.csv', '.json', '.zip'];\n      \n      if (downloadExtensions.some(ext => href.includes(ext))) {\n        this.trackEvent('file_download', {\n          file_url: href,\n          file_type: href.split('.').pop(),\n          link_text: link.textContent.trim()\n        });\n      }\n    });\n  }\n\n  /**\n   * Track external link clicks\n   */\n  setupExternalLinkTracking() {\n    document.addEventListener('click', (event) => {\n      const link = event.target.closest('a');\n      if (!link) return;\n\n      const href = link.href;\n      if (href && !href.startsWith(window.location.origin) && href.startsWith('http')) {\n        this.trackEvent('external_link_click', {\n          external_url: href,\n          link_text: link.textContent.trim()\n        });\n      }\n    });\n  }\n\n  /**\n   * Track custom events\n   */\n  trackEvent(eventName, parameters = {}) {\n    if (!this.config.enabled || !this.config.consentGiven) {\n      if (this.config.debug) {\n        console.log('🔍 Analytics event (consent denied):', eventName, parameters);\n      }\n      return;\n    }\n\n    // Add common parameters\n    const eventData = {\n      ...parameters,\n      timestamp: Date.now(),\n      page_title: document.title,\n      page_location: window.location.href\n    };\n\n    // Send to GA4\n    if (window.gtag) {\n      this.gtag('event', eventName, eventData);\n    }\n\n    if (this.config.debug) {\n      console.log('🔍 Analytics event tracked:', eventName, eventData);\n    }\n  }\n\n  /**\n   * Track conversions (calculator usage)\n   */\n  trackConversion(conversionType, value = 0) {\n    if (!this.config.enabled || !this.config.consentGiven) return;\n\n    this.trackEvent(this.events.CONVERSION, {\n      conversion_type: conversionType,\n      value: value,\n      currency: 'USD'\n    });\n\n    // Track as GA4 conversion\n    if (window.gtag) {\n      this.gtag('event', 'conversion', {\n        send_to: this.config.trackingId,\n        value: value,\n        currency: 'USD'\n      });\n    }\n  }\n\n  /**\n   * Track page views manually\n   */\n  trackPageView(page = null) {\n    if (!this.config.enabled || !this.config.consentGiven) return;\n\n    const pageData = {\n      page_title: document.title,\n      page_location: page || window.location.href\n    };\n\n    if (window.gtag) {\n      this.gtag('config', this.config.trackingId, pageData);\n    }\n  }\n\n  /**\n   * Enable debug mode\n   */\n  enableDebug() {\n    this.config.debug = true;\n    console.log('🔍 Analytics debug mode enabled');\n  }\n\n  /**\n   * Get analytics status\n   */\n  getStatus() {\n    return {\n      enabled: this.config.enabled,\n      consentGiven: this.config.consentGiven,\n      trackingId: this.config.trackingId,\n      debug: this.config.debug\n    };\n  }\n}\n\n// Initialize analytics manager\nconst analytics = new AnalyticsManager();\n\n// Export for global access\nwindow.CostFlowAnalytics = analytics;\n\nexport default analytics;","size_bytes":13649},"ANALYTICS_SETUP.md":{"content":"# Analytics Setup Guide\n\n## Setting up Google Analytics 4 for CostFlowAI\n\n### Production Setup\n\n1. **Create a GA4 Property**:\n   - Go to [Google Analytics](https://analytics.google.com/)\n   - Create a new property for your domain\n   - Copy your Measurement ID (format: G-XXXXXXXXXX)\n\n2. **Configure Tracking ID**:\n   Update the meta tag in `index.html` and all calculator pages:\n   ```html\n   <meta name=\"ga-tracking-id\" content=\"G-YOUR-ACTUAL-ID\">\n   ```\n\n3. **Environment Variable (Optional)**:\n   Set `GA4_TRACKING_ID` environment variable for dynamic configuration\n\n### Privacy Compliance\n\n✅ **GDPR/Privacy Ready**:\n- Consent banner appears on first visit\n- Analytics disabled by default until consent granted\n- No tracking cookies until user consent\n- Ad storage permanently disabled\n\n✅ **Tracked Events**:\n- Calculator loads and calculations\n- Search queries and result clicks  \n- PDF/CSV/XLSX/JSON exports\n- Scroll depth and engagement\n- External link clicks\n\n### Testing Analytics\n\n1. **Development**: Uses placeholder ID, analytics disabled\n2. **Production**: Verify real GA4 ID is configured\n3. **Console**: Check for \"Analytics Manager initialized\" logs\n4. **GA4 Dashboard**: Events should appear within 24-48 hours\n\n### Conversion Goals\n\nSet up these goals in GA4 for business insights:\n- `calculator_calculate` - User performs calculation\n- `calculator_export` - User exports results (high-value conversion)\n- `search_query` - User searches content\n- `file_download` - User downloads resources\n\n### Notes\n\n- Analytics gracefully degrades if GA4 unavailable\n- CSP-compliant implementation with nonce handling\n- Privacy-first approach with consent management\n- Integrates with existing event bus system","size_bytes":1717}},"version":1}