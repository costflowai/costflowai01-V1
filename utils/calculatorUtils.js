// Shared calculator utilities and validation

// Input validation
export const validatePositiveNumber = (value, fieldName) => {
  if (!value || value === '') {
    return `${fieldName} is required`;
  }
  const num = parseFloat(value);
  if (isNaN(num) || num <= 0) {
    return `${fieldName} must be a positive number`;
  }
  if (num > 10000) {
    return `${fieldName} seems too large (max 10,000)`;
  }
  return null;
};

export const validateInteger = (value, fieldName) => {
  const error = validatePositiveNumber(value, fieldName);
  if (error) return error;

  const num = parseFloat(value);
  if (!Number.isInteger(num)) {
    return `${fieldName} must be a whole number`;
  }
  return null;
};

// Common calculations
export const calculateVolume = {
  cubicFeet: (length, width, thickness) => {
    return (length * width * thickness) / 12; // thickness in inches
  },

  cubicYards: (volumeCubicFeet) => {
    return volumeCubicFeet / 27;
  },

  withWasteFactor: (volume, wasteFactor = 0.1) => {
    return volume * (1 + wasteFactor);
  }
};

export const calculateArea = {
  rectangle: (length, width) => length * width,

  walls: (length, width, height) => {
    return 2 * (length + width) * height;
  },

  total: (length, width, height) => {
    // Walls + ceiling
    return calculateArea.walls(length, width, height) + calculateArea.rectangle(length, width);
  }
};

// Material calculations
export const materials = {
  concrete: {
    bags80lb: (volumeCubicFeet) => Math.ceil(volumeCubicFeet * 0.6),
    bags60lb: (volumeCubicFeet) => Math.ceil(volumeCubicFeet * 0.8),
    readyMixYards: (volumeCubicYards) => Math.ceil(volumeCubicYards * 10) / 10 // Round to 0.1
  },

  drywall: {
    sheets4x8: (wallArea) => Math.ceil(wallArea / 32), // 32 sq ft per sheet
    mudBuckets: (sheets) => Math.ceil(sheets * 0.5),
    tapeRolls: (sheets) => Math.ceil(sheets * 0.1)
  },

  paint: {
    gallonsNeeded: (totalArea, coats = 2) => (totalArea * coats) / 350, // 350 sq ft per gallon
    gallonsPurchase: (gallonsNeeded, wasteFactor = 0.1) => {
      return Math.ceil(gallonsNeeded * (1 + wasteFactor));
    }
  },

  asphalt: {
    tonnage: (volumeCubicFeet) => volumeCubicFeet * 0.1, // Asphalt weighs ~110 lbs per cubic foot
    tonnageWithWaste: (tonnage, wasteFactor = 0.05) => tonnage * (1 + wasteFactor)
  }
};

// Cost estimation (base prices - would be regional in production)
export const pricing = {
  concrete: {
    readyMixPerYard: 130,
    bags80lbEach: 4.50,
    bags60lbEach: 3.75
  },

  drywall: {
    sheetEach: 12,
    mudBucketEach: 15,
    tapeRollEach: 8
  },

  paint: {
    gallonEach: 35,
    primerGallonEach: 30
  },

  asphalt: {
    tonnageEach: 100
  }
};

// Export functionality
export const exportData = {
  toPrintableHTML: (title, data) => {
    const html = `
      <html>
        <head>
          <title>${title} - CostFlowAI</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }
            .result { margin: 15px 0; padding: 10px; background: #f9f9f9; }
            .label { font-weight: bold; }
            .value { float: right; }
            .highlight { background: #4CAF50; color: white; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <p>Generated by CostFlowAI on ${new Date().toLocaleDateString()}</p>
          ${Object.entries(data).map(([key, value]) => `
            <div class="result ${key === 'estimatedCost' ? 'highlight' : ''}">
              <span class="label">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span>
              <span class="value">${value}</span>
            </div>
          `).join('')}
        </body>
      </html>
    `;
    return html;
  },

  toCSV: (title, inputData, results) => {
    const rows = [
      ['Calculation Type', title],
      ['Generated On', new Date().toLocaleDateString()],
      [''],
      ['Input Parameters', ''],
      ...Object.entries(inputData).map(([key, value]) => [
        key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),
        value
      ]),
      [''],
      ['Results', ''],
      ...Object.entries(results).map(([key, value]) => [
        key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),
        value
      ])
    ];

    return rows.map(row => row.join(',')).join('\n');
  }
};

// Format numbers for display
export const formatters = {
  number: (num, decimals = 2) => {
    if (num === null || num === undefined) return '0';
    return Number(num).toFixed(decimals);
  },

  currency: (num) => {
    if (num === null || num === undefined) return '$0.00';
    return '$' + Number(num).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
  },

  area: (num) => `${formatters.number(num)} sq ft`,

  volume: (num, unit = 'cu yd') => `${formatters.number(num)} ${unit}`,

  weight: (num) => `${formatters.number(num)} tons`,

  count: (num) => Math.ceil(num).toString()
};